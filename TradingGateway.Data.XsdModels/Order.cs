//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace TradingGateway.Data.XsdModels
{
}

namespace TradingGateway.Data.XsdModels
{
}

namespace TradingGateway.Data.XsdModels
{
}

namespace TradingGateway.Data.XsdModels
{
}



/// <summary>
/// <para>
/// Regular expression: (OrderInsert)*
/// </para>
/// </summary>
public partial class OrderInsertReq : XTypedElement, IXMetaData
{

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<OrderInsertLocalType> OrderInsertField;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

    public static explicit operator OrderInsertReq(XElement xe) { return XTypedServices.ToXTypedElement<OrderInsertReq>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

    static OrderInsertReq()
    {
        BuildElementDictionary();
    }

    /// <summary>
    /// <para>
    /// Regular expression: (OrderInsert)*
    /// </para>
    /// </summary>
    public OrderInsertReq()
    {
    }

    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (OrderInsert)*
    /// </para>
    /// </summary>
    public IList<OrderInsertReq.OrderInsertLocalType> OrderInsert
    {
        get
        {
            if ((this.OrderInsertField == null))
            {
                this.OrderInsertField = new XTypedList<OrderInsertLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("OrderInsert", ""));
            }
            return this.OrderInsertField;
        }
        set
        {
            if ((value == null))
            {
                this.OrderInsertField = null;
            }
            else
            {
                if ((this.OrderInsertField == null))
                {
                    this.OrderInsertField = XTypedList<OrderInsertLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OrderInsert", ""));
                }
                else
                {
                    XTypedServices.SetList<OrderInsertLocalType>(this.OrderInsertField, value);
                }
            }
        }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
    {
        get
        {
            return localElementDictionary;
        }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName
    {
        get
        {
            return XName.Get("OrderInsertReq", "");
        }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin
    {
        get
        {
            return SchemaOrigin.Element;
        }
    }

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager
    {
        get
        {
            return LinqToXsdTypeManager.Instance;
        }
    }

    public void Save(string xmlFile)
    {
        XTypedServices.Save(xmlFile, Untyped);
    }

    public void Save(System.IO.TextWriter tw)
    {
        XTypedServices.Save(tw, Untyped);
    }

    public void Save(System.Xml.XmlWriter xmlWriter)
    {
        XTypedServices.Save(xmlWriter, Untyped);
    }

    public static OrderInsertReq Load(string xmlFile)
    {
        return XTypedServices.Load<OrderInsertReq>(xmlFile);
    }

    public static OrderInsertReq Load(System.IO.TextReader xmlFile)
    {
        return XTypedServices.Load<OrderInsertReq>(xmlFile);
    }

    public static OrderInsertReq Parse(string xml)
    {
        return XTypedServices.Parse<OrderInsertReq>(xml);
    }

    public override XTypedElement Clone()
    {
        return XTypedServices.CloneXTypedElement<OrderInsertReq>(this);
    }

    private static void BuildElementDictionary()
    {
        localElementDictionary.Add(XName.Get("OrderInsert", ""), typeof(OrderInsertLocalType));
    }

    ContentModelEntity IXMetaData.GetContentModel()
    {
        return ContentModelEntity.Default;
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Order_LineItemInsert*)
    /// </para>
    /// </summary>
    public partial class OrderInsertLocalType : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Order_LineItemInsertLocalType> Order_LineItemInsertField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator OrderInsertLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OrderInsertLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static OrderInsertLocalType()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Order_LineItemInsert", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Order_LineItemInsert*)
        /// </para>
        /// </summary>
        public OrderInsertLocalType()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Order_LineItemInsert*)
        /// </para>
        /// </summary>
        public IList<OrderInsertReq.OrderInsertLocalType.Order_LineItemInsertLocalType> Order_LineItemInsert
        {
            get
            {
                if ((this.Order_LineItemInsertField == null))
                {
                    this.Order_LineItemInsertField = new XTypedList<Order_LineItemInsertLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Order_LineItemInsert", ""));
                }
                return this.Order_LineItemInsertField;
            }
            set
            {
                if ((value == null))
                {
                    this.Order_LineItemInsertField = null;
                }
                else
                {
                    if ((this.Order_LineItemInsertField == null))
                    {
                        this.Order_LineItemInsertField = XTypedList<Order_LineItemInsertLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Order_LineItemInsert", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<Order_LineItemInsertLocalType>(this.Order_LineItemInsertField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Order_UniqueId
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Order_UniqueId", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Order_UniqueId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string InterchangeNo
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("InterchangeNo", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("InterchangeNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string SupplierOrderPoint
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("SupplierOrderPoint", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("SupplierOrderPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CustomerDeliveryPoint
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("CustomerDeliveryPoint", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("CustomerDeliveryPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string CustomerOrderpoint
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("CustomerOrderpoint", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("CustomerOrderpoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string AlternativeOrderPoint
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("AlternativeOrderPoint", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("AlternativeOrderPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OrderReference_CustomerOrderNo
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("OrderReference_CustomerOrderNo", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("OrderReference_CustomerOrderNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OrderReference_SupplierOrderNo
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("OrderReference_SupplierOrderNo", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("OrderReference_SupplierOrderNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OrderReference_OrderDate
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("OrderReference_OrderDate", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("OrderReference_OrderDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string OrderReference_TransactionCode
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("OrderReference_TransactionCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("OrderReference_TransactionCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DeliveryDate_Earliest
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("DeliveryDate_Earliest", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("DeliveryDate_Earliest", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string DeliveryDate_Latest
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("DeliveryDate_Latest", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("DeliveryDate_Latest", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Narrative
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Narrative", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Narrative", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("OrderInsert", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Fragment;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<OrderInsertLocalType>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Order_LineItemInsert", ""), typeof(Order_LineItemInsertLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Order_LineItem_CreditAdjustmentInsert*)
        /// </para>
        /// </summary>
        public partial class Order_LineItemInsertLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Order_LineItem_CreditAdjustmentInsertLocalType> Order_LineItem_CreditAdjustmentInsertField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator Order_LineItemInsertLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Order_LineItemInsertLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static Order_LineItemInsertLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Order_LineItem_CreditAdjustmentInsert", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Order_LineItem_CreditAdjustmentInsert*)
            /// </para>
            /// </summary>
            public Order_LineItemInsertLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Order_LineItem_CreditAdjustmentInsert*)
            /// </para>
            /// </summary>
            public IList<OrderInsertReq.OrderInsertLocalType.Order_LineItemInsertLocalType.Order_LineItem_CreditAdjustmentInsertLocalType> Order_LineItem_CreditAdjustmentInsert
            {
                get
                {
                    if ((this.Order_LineItem_CreditAdjustmentInsertField == null))
                    {
                        this.Order_LineItem_CreditAdjustmentInsertField = new XTypedList<Order_LineItem_CreditAdjustmentInsertLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Order_LineItem_CreditAdjustmentInsert", ""));
                    }
                    return this.Order_LineItem_CreditAdjustmentInsertField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.Order_LineItem_CreditAdjustmentInsertField = null;
                    }
                    else
                    {
                        if ((this.Order_LineItem_CreditAdjustmentInsertField == null))
                        {
                            this.Order_LineItem_CreditAdjustmentInsertField = XTypedList<Order_LineItem_CreditAdjustmentInsertLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Order_LineItem_CreditAdjustmentInsert", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<Order_LineItem_CreditAdjustmentInsertLocalType>(this.Order_LineItem_CreditAdjustmentInsertField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Order_UniqueId
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("Order_UniqueId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("Order_UniqueId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string LineSequenceNo
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("LineSequenceNo", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("LineSequenceNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string ConsumerBarcode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ConsumerBarcode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ConsumerBarcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string OrderUnitBarcode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("OrderUnitBarcode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("OrderUnitBarcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string ProductCode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ProductCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ProductCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string ProductDescription
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("ProductDescription", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("ProductDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string OrderQuantity
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("OrderQuantity", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("OrderQuantity", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string OrderCostPrice
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("OrderCostPrice", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("OrderCostPrice", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string OrderLineCost
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("OrderLineCost", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("OrderLineCost", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string VatRatePercentage
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("VatRatePercentage", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("VatRatePercentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string VatRateCode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("VatRateCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("VatRateCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string PackSize
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("PackSize", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("PackSize", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string SupplementaryBarcode
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("SupplementaryBarcode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("SupplementaryBarcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string LineNarrative
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("LineNarrative", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("LineNarrative", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Order_LineItemInsert", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<Order_LineItemInsertLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("Order_LineItem_CreditAdjustmentInsert", ""), typeof(Order_LineItem_CreditAdjustmentInsertLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            public partial class Order_LineItem_CreditAdjustmentInsertLocalType : XTypedElement, IXMetaData
            {

                public static explicit operator Order_LineItem_CreditAdjustmentInsertLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Order_LineItem_CreditAdjustmentInsertLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                public Order_LineItem_CreditAdjustmentInsertLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Order_UniqueId
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("Order_UniqueId", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("Order_UniqueId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string LineItemId
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("LineItemId", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("LineItemId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Indicator
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("Indicator", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("Indicator", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Percentage
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("Percentage", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("Percentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Value
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("Value", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("Order_LineItem_CreditAdjustmentInsert", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<Order_LineItem_CreditAdjustmentInsertLocalType>(this);
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
}

public class LinqToXsdTypeManager : ILinqToXsdTypeManager
{

    static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

    private static XmlSchemaSet schemaSet;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

    static LinqToXsdTypeManager()
    {
        BuildElementDictionary();
    }

    XmlSchemaSet ILinqToXsdTypeManager.Schemas
    {
        get
        {
            if ((schemaSet == null))
            {
                XmlSchemaSet tempSet = new XmlSchemaSet();
                System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
            }
            return schemaSet;
        }
        set
        {
            schemaSet = value;
        }
    }

    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
    {
        get
        {
            return XTypedServices.EmptyDictionary;
        }
    }

    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
    {
        get
        {
            return elementDictionary;
        }
    }

    Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
    {
        get
        {
            return XTypedServices.EmptyTypeMappingDictionary;
        }
    }

    public static LinqToXsdTypeManager Instance
    {
        get
        {
            return typeManagerSingleton;
        }
    }

    private static void BuildElementDictionary()
    {
        elementDictionary.Add(XName.Get("OrderInsertReq", ""), typeof(global::OrderInsertReq));
    }

    protected internal static void AddSchemas(XmlSchemaSet schemas)
    {
        schemas.Add(schemaSet);
    }

    public static System.Type GetRootType()
    {
        return elementDictionary[XName.Get("OrderInsertReq", "")];
    }
}

public partial class XRootNamespace
{

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;


    public OrderInsertReq OrderInsertReq { get { return rootObject as OrderInsertReq; } }

    private XRootNamespace()
    {
    }

    public XRootNamespace(OrderInsertReq root)
    {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }

    public XDocument XDocument
    {
        get
        {
            return doc;
        }
    }

    public static XRootNamespace Load(string xmlFile)
    {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRootNamespace Load(string xmlFile, LoadOptions options)
    {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRootNamespace Load(TextReader textReader)
    {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRootNamespace Load(TextReader textReader, LoadOptions options)
    {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRootNamespace Load(XmlReader xmlReader)
    {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRootNamespace Parse(string text)
    {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRootNamespace Parse(string text, LoadOptions options)
    {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public virtual void Save(string fileName)
    {
        doc.Save(fileName);
    }

    public virtual void Save(TextWriter textWriter)
    {
        doc.Save(textWriter);
    }

    public virtual void Save(XmlWriter writer)
    {
        doc.Save(writer);
    }

    public virtual void Save(TextWriter textWriter, SaveOptions options)
    {
        doc.Save(textWriter, options);
    }

    public virtual void Save(string fileName, SaveOptions options)
    {
        doc.Save(fileName, options);
    }
}

public partial class XRoot
{

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;

    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;


    public OrderInsertReq OrderInsertReq { get { return rootObject as OrderInsertReq; } }

    private XRoot()
    {
    }

    public XRoot(OrderInsertReq root)
    {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }

    public XDocument XDocument
    {
        get
        {
            return doc;
        }
    }

    public static XRoot Load(string xmlFile)
    {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRoot Load(string xmlFile, LoadOptions options)
    {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRoot Load(TextReader textReader)
    {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRoot Load(TextReader textReader, LoadOptions options)
    {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRoot Load(XmlReader xmlReader)
    {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRoot Parse(string text)
    {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public static XRoot Parse(string text, LoadOptions options)
    {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null))
        {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }

    public virtual void Save(string fileName)
    {
        doc.Save(fileName);
    }

    public virtual void Save(TextWriter textWriter)
    {
        doc.Save(textWriter);
    }

    public virtual void Save(XmlWriter writer)
    {
        doc.Save(writer);
    }

    public virtual void Save(TextWriter textWriter, SaveOptions options)
    {
        doc.Save(textWriter, options);
    }

    public virtual void Save(string fileName, SaveOptions options)
    {
        doc.Save(fileName, options);
    }
}
