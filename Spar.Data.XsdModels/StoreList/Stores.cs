//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;


namespace Spar.Data.XsdModels.StoreList.Stores
{


    /// <summary>
    /// <para>
    /// Regular expression: (Store*)
    /// </para>
    /// </summary>
    public partial class StoreList : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StoreLocalType> StoreField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator StoreList(XElement xe) { return XTypedServices.ToXTypedElement<StoreList>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static StoreList()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Store", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Store*)
        /// </para>
        /// </summary>
        public StoreList()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Store*)
        /// </para>
        /// </summary>
        public IList<StoreList.StoreLocalType> Store
        {
            get
            {
                if ((this.StoreField == null))
                {
                    this.StoreField = new XTypedList<StoreLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Store", ""));
                }
                return this.StoreField;
            }
            set
            {
                if ((value == null))
                {
                    this.StoreField = null;
                }
                else
                {
                    if ((this.StoreField == null))
                    {
                        this.StoreField = XTypedList<StoreLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Store", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<StoreLocalType>(this.StoreField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("StoreList", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static StoreList Load(string xmlFile)
        {
            return XTypedServices.Load<StoreList>(xmlFile);
        }

        public static StoreList Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<StoreList>(xmlFile);
        }

        public static StoreList Parse(string xml)
        {
            return XTypedServices.Parse<StoreList>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<StoreList>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Store", ""), typeof(StoreLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
        /// </para>
        /// </summary>
        public partial class StoreLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator StoreLocalType(XElement xe) { return XTypedServices.ToXTypedElement<StoreLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static StoreLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DistributionId", "")), new NamedContentModelEntity(XName.Get("Code", "")), new NamedContentModelEntity(XName.Get("Gln", "")), new NamedContentModelEntity(XName.Get("Name", "")), new NamedContentModelEntity(XName.Get("OwnerName", "")), new NamedContentModelEntity(XName.Get("ManagerName", "")), new NamedContentModelEntity(XName.Get("Address", "")), new NamedContentModelEntity(XName.Get("PhoneNumber", "")), new NamedContentModelEntity(XName.Get("FaxNumber", "")), new NamedContentModelEntity(XName.Get("Email", "")), new NamedContentModelEntity(XName.Get("Status", "")), new NamedContentModelEntity(XName.Get("Action", "")), new NamedContentModelEntity(XName.Get("Vat", "")), new NamedContentModelEntity(XName.Get("FormatType", "")), new NamedContentModelEntity(XName.Get("CountryCode", "")), new NamedContentModelEntity(XName.Get("ClaimsForSupplierIndicator", "")), new NamedContentModelEntity(XName.Get("FullItemSocRequired", "")), new NamedContentModelEntity(XName.Get("ExportCustIndicator", "")), new NamedContentModelEntity(XName.Get("VATIndicator", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public StoreLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string DistributionId
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("DistributionId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("DistributionId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string Code
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Code", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string Gln
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Gln", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Gln", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string Name
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string OwnerName
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("OwnerName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("OwnerName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string ManagerName
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ManagerName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("ManagerName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public AddressLocalType Address
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Address", ""));
                    return ((AddressLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("Address", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string PhoneNumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("PhoneNumber", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("PhoneNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string FaxNumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("FaxNumber", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("FaxNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string Email
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Email", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Email", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string Status
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Status", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string Action
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Action", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Action", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string Vat
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Vat", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string FormatType
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("FormatType", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("FormatType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string CountryCode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CountryCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("CountryCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string ClaimsForSupplierIndicator
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ClaimsForSupplierIndicator", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("ClaimsForSupplierIndicator", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string FullItemSocRequired
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("FullItemSocRequired", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("FullItemSocRequired", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string ExportCustIndicator
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ExportCustIndicator", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("ExportCustIndicator", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (DistributionId, Code, Gln, Name, OwnerName, ManagerName, Address, PhoneNumber, FaxNumber, Email, Status, Action, Vat, FormatType, CountryCode, ClaimsForSupplierIndicator, FullItemSocRequired, ExportCustIndicator, VATIndicator)
            /// </para>
            /// </summary>
            public string VATIndicator
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("VATIndicator", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("VATIndicator", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Store", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<StoreLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("DistributionId", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Code", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Gln", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Name", ""), typeof(string));
                localElementDictionary.Add(XName.Get("OwnerName", ""), typeof(string));
                localElementDictionary.Add(XName.Get("ManagerName", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Address", ""), typeof(AddressLocalType));
                localElementDictionary.Add(XName.Get("PhoneNumber", ""), typeof(string));
                localElementDictionary.Add(XName.Get("FaxNumber", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Email", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Status", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Action", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Vat", ""), typeof(string));
                localElementDictionary.Add(XName.Get("FormatType", ""), typeof(string));
                localElementDictionary.Add(XName.Get("CountryCode", ""), typeof(string));
                localElementDictionary.Add(XName.Get("ClaimsForSupplierIndicator", ""), typeof(string));
                localElementDictionary.Add(XName.Get("FullItemSocRequired", ""), typeof(string));
                localElementDictionary.Add(XName.Get("ExportCustIndicator", ""), typeof(string));
                localElementDictionary.Add(XName.Get("VATIndicator", ""), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (AddressLine1, AddressLine2, AddressLine3, AddressLine4)
            /// </para>
            /// </summary>
            public partial class AddressLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator AddressLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AddressLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static AddressLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AddressLine1", "")), new NamedContentModelEntity(XName.Get("AddressLine2", "")), new NamedContentModelEntity(XName.Get("AddressLine3", "")), new NamedContentModelEntity(XName.Get("AddressLine4", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (AddressLine1, AddressLine2, AddressLine3, AddressLine4)
                /// </para>
                /// </summary>
                public AddressLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (AddressLine1, AddressLine2, AddressLine3, AddressLine4)
                /// </para>
                /// </summary>
                public string AddressLine1
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("AddressLine1", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("AddressLine1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (AddressLine1, AddressLine2, AddressLine3, AddressLine4)
                /// </para>
                /// </summary>
                public string AddressLine2
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("AddressLine2", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("AddressLine2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (AddressLine1, AddressLine2, AddressLine3, AddressLine4)
                /// </para>
                /// </summary>
                public string AddressLine3
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("AddressLine3", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("AddressLine3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (AddressLine1, AddressLine2, AddressLine3, AddressLine4)
                /// </para>
                /// </summary>
                public string AddressLine4
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("AddressLine4", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("AddressLine4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("Address", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<AddressLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("AddressLine1", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("AddressLine2", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("AddressLine3", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("AddressLine4", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("StoreList", ""), typeof(StoreList));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("StoreList", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public StoreList StoreList { get { return rootObject as StoreList; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(StoreList root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public StoreList StoreList { get { return rootObject as StoreList; } }

        private XRoot()
        {
        }

        public XRoot(StoreList root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}