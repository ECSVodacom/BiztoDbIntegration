//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;
namespace Spar.Data.XsdModels.Recon
{




    /// <summary>
    /// <para>
    /// Regular expression: (SupplierNumber?, ReportDate?, EDIAccountingPoint?, EDIDispatchPoint?, DCEANCode?, VarianceKeyLegend*, Store*)
    /// </para>
    /// </summary>
    public partial class ReconWeeklyImport : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VarianceKeyLegendLocalType> VarianceKeyLegendField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StoreLocalType> StoreField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator ReconWeeklyImport(XElement xe) { return XTypedServices.ToXTypedElement<ReconWeeklyImport>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static ReconWeeklyImport()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SupplierNumber", "")), new NamedContentModelEntity(XName.Get("ReportDate", "")), new NamedContentModelEntity(XName.Get("EDIAccountingPoint", "")), new NamedContentModelEntity(XName.Get("EDIDispatchPoint", "")), new NamedContentModelEntity(XName.Get("DCEANCode", "")), new NamedContentModelEntity(XName.Get("VarianceKeyLegend", "")), new NamedContentModelEntity(XName.Get("Store", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (SupplierNumber?, ReportDate?, EDIAccountingPoint?, EDIDispatchPoint?, DCEANCode?, VarianceKeyLegend*, Store*)
        /// </para>
        /// </summary>
        public ReconWeeklyImport()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SupplierNumber?, ReportDate?, EDIAccountingPoint?, EDIDispatchPoint?, DCEANCode?, VarianceKeyLegend*, Store*)
        /// </para>
        /// </summary>
        public string SupplierNumber
        {
            get
            {
                XElement x = this.GetElement(XName.Get("SupplierNumber", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("SupplierNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SupplierNumber?, ReportDate?, EDIAccountingPoint?, EDIDispatchPoint?, DCEANCode?, VarianceKeyLegend*, Store*)
        /// </para>
        /// </summary>
        public string ReportDate
        {
            get
            {
                XElement x = this.GetElement(XName.Get("ReportDate", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("ReportDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SupplierNumber?, ReportDate?, EDIAccountingPoint?, EDIDispatchPoint?, DCEANCode?, VarianceKeyLegend*, Store*)
        /// </para>
        /// </summary>
        public string EDIAccountingPoint
        {
            get
            {
                XElement x = this.GetElement(XName.Get("EDIAccountingPoint", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("EDIAccountingPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SupplierNumber?, ReportDate?, EDIAccountingPoint?, EDIDispatchPoint?, DCEANCode?, VarianceKeyLegend*, Store*)
        /// </para>
        /// </summary>
        public string EDIDispatchPoint
        {
            get
            {
                XElement x = this.GetElement(XName.Get("EDIDispatchPoint", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("EDIDispatchPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SupplierNumber?, ReportDate?, EDIAccountingPoint?, EDIDispatchPoint?, DCEANCode?, VarianceKeyLegend*, Store*)
        /// </para>
        /// </summary>
        public string DCEANCode
        {
            get
            {
                XElement x = this.GetElement(XName.Get("DCEANCode", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetElement(XName.Get("DCEANCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SupplierNumber?, ReportDate?, EDIAccountingPoint?, EDIDispatchPoint?, DCEANCode?, VarianceKeyLegend*, Store*)
        /// </para>
        /// </summary>
        public IList<ReconWeeklyImport.VarianceKeyLegendLocalType> VarianceKeyLegend
        {
            get
            {
                if ((this.VarianceKeyLegendField == null))
                {
                    this.VarianceKeyLegendField = new XTypedList<VarianceKeyLegendLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("VarianceKeyLegend", ""));
                }
                return this.VarianceKeyLegendField;
            }
            set
            {
                if ((value == null))
                {
                    this.VarianceKeyLegendField = null;
                }
                else
                {
                    if ((this.VarianceKeyLegendField == null))
                    {
                        this.VarianceKeyLegendField = XTypedList<VarianceKeyLegendLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("VarianceKeyLegend", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<VarianceKeyLegendLocalType>(this.VarianceKeyLegendField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SupplierNumber?, ReportDate?, EDIAccountingPoint?, EDIDispatchPoint?, DCEANCode?, VarianceKeyLegend*, Store*)
        /// </para>
        /// </summary>
        public IList<ReconWeeklyImport.StoreLocalType> Store
        {
            get
            {
                if ((this.StoreField == null))
                {
                    this.StoreField = new XTypedList<StoreLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Store", ""));
                }
                return this.StoreField;
            }
            set
            {
                if ((value == null))
                {
                    this.StoreField = null;
                }
                else
                {
                    if ((this.StoreField == null))
                    {
                        this.StoreField = XTypedList<StoreLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Store", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<StoreLocalType>(this.StoreField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Name
        {
            get
            {
                XAttribute x = this.Attribute(XName.Get("Name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set
            {
                this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("Supplier", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static ReconWeeklyImport Load(string xmlFile)
        {
            return XTypedServices.Load<ReconWeeklyImport>(xmlFile);
        }

        public static ReconWeeklyImport Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<ReconWeeklyImport>(xmlFile);
        }

        public static ReconWeeklyImport Parse(string xml)
        {
            return XTypedServices.Parse<ReconWeeklyImport>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<ReconWeeklyImport>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("SupplierNumber", ""), typeof(string));
            localElementDictionary.Add(XName.Get("ReportDate", ""), typeof(string));
            localElementDictionary.Add(XName.Get("EDIAccountingPoint", ""), typeof(string));
            localElementDictionary.Add(XName.Get("EDIDispatchPoint", ""), typeof(string));
            localElementDictionary.Add(XName.Get("DCEANCode", ""), typeof(string));
            localElementDictionary.Add(XName.Get("VarianceKeyLegend", ""), typeof(VarianceKeyLegendLocalType));
            localElementDictionary.Add(XName.Get("Store", ""), typeof(StoreLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        public partial class VarianceKeyLegendLocalType : XTypedElement, IXMetaData
        {

            public static explicit operator VarianceKeyLegendLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VarianceKeyLegendLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            public VarianceKeyLegendLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Description
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("Description", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("Description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Key
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("Key", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("Key", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("VarianceKeyLegend", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<VarianceKeyLegendLocalType>(this);
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return ContentModelEntity.Default;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (AccountNumber?, AutoRecon?, Line*, LevelTotal*)
        /// </para>
        /// </summary>
        public partial class StoreLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<LineLocalType> LineField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<LevelTotalLocalType> LevelTotalField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator StoreLocalType(XElement xe) { return XTypedServices.ToXTypedElement<StoreLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static StoreLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AccountNumber", "")), new NamedContentModelEntity(XName.Get("AutoRecon", "")), new NamedContentModelEntity(XName.Get("Line", "")), new NamedContentModelEntity(XName.Get("LevelTotal", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (AccountNumber?, AutoRecon?, Line*, LevelTotal*)
            /// </para>
            /// </summary>
            public StoreLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AccountNumber?, AutoRecon?, Line*, LevelTotal*)
            /// </para>
            /// </summary>
            public string AccountNumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("AccountNumber", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("AccountNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (AccountNumber?, AutoRecon?, Line*, LevelTotal*)
            /// </para>
            /// </summary>
            public string AutoRecon
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("AutoRecon", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("AutoRecon", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (AccountNumber?, AutoRecon?, Line*, LevelTotal*)
            /// </para>
            /// </summary>
            public IList<ReconWeeklyImport.StoreLocalType.LineLocalType> Line
            {
                get
                {
                    if ((this.LineField == null))
                    {
                        this.LineField = new XTypedList<LineLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Line", ""));
                    }
                    return this.LineField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.LineField = null;
                    }
                    else
                    {
                        if ((this.LineField == null))
                        {
                            this.LineField = XTypedList<LineLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Line", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<LineLocalType>(this.LineField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (AccountNumber?, AutoRecon?, Line*, LevelTotal*)
            /// </para>
            /// </summary>
            public IList<ReconWeeklyImport.StoreLocalType.LevelTotalLocalType> LevelTotal
            {
                get
                {
                    if ((this.LevelTotalField == null))
                    {
                        this.LevelTotalField = new XTypedList<LevelTotalLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("LevelTotal", ""));
                    }
                    return this.LevelTotalField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.LevelTotalField = null;
                    }
                    else
                    {
                        if ((this.LevelTotalField == null))
                        {
                            this.LevelTotalField = XTypedList<LevelTotalLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LevelTotal", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<LevelTotalLocalType>(this.LevelTotalField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public string Name
            {
                get
                {
                    XAttribute x = this.Attribute(XName.Get("Name", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Store", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<StoreLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("AccountNumber", ""), typeof(string));
                localElementDictionary.Add(XName.Get("AutoRecon", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Line", ""), typeof(LineLocalType));
                localElementDictionary.Add(XName.Get("LevelTotal", ""), typeof(LevelTotalLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LineDetails*, LineAmount*)
            /// </para>
            /// </summary>
            public partial class LineLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<LineDetailsLocalType> LineDetailsField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<LineAmountLocalType> LineAmountField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator LineLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LineLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static LineLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LineDetails", "")), new NamedContentModelEntity(XName.Get("LineAmount", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LineDetails*, LineAmount*)
                /// </para>
                /// </summary>
                public LineLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (LineDetails*, LineAmount*)
                /// </para>
                /// </summary>
                public IList<ReconWeeklyImport.StoreLocalType.LineLocalType.LineDetailsLocalType> LineDetails
                {
                    get
                    {
                        if ((this.LineDetailsField == null))
                        {
                            this.LineDetailsField = new XTypedList<LineDetailsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("LineDetails", ""));
                        }
                        return this.LineDetailsField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.LineDetailsField = null;
                        }
                        else
                        {
                            if ((this.LineDetailsField == null))
                            {
                                this.LineDetailsField = XTypedList<LineDetailsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LineDetails", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<LineDetailsLocalType>(this.LineDetailsField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (LineDetails*, LineAmount*)
                /// </para>
                /// </summary>
                public IList<ReconWeeklyImport.StoreLocalType.LineLocalType.LineAmountLocalType> LineAmount
                {
                    get
                    {
                        if ((this.LineAmountField == null))
                        {
                            this.LineAmountField = new XTypedList<LineAmountLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("LineAmount", ""));
                        }
                        return this.LineAmountField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.LineAmountField = null;
                        }
                        else
                        {
                            if ((this.LineAmountField == null))
                            {
                                this.LineAmountField = XTypedList<LineAmountLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LineAmount", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<LineAmountLocalType>(this.LineAmountField, value);
                            }
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string LineType
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("LineType", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("LineType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("Line", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<LineLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LineDetails", ""), typeof(LineDetailsLocalType));
                    localElementDictionary.Add(XName.Get("LineAmount", ""), typeof(LineAmountLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                /// </para>
                /// </summary>
                public partial class LineDetailsLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator LineDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LineDetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static LineDetailsLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("InvNo", "")), new NamedContentModelEntity(XName.Get("CrnNo", "")), new NamedContentModelEntity(XName.Get("GrvNo", "")), new NamedContentModelEntity(XName.Get("ClmNo1", "")), new NamedContentModelEntity(XName.Get("ClmNo2", "")), new NamedContentModelEntity(XName.Get("ClmNo3", "")), new NamedContentModelEntity(XName.Get("ClmNo4", "")), new NamedContentModelEntity(XName.Get("ClmNo5", "")), new NamedContentModelEntity(XName.Get("RefDocNo", "")), new NamedContentModelEntity(XName.Get("DocDate", "")), new NamedContentModelEntity(XName.Get("PayDueDate", "")), new NamedContentModelEntity(XName.Get("RefDocDate", "")), new NamedContentModelEntity(XName.Get("VarianceKey", "")), new NamedContentModelEntity(XName.Get("RejectionReason", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public LineDetailsLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string InvNo
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("InvNo", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("InvNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string CrnNo
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CrnNo", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CrnNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string GrvNo
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("GrvNo", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("GrvNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string ClmNo1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ClmNo1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ClmNo1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string ClmNo2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ClmNo2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ClmNo2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string ClmNo3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ClmNo3", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ClmNo3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string ClmNo4
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ClmNo4", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ClmNo4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string ClmNo5
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ClmNo5", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ClmNo5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string RefDocNo
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("RefDocNo", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("RefDocNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string DocDate
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DocDate", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DocDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string PayDueDate
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PayDueDate", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PayDueDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string RefDocDate
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("RefDocDate", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("RefDocDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string VarianceKey
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VarianceKey", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VarianceKey", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (InvNo?, CrnNo?, GrvNo?, ClmNo1?, ClmNo2?, ClmNo3?, ClmNo4?, ClmNo5?, RefDocNo?, DocDate?, PayDueDate?, RefDocDate?, VarianceKey?, RejectionReason?)
                    /// </para>
                    /// </summary>
                    public string RejectionReason
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("RejectionReason", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("RejectionReason", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string DocType
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("DocType", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("DocType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("LineDetails", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<LineDetailsLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("InvNo", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CrnNo", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("GrvNo", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ClmNo1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ClmNo2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ClmNo3", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ClmNo4", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ClmNo5", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("RefDocNo", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DocDate", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PayDueDate", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("RefDocDate", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VarianceKey", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("RejectionReason", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Amount?)
                /// </para>
                /// </summary>
                public partial class LineAmountLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator LineAmountLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LineAmountLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static LineAmountLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Amount", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Amount?)
                    /// </para>
                    /// </summary>
                    public LineAmountLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (Amount?)
                    /// </para>
                    /// </summary>
                    public string Amount
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Amount", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public string Name
                    {
                        get
                        {
                            XAttribute x = this.Attribute(XName.Get("Name", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("LineAmount", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<LineAmountLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("Amount", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Amount?)
            /// </para>
            /// </summary>
            public partial class LevelTotalLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator LevelTotalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LevelTotalLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static LevelTotalLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Amount", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Amount?)
                /// </para>
                /// </summary>
                public LevelTotalLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Amount?)
                /// </para>
                /// </summary>
                public string Amount
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Amount", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Level
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("Level", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("Level", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string Name
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("Name", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("LevelTotal", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<LevelTotalLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("Amount", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }
    }

    /// <summary>
    /// <para>
    /// Regular expression: (Supplier)*
    /// </para>
    /// </summary>
    public partial class NewDataSet : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReconWeeklyImport> SupplierField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        public static explicit operator NewDataSet(XElement xe) { return XTypedServices.ToXTypedElement<NewDataSet>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static NewDataSet()
        {
            BuildElementDictionary();
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Supplier)*
        /// </para>
        /// </summary>
        public NewDataSet()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Supplier)*
        /// </para>
        /// </summary>
        public IList<ReconWeeklyImport> Supplier
        {
            get
            {
                if ((this.SupplierField == null))
                {
                    this.SupplierField = new XTypedList<ReconWeeklyImport>(this, LinqToXsdTypeManager.Instance, XName.Get("Supplier", ""));
                }
                return this.SupplierField;
            }
            set
            {
                if ((value == null))
                {
                    this.SupplierField = null;
                }
                else
                {
                    if ((this.SupplierField == null))
                    {
                        this.SupplierField = XTypedList<ReconWeeklyImport>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Supplier", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<ReconWeeklyImport>(this.SupplierField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("NewDataSet", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static NewDataSet Load(string xmlFile)
        {
            return XTypedServices.Load<NewDataSet>(xmlFile);
        }

        public static NewDataSet Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<NewDataSet>(xmlFile);
        }

        public static NewDataSet Parse(string xml)
        {
            return XTypedServices.Parse<NewDataSet>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<NewDataSet>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Supplier", ""), typeof(ReconWeeklyImport));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("Supplier", ""), typeof(ReconWeeklyImport));
            elementDictionary.Add(XName.Get("NewDataSet", ""), typeof(NewDataSet));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("Supplier", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public ReconWeeklyImport Supplier { get { return rootObject as ReconWeeklyImport; } }

        public NewDataSet NewDataSet { get { return rootObject as NewDataSet; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(ReconWeeklyImport root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRootNamespace(NewDataSet root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public ReconWeeklyImport Supplier { get { return rootObject as ReconWeeklyImport; } }

        public NewDataSet NewDataSet { get { return rootObject as NewDataSet; } }

        private XRoot()
        {
        }

        public XRoot(ReconWeeklyImport root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XRoot(NewDataSet root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}
