//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;


namespace Spar.Data.XsdModels.RemittanceAdvice.OldDC.Commission
{
    /// <summary>
    /// <para>
    /// Regular expression: (remittanceadvice | taxinvoice)*
    /// </para>
    /// </summary>
    public partial class remittancedocument : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<remittanceadviceLocalType> remittanceadviceField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<taxinvoiceLocalType> taxinvoiceField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        public static explicit operator remittancedocument(XElement xe) { return XTypedServices.ToXTypedElement<remittancedocument>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static remittancedocument()
        {
            BuildElementDictionary();
        }

        /// <summary>
        /// <para>
        /// Regular expression: (remittanceadvice | taxinvoice)*
        /// </para>
        /// </summary>
        public remittancedocument()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (remittanceadvice | taxinvoice)*
        /// </para>
        /// </summary>
        public IList<remittancedocument.remittanceadviceLocalType> remittanceadvice
        {
            get
            {
                if ((this.remittanceadviceField == null))
                {
                    this.remittanceadviceField = new XTypedList<remittanceadviceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("remittanceadvice", ""));
                }
                return this.remittanceadviceField;
            }
            set
            {
                if ((value == null))
                {
                    this.remittanceadviceField = null;
                }
                else
                {
                    if ((this.remittanceadviceField == null))
                    {
                        this.remittanceadviceField = XTypedList<remittanceadviceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("remittanceadvice", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<remittanceadviceLocalType>(this.remittanceadviceField, value);
                    }
                }
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (remittanceadvice | taxinvoice)*
        /// </para>
        /// </summary>
        public IList<remittancedocument.taxinvoiceLocalType> taxinvoice
        {
            get
            {
                if ((this.taxinvoiceField == null))
                {
                    this.taxinvoiceField = new XTypedList<taxinvoiceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("taxinvoice", ""));
                }
                return this.taxinvoiceField;
            }
            set
            {
                if ((value == null))
                {
                    this.taxinvoiceField = null;
                }
                else
                {
                    if ((this.taxinvoiceField == null))
                    {
                        this.taxinvoiceField = XTypedList<taxinvoiceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("taxinvoice", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<taxinvoiceLocalType>(this.taxinvoiceField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("remittancedocument", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static remittancedocument Load(string xmlFile)
        {
            return XTypedServices.Load<remittancedocument>(xmlFile);
        }

        public static remittancedocument Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<remittancedocument>(xmlFile);
        }

        public static remittancedocument Parse(string xml)
        {
            return XTypedServices.Parse<remittancedocument>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<remittancedocument>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("remittanceadvice", ""), typeof(remittanceadviceLocalType));
            localElementDictionary.Add(XName.Get("taxinvoice", ""), typeof(taxinvoiceLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (ratype?, raheader*, radetails*, totalforpayment*, othertotal*)
        /// </para>
        /// </summary>
        public partial class remittanceadviceLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<raheaderLocalType> raheaderField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<radetailsLocalType> radetailsField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<totalforpaymentLocalType> totalforpaymentField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<othertotalLocalType> othertotalField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator remittanceadviceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<remittanceadviceLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static remittanceadviceLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ratype", "")), new NamedContentModelEntity(XName.Get("raheader", "")), new NamedContentModelEntity(XName.Get("radetails", "")), new NamedContentModelEntity(XName.Get("totalforpayment", "")), new NamedContentModelEntity(XName.Get("othertotal", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ratype?, raheader*, radetails*, totalforpayment*, othertotal*)
            /// </para>
            /// </summary>
            public remittanceadviceLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ratype?, raheader*, radetails*, totalforpayment*, othertotal*)
            /// </para>
            /// </summary>
            public string ratype
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ratype", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("ratype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ratype?, raheader*, radetails*, totalforpayment*, othertotal*)
            /// </para>
            /// </summary>
            public IList<remittancedocument.remittanceadviceLocalType.raheaderLocalType> raheader
            {
                get
                {
                    if ((this.raheaderField == null))
                    {
                        this.raheaderField = new XTypedList<raheaderLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("raheader", ""));
                    }
                    return this.raheaderField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.raheaderField = null;
                    }
                    else
                    {
                        if ((this.raheaderField == null))
                        {
                            this.raheaderField = XTypedList<raheaderLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("raheader", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<raheaderLocalType>(this.raheaderField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ratype?, raheader*, radetails*, totalforpayment*, othertotal*)
            /// </para>
            /// </summary>
            public IList<remittancedocument.remittanceadviceLocalType.radetailsLocalType> radetails
            {
                get
                {
                    if ((this.radetailsField == null))
                    {
                        this.radetailsField = new XTypedList<radetailsLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("radetails", ""));
                    }
                    return this.radetailsField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.radetailsField = null;
                    }
                    else
                    {
                        if ((this.radetailsField == null))
                        {
                            this.radetailsField = XTypedList<radetailsLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("radetails", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<radetailsLocalType>(this.radetailsField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ratype?, raheader*, radetails*, totalforpayment*, othertotal*)
            /// </para>
            /// </summary>
            public IList<remittancedocument.remittanceadviceLocalType.totalforpaymentLocalType> totalforpayment
            {
                get
                {
                    if ((this.totalforpaymentField == null))
                    {
                        this.totalforpaymentField = new XTypedList<totalforpaymentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("totalforpayment", ""));
                    }
                    return this.totalforpaymentField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.totalforpaymentField = null;
                    }
                    else
                    {
                        if ((this.totalforpaymentField == null))
                        {
                            this.totalforpaymentField = XTypedList<totalforpaymentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("totalforpayment", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<totalforpaymentLocalType>(this.totalforpaymentField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ratype?, raheader*, radetails*, totalforpayment*, othertotal*)
            /// </para>
            /// </summary>
            public IList<remittancedocument.remittanceadviceLocalType.othertotalLocalType> othertotal
            {
                get
                {
                    if ((this.othertotalField == null))
                    {
                        this.othertotalField = new XTypedList<othertotalLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("othertotal", ""));
                    }
                    return this.othertotalField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.othertotalField = null;
                    }
                    else
                    {
                        if ((this.othertotalField == null))
                        {
                            this.othertotalField = XTypedList<othertotalLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("othertotal", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<othertotalLocalType>(this.othertotalField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("remittanceadvice", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<remittanceadviceLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("ratype", ""), typeof(string));
                localElementDictionary.Add(XName.Get("raheader", ""), typeof(raheaderLocalType));
                localElementDictionary.Add(XName.Get("radetails", ""), typeof(radetailsLocalType));
                localElementDictionary.Add(XName.Get("totalforpayment", ""), typeof(totalforpaymentLocalType));
                localElementDictionary.Add(XName.Get("othertotal", ""), typeof(othertotalLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
            /// </para>
            /// </summary>
            public partial class raheaderLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator raheaderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<raheaderLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static raheaderLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("dceancode", "")), new NamedContentModelEntity(XName.Get("dcname", "")), new NamedContentModelEntity(XName.Get("dcpostaladdress1", "")), new NamedContentModelEntity(XName.Get("dcpostaladdress2", "")), new NamedContentModelEntity(XName.Get("dcpostalcode", "")), new NamedContentModelEntity(XName.Get("suppliereanlocationcode", "")), new NamedContentModelEntity(XName.Get("dcvatregno", "")), new NamedContentModelEntity(XName.Get("suppliereandispatchpoint", "")), new NamedContentModelEntity(XName.Get("suppliernumber", "")), new NamedContentModelEntity(XName.Get("suppliername", "")), new NamedContentModelEntity(XName.Get("supplieraddress1", "")), new NamedContentModelEntity(XName.Get("supplieraddress2", "")), new NamedContentModelEntity(XName.Get("supplieraddress3", "")), new NamedContentModelEntity(XName.Get("supplierpostalcode", "")), new NamedContentModelEntity(XName.Get("suppliervatregno", "")), new NamedContentModelEntity(XName.Get("paymentnumber", "")), new NamedContentModelEntity(XName.Get("extracteddate", "")), new NamedContentModelEntity(XName.Get("radate", "")), new NamedContentModelEntity(XName.Get("termscode", "")), new NamedContentModelEntity(XName.Get("ttermsdays", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public raheaderLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string dceancode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("dceancode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("dceancode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string dcname
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("dcname", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("dcname", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string dcpostaladdress1
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("dcpostaladdress1", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("dcpostaladdress1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string dcpostaladdress2
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("dcpostaladdress2", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("dcpostaladdress2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string dcpostalcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("dcpostalcode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("dcpostalcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string suppliereanlocationcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("suppliereanlocationcode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("suppliereanlocationcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string dcvatregno
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("dcvatregno", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("dcvatregno", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string suppliereandispatchpoint
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("suppliereandispatchpoint", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("suppliereandispatchpoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string suppliernumber
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("suppliernumber", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("suppliernumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string suppliername
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("suppliername", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("suppliername", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string supplieraddress1
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("supplieraddress1", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("supplieraddress1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string supplieraddress2
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("supplieraddress2", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("supplieraddress2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string supplieraddress3
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("supplieraddress3", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("supplieraddress3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string supplierpostalcode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("supplierpostalcode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("supplierpostalcode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string suppliervatregno
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("suppliervatregno", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("suppliervatregno", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string paymentnumber
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("paymentnumber", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("paymentnumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string extracteddate
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("extracteddate", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("extracteddate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string radate
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("radate", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("radate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string termscode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("termscode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("termscode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (dceancode?, dcname?, dcpostaladdress1?, dcpostaladdress2?, dcpostalcode?, suppliereanlocationcode?, dcvatregno?, suppliereandispatchpoint?, suppliernumber?, suppliername?, supplieraddress1?, supplieraddress2?, supplieraddress3?, supplierpostalcode?, suppliervatregno?, paymentnumber?, extracteddate?, radate?, termscode?, ttermsdays?)
                /// </para>
                /// </summary>
                public string ttermsdays
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ttermsdays", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("ttermsdays", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("raheader", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<raheaderLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("dceancode", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("dcname", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("dcpostaladdress1", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("dcpostaladdress2", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("dcpostalcode", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("suppliereanlocationcode", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("dcvatregno", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("suppliereandispatchpoint", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("suppliernumber", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("suppliername", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("supplieraddress1", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("supplieraddress2", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("supplieraddress3", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("supplierpostalcode", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("suppliervatregno", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("paymentnumber", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("extracteddate", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("radate", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("termscode", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("ttermsdays", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
            /// </para>
            /// </summary>
            public partial class radetailsLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator radetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<radetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static radetailsLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("docdate", "")), new NamedContentModelEntity(XName.Get("doctype", "")), new NamedContentModelEntity(XName.Get("supplierdocno", "")), new NamedContentModelEntity(XName.Get("storecode", "")), new NamedContentModelEntity(XName.Get("storename", "")), new NamedContentModelEntity(XName.Get("storeeancode", "")), new NamedContentModelEntity(XName.Get("documentamountexcl", "")), new NamedContentModelEntity(XName.Get("documentamountincl", "")), new NamedContentModelEntity(XName.Get("discountamountexcl", "")), new NamedContentModelEntity(XName.Get("discountamountincl", "")), new NamedContentModelEntity(XName.Get("vatamountpayable", "")), new NamedContentModelEntity(XName.Get("netamountincl", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public radetailsLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string docdate
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("docdate", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("docdate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string doctype
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("doctype", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("doctype", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string supplierdocno
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("supplierdocno", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("supplierdocno", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string storecode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("storecode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("storecode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string storename
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("storename", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("storename", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string storeeancode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("storeeancode", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("storeeancode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string documentamountexcl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("documentamountexcl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("documentamountexcl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string documentamountincl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("documentamountincl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("documentamountincl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string discountamountexcl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("discountamountexcl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("discountamountexcl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string discountamountincl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("discountamountincl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("discountamountincl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string vatamountpayable
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("vatamountpayable", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("vatamountpayable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (docdate?, doctype?, supplierdocno?, storecode?, storename?, storeeancode?, documentamountexcl?, documentamountincl?, discountamountexcl?, discountamountincl?, vatamountpayable?, netamountincl?)
                /// </para>
                /// </summary>
                public string netamountincl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("netamountincl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("netamountincl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("radetails", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<radetailsLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("docdate", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("doctype", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("supplierdocno", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("storecode", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("storename", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("storeeancode", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("documentamountexcl", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("documentamountincl", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("discountamountexcl", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("discountamountincl", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("vatamountpayable", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("netamountincl", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (totaldescription?, totaldiscountamountexcl?, totaldiscountamountincl?, totaldocumentamountexcl?, totaldocumentamountincl?, totalvatamountpayable?, totalnetamountincl?)
            /// </para>
            /// </summary>
            public partial class totalforpaymentLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator totalforpaymentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<totalforpaymentLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static totalforpaymentLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("totaldescription", "")), new NamedContentModelEntity(XName.Get("totaldiscountamountexcl", "")), new NamedContentModelEntity(XName.Get("totaldiscountamountincl", "")), new NamedContentModelEntity(XName.Get("totaldocumentamountexcl", "")), new NamedContentModelEntity(XName.Get("totaldocumentamountincl", "")), new NamedContentModelEntity(XName.Get("totalvatamountpayable", "")), new NamedContentModelEntity(XName.Get("totalnetamountincl", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (totaldescription?, totaldiscountamountexcl?, totaldiscountamountincl?, totaldocumentamountexcl?, totaldocumentamountincl?, totalvatamountpayable?, totalnetamountincl?)
                /// </para>
                /// </summary>
                public totalforpaymentLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (totaldescription?, totaldiscountamountexcl?, totaldiscountamountincl?, totaldocumentamountexcl?, totaldocumentamountincl?, totalvatamountpayable?, totalnetamountincl?)
                /// </para>
                /// </summary>
                public string totaldescription
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("totaldescription", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("totaldescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (totaldescription?, totaldiscountamountexcl?, totaldiscountamountincl?, totaldocumentamountexcl?, totaldocumentamountincl?, totalvatamountpayable?, totalnetamountincl?)
                /// </para>
                /// </summary>
                public string totaldiscountamountexcl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("totaldiscountamountexcl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("totaldiscountamountexcl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (totaldescription?, totaldiscountamountexcl?, totaldiscountamountincl?, totaldocumentamountexcl?, totaldocumentamountincl?, totalvatamountpayable?, totalnetamountincl?)
                /// </para>
                /// </summary>
                public string totaldiscountamountincl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("totaldiscountamountincl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("totaldiscountamountincl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (totaldescription?, totaldiscountamountexcl?, totaldiscountamountincl?, totaldocumentamountexcl?, totaldocumentamountincl?, totalvatamountpayable?, totalnetamountincl?)
                /// </para>
                /// </summary>
                public string totaldocumentamountexcl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("totaldocumentamountexcl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("totaldocumentamountexcl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (totaldescription?, totaldiscountamountexcl?, totaldiscountamountincl?, totaldocumentamountexcl?, totaldocumentamountincl?, totalvatamountpayable?, totalnetamountincl?)
                /// </para>
                /// </summary>
                public string totaldocumentamountincl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("totaldocumentamountincl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("totaldocumentamountincl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (totaldescription?, totaldiscountamountexcl?, totaldiscountamountincl?, totaldocumentamountexcl?, totaldocumentamountincl?, totalvatamountpayable?, totalnetamountincl?)
                /// </para>
                /// </summary>
                public string totalvatamountpayable
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("totalvatamountpayable", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("totalvatamountpayable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (totaldescription?, totaldiscountamountexcl?, totaldiscountamountincl?, totaldocumentamountexcl?, totaldocumentamountincl?, totalvatamountpayable?, totalnetamountincl?)
                /// </para>
                /// </summary>
                public string totalnetamountincl
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("totalnetamountincl", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("totalnetamountincl", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("totalforpayment", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<totalforpaymentLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("totaldescription", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("totaldiscountamountexcl", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("totaldiscountamountincl", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("totaldocumentamountexcl", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("totaldocumentamountincl", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("totalvatamountpayable", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("totalnetamountincl", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (totaldescription?, amount?)
            /// </para>
            /// </summary>
            public partial class othertotalLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator othertotalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<othertotalLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static othertotalLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("totaldescription", "")), new NamedContentModelEntity(XName.Get("amount", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (totaldescription?, amount?)
                /// </para>
                /// </summary>
                public othertotalLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (totaldescription?, amount?)
                /// </para>
                /// </summary>
                public string totaldescription
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("totaldescription", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("totaldescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (totaldescription?, amount?)
                /// </para>
                /// </summary>
                public string amount
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("amount", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("othertotal", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<othertotalLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("totaldescription", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("amount", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (invoicenumber?, totalcommissiondeducteddesc?, totalcommissiondeducted?, totalvatoncommissiondesc?, totalvatoncommission?, totalinclcommdeductedradesc?, totalinclcommdeductedra?)
        /// </para>
        /// </summary>
        public partial class taxinvoiceLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator taxinvoiceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<taxinvoiceLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static taxinvoiceLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("invoicenumber", "")), new NamedContentModelEntity(XName.Get("totalcommissiondeducteddesc", "")), new NamedContentModelEntity(XName.Get("totalcommissiondeducted", "")), new NamedContentModelEntity(XName.Get("totalvatoncommissiondesc", "")), new NamedContentModelEntity(XName.Get("totalvatoncommission", "")), new NamedContentModelEntity(XName.Get("totalinclcommdeductedradesc", "")), new NamedContentModelEntity(XName.Get("totalinclcommdeductedra", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (invoicenumber?, totalcommissiondeducteddesc?, totalcommissiondeducted?, totalvatoncommissiondesc?, totalvatoncommission?, totalinclcommdeductedradesc?, totalinclcommdeductedra?)
            /// </para>
            /// </summary>
            public taxinvoiceLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (invoicenumber?, totalcommissiondeducteddesc?, totalcommissiondeducted?, totalvatoncommissiondesc?, totalvatoncommission?, totalinclcommdeductedradesc?, totalinclcommdeductedra?)
            /// </para>
            /// </summary>
            public string invoicenumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("invoicenumber", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("invoicenumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (invoicenumber?, totalcommissiondeducteddesc?, totalcommissiondeducted?, totalvatoncommissiondesc?, totalvatoncommission?, totalinclcommdeductedradesc?, totalinclcommdeductedra?)
            /// </para>
            /// </summary>
            public string totalcommissiondeducteddesc
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("totalcommissiondeducteddesc", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("totalcommissiondeducteddesc", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (invoicenumber?, totalcommissiondeducteddesc?, totalcommissiondeducted?, totalvatoncommissiondesc?, totalvatoncommission?, totalinclcommdeductedradesc?, totalinclcommdeductedra?)
            /// </para>
            /// </summary>
            public string totalcommissiondeducted
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("totalcommissiondeducted", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("totalcommissiondeducted", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (invoicenumber?, totalcommissiondeducteddesc?, totalcommissiondeducted?, totalvatoncommissiondesc?, totalvatoncommission?, totalinclcommdeductedradesc?, totalinclcommdeductedra?)
            /// </para>
            /// </summary>
            public string totalvatoncommissiondesc
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("totalvatoncommissiondesc", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("totalvatoncommissiondesc", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (invoicenumber?, totalcommissiondeducteddesc?, totalcommissiondeducted?, totalvatoncommissiondesc?, totalvatoncommission?, totalinclcommdeductedradesc?, totalinclcommdeductedra?)
            /// </para>
            /// </summary>
            public string totalvatoncommission
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("totalvatoncommission", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("totalvatoncommission", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (invoicenumber?, totalcommissiondeducteddesc?, totalcommissiondeducted?, totalvatoncommissiondesc?, totalvatoncommission?, totalinclcommdeductedradesc?, totalinclcommdeductedra?)
            /// </para>
            /// </summary>
            public string totalinclcommdeductedradesc
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("totalinclcommdeductedradesc", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("totalinclcommdeductedradesc", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (invoicenumber?, totalcommissiondeducteddesc?, totalcommissiondeducted?, totalvatoncommissiondesc?, totalvatoncommission?, totalinclcommdeductedradesc?, totalinclcommdeductedra?)
            /// </para>
            /// </summary>
            public string totalinclcommdeductedra
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("totalinclcommdeductedra", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("totalinclcommdeductedra", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("taxinvoice", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<taxinvoiceLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("invoicenumber", ""), typeof(string));
                localElementDictionary.Add(XName.Get("totalcommissiondeducteddesc", ""), typeof(string));
                localElementDictionary.Add(XName.Get("totalcommissiondeducted", ""), typeof(string));
                localElementDictionary.Add(XName.Get("totalvatoncommissiondesc", ""), typeof(string));
                localElementDictionary.Add(XName.Get("totalvatoncommission", ""), typeof(string));
                localElementDictionary.Add(XName.Get("totalinclcommdeductedradesc", ""), typeof(string));
                localElementDictionary.Add(XName.Get("totalinclcommdeductedra", ""), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("remittancedocument", ""), typeof(global::Spar.Data.XsdModels.RemittanceAdvice.OldDC.Commission.remittancedocument));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("remittancedocument", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public remittancedocument remittancedocument { get { return rootObject as remittancedocument; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(remittancedocument root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public remittancedocument remittancedocument { get { return rootObject as remittancedocument; } }

        private XRoot()
        {
        }

        public XRoot(remittancedocument root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}