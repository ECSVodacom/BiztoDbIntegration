//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace Spar.Data.XsdModels.Vendors
{
    /// <summary>
    /// <para>
    /// Regular expression: (SPARVendor)*
    /// </para>
    /// </summary>
    public partial class SPARVendors : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SPARVendorLocalType> SPARVendorField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        public static explicit operator SPARVendors(XElement xe) { return XTypedServices.ToXTypedElement<SPARVendors>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static SPARVendors()
        {
            BuildElementDictionary();
        }

        /// <summary>
        /// <para>
        /// Regular expression: (SPARVendor)*
        /// </para>
        /// </summary>
        public SPARVendors()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (SPARVendor)*
        /// </para>
        /// </summary>
        public IList<SPARVendors.SPARVendorLocalType> SPARVendor
        {
            get
            {
                if ((this.SPARVendorField == null))
                {
                    this.SPARVendorField = new XTypedList<SPARVendorLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("SPARVendor", ""));
                }
                return this.SPARVendorField;
            }
            set
            {
                if ((value == null))
                {
                    this.SPARVendorField = null;
                }
                else
                {
                    if ((this.SPARVendorField == null))
                    {
                        this.SPARVendorField = XTypedList<SPARVendorLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("SPARVendor", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<SPARVendorLocalType>(this.SPARVendorField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("SPARVendors", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static SPARVendors Load(string xmlFile)
        {
            return XTypedServices.Load<SPARVendors>(xmlFile);
        }

        public static SPARVendors Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<SPARVendors>(xmlFile);
        }

        public static SPARVendors Parse(string xml)
        {
            return XTypedServices.Parse<SPARVendors>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<SPARVendors>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("SPARVendor", ""), typeof(SPARVendorLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return ContentModelEntity.Default;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
        /// </para>
        /// </summary>
        public partial class SPARVendorLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator SPARVendorLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SPARVendorLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static SPARVendorLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("BuEanCode", "")), new NamedContentModelEntity(XName.Get("VendorCode", "")), new NamedContentModelEntity(XName.Get("VendorStatus", "")), new NamedContentModelEntity(XName.Get("VendorName", "")), new NamedContentModelEntity(XName.Get("Address1", "")), new NamedContentModelEntity(XName.Get("Address2", "")), new NamedContentModelEntity(XName.Get("Address3", "")), new NamedContentModelEntity(XName.Get("PostalCode", "")), new NamedContentModelEntity(XName.Get("PhoneNumber", "")), new NamedContentModelEntity(XName.Get("CountryCode", "")), new NamedContentModelEntity(XName.Get("LocationCode", "")), new NamedContentModelEntity(XName.Get("DespatchPoint", "")), new NamedContentModelEntity(XName.Get("EmailAddress", "")), new NamedContentModelEntity(XName.Get("SupplierVatNumber", "")), new NamedContentModelEntity(XName.Get("CaptureClaim", "")), new NamedContentModelEntity(XName.Get("VendorAccType", "")), new NamedContentModelEntity(XName.Get("StoreOrderMethod", "")), new NamedContentModelEntity(XName.Get("EDIGroupCode", "")), new NamedContentModelEntity(XName.Get("EDIGroupEan", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public SPARVendorLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string BuEanCode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("BuEanCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("BuEanCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string VendorCode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("VendorCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("VendorCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string VendorStatus
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("VendorStatus", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("VendorStatus", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string VendorName
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("VendorName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("VendorName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string Address1
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Address1", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Address1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string Address2
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Address2", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Address2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string Address3
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Address3", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("Address3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string PostalCode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("PostalCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("PostalCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string PhoneNumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("PhoneNumber", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("PhoneNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string CountryCode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CountryCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("CountryCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string LocationCode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("LocationCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("LocationCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string DespatchPoint
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("DespatchPoint", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("DespatchPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string EmailAddress
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("EmailAddress", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("EmailAddress", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string SupplierVatNumber
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("SupplierVatNumber", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("SupplierVatNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string CaptureClaim
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CaptureClaim", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("CaptureClaim", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string VendorAccType
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("VendorAccType", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("VendorAccType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string StoreOrderMethod
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("StoreOrderMethod", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("StoreOrderMethod", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string EDIGroupCode
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("EDIGroupCode", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("EDIGroupCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (BuEanCode?, VendorCode?, VendorStatus?, VendorName?, Address1?, Address2?, Address3?, PostalCode?, PhoneNumber?, CountryCode?, LocationCode?, DespatchPoint?, EmailAddress?, SupplierVatNumber?, CaptureClaim?, VendorAccType?, StoreOrderMethod?, EDIGroupCode?, EDIGroupEan?)
            /// </para>
            /// </summary>
            public string EDIGroupEan
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("EDIGroupEan", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("EDIGroupEan", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("SPARVendor", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<SPARVendorLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("BuEanCode", ""), typeof(string));
                localElementDictionary.Add(XName.Get("VendorCode", ""), typeof(string));
                localElementDictionary.Add(XName.Get("VendorStatus", ""), typeof(string));
                localElementDictionary.Add(XName.Get("VendorName", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Address1", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Address2", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Address3", ""), typeof(string));
                localElementDictionary.Add(XName.Get("PostalCode", ""), typeof(string));
                localElementDictionary.Add(XName.Get("PhoneNumber", ""), typeof(string));
                localElementDictionary.Add(XName.Get("CountryCode", ""), typeof(string));
                localElementDictionary.Add(XName.Get("LocationCode", ""), typeof(string));
                localElementDictionary.Add(XName.Get("DespatchPoint", ""), typeof(string));
                localElementDictionary.Add(XName.Get("EmailAddress", ""), typeof(string));
                localElementDictionary.Add(XName.Get("SupplierVatNumber", ""), typeof(string));
                localElementDictionary.Add(XName.Get("CaptureClaim", ""), typeof(string));
                localElementDictionary.Add(XName.Get("VendorAccType", ""), typeof(string));
                localElementDictionary.Add(XName.Get("StoreOrderMethod", ""), typeof(string));
                localElementDictionary.Add(XName.Get("EDIGroupCode", ""), typeof(string));
                localElementDictionary.Add(XName.Get("EDIGroupEan", ""), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("SPARVendors", ""), typeof(SPARVendors));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("SPARVendors", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public SPARVendors SPARVendors { get { return rootObject as SPARVendors; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(SPARVendors root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public SPARVendors SPARVendors { get { return rootObject as SPARVendors; } }

        private XRoot()
        {
        }

        public XRoot(SPARVendors root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}