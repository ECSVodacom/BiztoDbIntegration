//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;


namespace Spar.Data.XsdModels.Orders.DropShip
{
    /// <summary>
    /// <para>
    /// Regular expression: (UNH)
    /// </para>
    /// </summary>
    public partial class UNB : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator UNB(XElement xe) { return XTypedServices.ToXTypedElement<UNB>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static UNB()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("UNH", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (UNH)
        /// </para>
        /// </summary>
        public UNB()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UNH)
        /// </para>
        /// </summary>
        public UNHLocalType UNH
        {
            get
            {
                XElement x = this.GetElement(XName.Get("UNH", ""));
                return ((UNHLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("UNH", ""), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("UNB", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static UNB Load(string xmlFile)
        {
            return XTypedServices.Load<UNB>(xmlFile);
        }

        public static UNB Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<UNB>(xmlFile);
        }

        public static UNB Parse(string xml)
        {
            return XTypedServices.Parse<UNB>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<UNB>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("UNH", ""), typeof(UNHLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
        /// </para>
        /// </summary>
        public partial class UNHLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<NARLocalType> NARField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OLDLocalType> OLDField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PRALocalType> PRAField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator UNHLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UNHLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static UNHLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("recievedate", "")), new NamedContentModelEntity(XName.Get("translatedate", "")), new NamedContentModelEntity(XName.Get("mailboxdate", "")), new NamedContentModelEntity(XName.Get("extractdate", "")), new NamedContentModelEntity(XName.Get("confirmdate", "")), new NamedContentModelEntity(XName.Get("SOP", "")), new NamedContentModelEntity(XName.Get("CLO", "")), new NamedContentModelEntity(XName.Get("ORD", "")), new NamedContentModelEntity(XName.Get("NAR", "")), new NamedContentModelEntity(XName.Get("DIN", "")), new NamedContentModelEntity(XName.Get("OLD", "")), new NamedContentModelEntity(XName.Get("PRA", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public UNHLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public string recievedate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("recievedate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("recievedate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public string translatedate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("translatedate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("translatedate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public string mailboxdate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("mailboxdate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("mailboxdate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public string extractdate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("extractdate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("extractdate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public string confirmdate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("confirmdate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("confirmdate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public SOPLocalType SOP
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("SOP", ""));
                    return ((SOPLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("SOP", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public CLOLocalType CLO
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CLO", ""));
                    return ((CLOLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("CLO", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public ORDLocalType ORD
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ORD", ""));
                    return ((ORDLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("ORD", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public IList<UNB.UNHLocalType.NARLocalType> NAR
            {
                get
                {
                    if ((this.NARField == null))
                    {
                        this.NARField = new XTypedList<NARLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("NAR", ""));
                    }
                    return this.NARField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.NARField = null;
                    }
                    else
                    {
                        if ((this.NARField == null))
                        {
                            this.NARField = XTypedList<NARLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("NAR", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<NARLocalType>(this.NARField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public DINLocalType DIN
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("DIN", ""));
                    return ((DINLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("DIN", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public IList<UNB.UNHLocalType.OLDLocalType> OLD
            {
                get
                {
                    if ((this.OLDField == null))
                    {
                        this.OLDField = new XTypedList<OLDLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("OLD", ""));
                    }
                    return this.OLDField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.OLDField = null;
                    }
                    else
                    {
                        if ((this.OLDField == null))
                        {
                            this.OLDField = XTypedList<OLDLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("OLD", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<OLDLocalType>(this.OLDField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SOP, CLO, ORD, NAR*, DIN, OLD*, PRA*)
            /// </para>
            /// </summary>
            public IList<UNB.UNHLocalType.PRALocalType> PRA
            {
                get
                {
                    if ((this.PRAField == null))
                    {
                        this.PRAField = new XTypedList<PRALocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("PRA", ""));
                    }
                    return this.PRAField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.PRAField = null;
                    }
                    else
                    {
                        if ((this.PRAField == null))
                        {
                            this.PRAField = XTypedList<PRALocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("PRA", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<PRALocalType>(this.PRAField, value);
                        }
                    }
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("UNH", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<UNHLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("recievedate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("translatedate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("mailboxdate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("extractdate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("confirmdate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("SOP", ""), typeof(SOPLocalType));
                localElementDictionary.Add(XName.Get("CLO", ""), typeof(CLOLocalType));
                localElementDictionary.Add(XName.Get("ORD", ""), typeof(ORDLocalType));
                localElementDictionary.Add(XName.Get("NAR", ""), typeof(NARLocalType));
                localElementDictionary.Add(XName.Get("DIN", ""), typeof(DINLocalType));
                localElementDictionary.Add(XName.Get("OLD", ""), typeof(OLDLocalType));
                localElementDictionary.Add(XName.Get("PRA", ""), typeof(PRALocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (SOPT)
            /// </para>
            /// </summary>
            public partial class SOPLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator SOPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SOPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static SOPLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SOPT", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (SOPT)
                /// </para>
                /// </summary>
                public SOPLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (SOPT)
                /// </para>
                /// </summary>
                public string SOPT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("SOPT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("SOPT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("SOP", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<SOPLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("SOPT", ""), typeof(long));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
            /// </para>
            /// </summary>
            public partial class CLOLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator CLOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CLOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static CLOLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CDPT", "")), new NamedContentModelEntity(XName.Get("COPT", "")), new NamedContentModelEntity(XName.Get("CDPN", "")), new NamedContentModelEntity(XName.Get("CDPA", "")), new NamedContentModelEntity(XName.Get("ALIP", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public CLOLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public string CDPT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDPT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDPT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public string COPT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("COPT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("COPT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public string CDPN
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDPN", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDPN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public CDPALocalType CDPA
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDPA", ""));
                        return ((CDPALocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDPA", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public string ALIP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ALIP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("ALIP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("CLO", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<CLOLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("CDPT", ""), typeof(long));
                    localElementDictionary.Add(XName.Get("COPT", ""), typeof(sbyte));
                    localElementDictionary.Add(XName.Get("CDPN", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CDPA", ""), typeof(CDPALocalType));
                    localElementDictionary.Add(XName.Get("ALIP", ""), typeof(long));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ALIN*)
                /// </para>
                /// </summary>
                public partial class CDPALocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> ALINField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CDPALocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDPALocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CDPALocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ALIN", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ALIN*)
                    /// </para>
                    /// </summary>
                    public CDPALocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ALIN*)
                    /// </para>
                    /// </summary>
                    public IList<string> ALIN
                    {
                        get
                        {
                            if ((this.ALINField == null))
                            {
                                this.ALINField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ALIN", ""));
                            }
                            return this.ALINField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.ALINField = null;
                            }
                            else
                            {
                                if ((this.ALINField == null))
                                {
                                    this.ALINField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ALIN", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.ALINField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CDPA", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CDPALocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ALIN", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ORNO, TRCE, CDNO, ORIG, DATE, DTER)
            /// </para>
            /// </summary>
            public partial class ORDLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator ORDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ORDLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static ORDLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ORNO", "")), new NamedContentModelEntity(XName.Get("TRCE", "")), new NamedContentModelEntity(XName.Get("CDNO", "")), new NamedContentModelEntity(XName.Get("ORIG", "")), new NamedContentModelEntity(XName.Get("DATE", "")), new NamedContentModelEntity(XName.Get("DTER", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ORNO, TRCE, CDNO, ORIG, DATE, DTER)
                /// </para>
                /// </summary>
                public ORDLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ORNO, TRCE, CDNO, ORIG, DATE, DTER)
                /// </para>
                /// </summary>
                public ORNOLocalType ORNO
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ORNO", ""));
                        return ((ORNOLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ORNO", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ORNO, TRCE, CDNO, ORIG, DATE, DTER)
                /// </para>
                /// </summary>
                public TRCELocalType TRCE
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TRCE", ""));
                        return ((TRCELocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("TRCE", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ORNO, TRCE, CDNO, ORIG, DATE, DTER)
                /// </para>
                /// </summary>
                public CDNOLocalType CDNO
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDNO", ""));
                        return ((CDNOLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDNO", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ORNO, TRCE, CDNO, ORIG, DATE, DTER)
                /// </para>
                /// </summary>
                public ORIGLocalType ORIG
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ORIG", ""));
                        return ((ORIGLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ORIG", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ORNO, TRCE, CDNO, ORIG, DATE, DTER)
                /// </para>
                /// </summary>
                public string DATE
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("DATE", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("DATE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ORNO, TRCE, CDNO, ORIG, DATE, DTER)
                /// </para>
                /// </summary>
                public string DTER
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("DTER", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("DTER", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("ORD", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<ORDLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ORNO", ""), typeof(ORNOLocalType));
                    localElementDictionary.Add(XName.Get("TRCE", ""), typeof(TRCELocalType));
                    localElementDictionary.Add(XName.Get("CDNO", ""), typeof(CDNOLocalType));
                    localElementDictionary.Add(XName.Get("ORIG", ""), typeof(ORIGLocalType));
                    localElementDictionary.Add(XName.Get("DATE", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("DTER", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ORNU*, DATE)
                /// </para>
                /// </summary>
                public partial class ORNOLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> ORNUField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ORNOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ORNOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ORNOLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ORNU", "")), new NamedContentModelEntity(XName.Get("DATE", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ORNU*, DATE)
                    /// </para>
                    /// </summary>
                    public ORNOLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (ORNU*, DATE)
                    /// </para>
                    /// </summary>
                    public IList<string> ORNU
                    {
                        get
                        {
                            if ((this.ORNUField == null))
                            {
                                this.ORNUField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ORNU", ""));
                            }
                            return this.ORNUField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.ORNUField = null;
                            }
                            else
                            {
                                if ((this.ORNUField == null))
                                {
                                    this.ORNUField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ORNU", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.ORNUField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ORNU*, DATE)
                    /// </para>
                    /// </summary>
                    public String DATE
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DATE", ""));
                            return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DATE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ORNO", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ORNOLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ORNU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DATE", ""), typeof(int));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (TRCD, ORNU*)
                /// </para>
                /// </summary>
                public partial class TRCELocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> ORNUField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator TRCELocalType(XElement xe) { return XTypedServices.ToXTypedElement<TRCELocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static TRCELocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TRCD", "")), new NamedContentModelEntity(XName.Get("ORNU", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (TRCD, ORNU*)
                    /// </para>
                    /// </summary>
                    public TRCELocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (TRCD, ORNU*)
                    /// </para>
                    /// </summary>
                    public string TRCD
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("TRCD", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("TRCD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (TRCD, ORNU*)
                    /// </para>
                    /// </summary>
                    public IList<string> ORNU
                    {
                        get
                        {
                            if ((this.ORNUField == null))
                            {
                                this.ORNUField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("ORNU", ""));
                            }
                            return this.ORNUField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.ORNUField = null;
                            }
                            else
                            {
                                if ((this.ORNUField == null))
                                {
                                    this.ORNUField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("ORNU", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.ORNUField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("TRCE", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<TRCELocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("TRCD", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ORNU", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                /// </para>
                /// </summary>
                public partial class CDNOLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> CNDNField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> SDIRField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> CNTPField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> WHNGField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> SREPField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> CREPField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    public static explicit operator CDNOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDNOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CDNOLocalType()
                    {
                        BuildElementDictionary();
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public CDNOLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> CNDN
                    {
                        get
                        {
                            if ((this.CNDNField == null))
                            {
                                this.CNDNField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CNDN", ""));
                            }
                            return this.CNDNField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.CNDNField = null;
                            }
                            else
                            {
                                if ((this.CNDNField == null))
                                {
                                    this.CNDNField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CNDN", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.CNDNField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> SDIR
                    {
                        get
                        {
                            if ((this.SDIRField == null))
                            {
                                this.SDIRField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("SDIR", ""));
                            }
                            return this.SDIRField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.SDIRField = null;
                            }
                            else
                            {
                                if ((this.SDIRField == null))
                                {
                                    this.SDIRField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("SDIR", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.SDIRField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> CNTP
                    {
                        get
                        {
                            if ((this.CNTPField == null))
                            {
                                this.CNTPField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CNTP", ""));
                            }
                            return this.CNTPField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.CNTPField = null;
                            }
                            else
                            {
                                if ((this.CNTPField == null))
                                {
                                    this.CNTPField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CNTP", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.CNTPField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> WHNG
                    {
                        get
                        {
                            if ((this.WHNGField == null))
                            {
                                this.WHNGField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("WHNG", ""));
                            }
                            return this.WHNGField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.WHNGField = null;
                            }
                            else
                            {
                                if ((this.WHNGField == null))
                                {
                                    this.WHNGField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("WHNG", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.WHNGField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> SREP
                    {
                        get
                        {
                            if ((this.SREPField == null))
                            {
                                this.SREPField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("SREP", ""));
                            }
                            return this.SREPField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.SREPField = null;
                            }
                            else
                            {
                                if ((this.SREPField == null))
                                {
                                    this.SREPField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("SREP", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.SREPField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> CREP
                    {
                        get
                        {
                            if ((this.CREPField == null))
                            {
                                this.CREPField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CREP", ""));
                            }
                            return this.CREPField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.CREPField = null;
                            }
                            else
                            {
                                if ((this.CREPField == null))
                                {
                                    this.CREPField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CREP", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.CREPField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CDNO", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CDNOLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("CNDN", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SDIR", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CNTP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("WHNG", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SREP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CREP", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (NAME, TELP, TELF, DEPT)
                /// </para>
                /// </summary>
                public partial class ORIGLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ORIGLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ORIGLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ORIGLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NAME", "")), new NamedContentModelEntity(XName.Get("TELP", "")), new NamedContentModelEntity(XName.Get("TELF", "")), new NamedContentModelEntity(XName.Get("DEPT", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (NAME, TELP, TELF, DEPT)
                    /// </para>
                    /// </summary>
                    public ORIGLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NAME, TELP, TELF, DEPT)
                    /// </para>
                    /// </summary>
                    public string NAME
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("NAME", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("NAME", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NAME, TELP, TELF, DEPT)
                    /// </para>
                    /// </summary>
                    public string TELP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("TELP", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("TELP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NAME, TELP, TELF, DEPT)
                    /// </para>
                    /// </summary>
                    public string TELF
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("TELF", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("TELF", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NAME, TELP, TELF, DEPT)
                    /// </para>
                    /// </summary>
                    public string DEPT
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DEPT", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DEPT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ORIG", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ORIGLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("NAME", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("TELP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("TELF", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DEPT", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, NARR)
            /// </para>
            /// </summary>
            public partial class NARLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator NARLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NARLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static NARLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("NARR", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, NARR)
                /// </para>
                /// </summary>
                public NARLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, NARR)
                /// </para>
                /// </summary>
                public string LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, NARR)
                /// </para>
                /// </summary>
                public string NARR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NARR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NARR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("NAR", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<NARLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("NARR", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (EDAT, LDAT, DELT, CTYP, NARR1, NARR2, RDIN)
            /// </para>
            /// </summary>
            public partial class DINLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator DINLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DINLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static DINLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("EDAT", "")), new NamedContentModelEntity(XName.Get("LDAT", "")), new NamedContentModelEntity(XName.Get("DELT", "")), new NamedContentModelEntity(XName.Get("CTYP", "")), new NamedContentModelEntity(XName.Get("NARR1", "")), new NamedContentModelEntity(XName.Get("NARR2", "")), new NamedContentModelEntity(XName.Get("RDIN", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (EDAT, LDAT, DELT, CTYP, NARR1, NARR2, RDIN)
                /// </para>
                /// </summary>
                public DINLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (EDAT, LDAT, DELT, CTYP, NARR1, NARR2, RDIN)
                /// </para>
                /// </summary>
                public string EDAT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("EDAT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("EDAT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (EDAT, LDAT, DELT, CTYP, NARR1, NARR2, RDIN)
                /// </para>
                /// </summary>
                public String LDAT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LDAT", ""));
                        return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LDAT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (EDAT, LDAT, DELT, CTYP, NARR1, NARR2, RDIN)
                /// </para>
                /// </summary>
                public string DELT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("DELT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("DELT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (EDAT, LDAT, DELT, CTYP, NARR1, NARR2, RDIN)
                /// </para>
                /// </summary>
                public string CTYP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CTYP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CTYP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (EDAT, LDAT, DELT, CTYP, NARR1, NARR2, RDIN)
                /// </para>
                /// </summary>
                public string NARR1
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NARR1", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NARR1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (EDAT, LDAT, DELT, CTYP, NARR1, NARR2, RDIN)
                /// </para>
                /// </summary>
                public string NARR2
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NARR2", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NARR2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (EDAT, LDAT, DELT, CTYP, NARR1, NARR2, RDIN)
                /// </para>
                /// </summary>
                public string RDIN
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("RDIN", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("RDIN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("DIN", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<DINLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("EDAT", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("LDAT", ""), typeof(int));
                    localElementDictionary.Add(XName.Get("DELT", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CTYP", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("NARR1", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("NARR2", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("RDIN", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
            /// </para>
            /// </summary>
            public partial class OLDLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator OLDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OLDLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static OLDLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("PROC", "")), new NamedContentModelEntity(XName.Get("QNTO", "")), new NamedContentModelEntity(XName.Get("COST", "")), new NamedContentModelEntity(XName.Get("CRAD", "")), new NamedContentModelEntity(XName.Get("NELC", "")), new NamedContentModelEntity(XName.Get("NELCC", "")), new NamedContentModelEntity(XName.Get("DCMD", "")), new NamedContentModelEntity(XName.Get("CDNO", "")), new NamedContentModelEntity(XName.Get("CUSP", "")), new NamedContentModelEntity(XName.Get("FREE", "")), new NamedContentModelEntity(XName.Get("TFIN", "")), new NamedContentModelEntity(XName.Get("NARR", "")), new NamedContentModelEntity(XName.Get("PROQ", "")), new NamedContentModelEntity(XName.Get("VATP", "")), new NamedContentModelEntity(XName.Get("VATC", "")), new NamedContentModelEntity(XName.Get("OCCD", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public OLDLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public String LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public PROCLocalType PROC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("PROC", ""));
                        return ((PROCLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("PROC", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public QNTOLocalType QNTO
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("QNTO", ""));
                        return ((QNTOLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("QNTO", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public COSTLocalType COST
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("COST", ""));
                        return ((COSTLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("COST", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public CRADLocalType CRAD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CRAD", ""));
                        return ((CRADLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CRAD", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public String NELC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NELC", ""));
                        return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NELC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public string NELCC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NELCC", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NELCC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public string DCMD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("DCMD", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("DCMD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public CDNOLocalType CDNO
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDNO", ""));
                        return ((CDNOLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDNO", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public string CUSP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CUSP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CUSP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public FREELocalType FREE
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("FREE", ""));
                        return ((FREELocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("FREE", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public string TFIN
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TFIN", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TFIN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public string NARR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NARR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NARR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public PROQLocalType PROQ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("PROQ", ""));
                        return ((PROQLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("PROQ", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public string VATP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VATP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VATP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public string VATC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VATC", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VATC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, PROC, QNTO, COST, CRAD, NELC, NELCC, DCMD, CDNO, CUSP, FREE, TFIN, NARR, PROQ, VATP, VATC, OCCD)
                /// </para>
                /// </summary>
                public string OCCD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("OCCD", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("OCCD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public System.Nullable<sbyte> id
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("id", ""));
                        if ((x == null))
                        {
                            return null;
                        }
                        return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public string status
                {
                    get
                    {
                        XAttribute x = this.Attribute(XName.Get("status", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetAttribute(XName.Get("status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("OLD", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<OLDLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(sbyte));
                    localElementDictionary.Add(XName.Get("PROC", ""), typeof(PROCLocalType));
                    localElementDictionary.Add(XName.Get("QNTO", ""), typeof(QNTOLocalType));
                    localElementDictionary.Add(XName.Get("COST", ""), typeof(COSTLocalType));
                    localElementDictionary.Add(XName.Get("CRAD", ""), typeof(CRADLocalType));
                    localElementDictionary.Add(XName.Get("NELC", ""), typeof(float));
                    localElementDictionary.Add(XName.Get("NELCC", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("DCMD", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CDNO", ""), typeof(CDNOLocalType));
                    localElementDictionary.Add(XName.Get("CUSP", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("FREE", ""), typeof(FREELocalType));
                    localElementDictionary.Add(XName.Get("TFIN", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("NARR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("PROQ", ""), typeof(PROQLocalType));
                    localElementDictionary.Add(XName.Get("VATP", ""), typeof(sbyte));
                    localElementDictionary.Add(XName.Get("VATC", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("OCCD", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (EANC, EANC2, SUPC, PROD)
                /// </para>
                /// </summary>
                public partial class PROCLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator PROCLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PROCLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static PROCLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("EANC", "")), new NamedContentModelEntity(XName.Get("EANC2", "")), new NamedContentModelEntity(XName.Get("SUPC", "")), new NamedContentModelEntity(XName.Get("PROD", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public PROCLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public String EANC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("EANC", ""));
                            return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("EANC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public string EANC2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("EANC2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("EANC2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public String SUPC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SUPC", ""));
                            return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SUPC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public string PROD
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PROD", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PROD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("PROC", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<PROCLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("EANC", ""), typeof(long));
                        localElementDictionary.Add(XName.Get("EANC2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SUPC", ""), typeof(int));
                        localElementDictionary.Add(XName.Get("PROD", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (NROU, NROUC, CONU, TMEA, UNOM)
                /// </para>
                /// </summary>
                public partial class QNTOLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator QNTOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<QNTOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static QNTOLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NROU", "")), new NamedContentModelEntity(XName.Get("NROUC", "")), new NamedContentModelEntity(XName.Get("CONU", "")), new NamedContentModelEntity(XName.Get("TMEA", "")), new NamedContentModelEntity(XName.Get("UNOM", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (NROU, NROUC, CONU, TMEA, UNOM)
                    /// </para>
                    /// </summary>
                    public QNTOLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, NROUC, CONU, TMEA, UNOM)
                    /// </para>
                    /// </summary>
                    public String NROU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("NROU", ""));
                            return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("NROU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, NROUC, CONU, TMEA, UNOM)
                    /// </para>
                    /// </summary>
                    public string NROUC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("NROUC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("NROUC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, NROUC, CONU, TMEA, UNOM)
                    /// </para>
                    /// </summary>
                    public String CONU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CONU", ""));
                            return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CONU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, NROUC, CONU, TMEA, UNOM)
                    /// </para>
                    /// </summary>
                    public string TMEA
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("TMEA", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("TMEA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, NROUC, CONU, TMEA, UNOM)
                    /// </para>
                    /// </summary>
                    public string UNOM
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("UNOM", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("UNOM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("QNTO", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<QNTOLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("NROU", ""), typeof(sbyte));
                        localElementDictionary.Add(XName.Get("NROUC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CONU", ""), typeof(sbyte));
                        localElementDictionary.Add(XName.Get("TMEA", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("UNOM", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (COSP, COSPC, CUCP, UNOM)
                /// </para>
                /// </summary>
                public partial class COSTLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator COSTLocalType(XElement xe) { return XTypedServices.ToXTypedElement<COSTLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static COSTLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("COSP", "")), new NamedContentModelEntity(XName.Get("COSPC", "")), new NamedContentModelEntity(XName.Get("CUCP", "")), new NamedContentModelEntity(XName.Get("UNOM", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (COSP, COSPC, CUCP, UNOM)
                    /// </para>
                    /// </summary>
                    public COSTLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (COSP, COSPC, CUCP, UNOM)
                    /// </para>
                    /// </summary>
                    public string COSP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("COSP", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("COSP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (COSP, COSPC, CUCP, UNOM)
                    /// </para>
                    /// </summary>
                    public string COSPC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("COSPC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("COSPC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (COSP, COSPC, CUCP, UNOM)
                    /// </para>
                    /// </summary>
                    public string CUCP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CUCP", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CUCP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (COSP, COSPC, CUCP, UNOM)
                    /// </para>
                    /// </summary>
                    public string UNOM
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("UNOM", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("UNOM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("COST", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<COSTLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("COSP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("COSPC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CUCP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("UNOM", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                /// </para>
                /// </summary>
                public partial class CRADLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CRADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CRADLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CRADLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ADJI1", "")), new NamedContentModelEntity(XName.Get("PERC1", "")), new NamedContentModelEntity(XName.Get("VALU1", "")), new NamedContentModelEntity(XName.Get("ADJI2", "")), new NamedContentModelEntity(XName.Get("PERC2", "")), new NamedContentModelEntity(XName.Get("VALU2", "")), new NamedContentModelEntity(XName.Get("ADJI3", "")), new NamedContentModelEntity(XName.Get("PERC3", "")), new NamedContentModelEntity(XName.Get("VALU3", "")), new NamedContentModelEntity(XName.Get("ADJI4", "")), new NamedContentModelEntity(XName.Get("PERC4", "")), new NamedContentModelEntity(XName.Get("VALU4", "")), new NamedContentModelEntity(XName.Get("ADJI5", "")), new NamedContentModelEntity(XName.Get("PERC5", "")), new NamedContentModelEntity(XName.Get("VALU5", "")), new NamedContentModelEntity(XName.Get("ADJI6", "")), new NamedContentModelEntity(XName.Get("PERC6", "")), new NamedContentModelEntity(XName.Get("VALU6", "")), new NamedContentModelEntity(XName.Get("ADJI7", "")), new NamedContentModelEntity(XName.Get("PERC7", "")), new NamedContentModelEntity(XName.Get("VALU7", "")), new NamedContentModelEntity(XName.Get("ADJI8", "")), new NamedContentModelEntity(XName.Get("PERC8", "")), new NamedContentModelEntity(XName.Get("VALU8", "")), new NamedContentModelEntity(XName.Get("ADJI9", "")), new NamedContentModelEntity(XName.Get("PERC9", "")), new NamedContentModelEntity(XName.Get("VALU9", "")), new NamedContentModelEntity(XName.Get("ADJI10", "")), new NamedContentModelEntity(XName.Get("PERC10", "")), new NamedContentModelEntity(XName.Get("VALU10", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public CRADLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string PERC1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string PERC2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI3", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public String PERC3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC3", ""));
                            return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU3", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI4
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI4", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string PERC4
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC4", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU4
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU4", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI5
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI5", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string PERC5
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC5", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU5
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU5", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI6
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI6", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI6", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string PERC6
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC6", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC6", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU6
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU6", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU6", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI7
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI7", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI7", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string PERC7
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC7", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC7", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU7
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU7", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU7", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI8
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI8", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI8", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string PERC8
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC8", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC8", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU8
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU8", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU8", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI9
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI9", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI9", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string PERC9
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC9", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC9", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU9
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU9", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU9", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string ADJI10
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI10", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI10", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string PERC10
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC10", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC10", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1, ADJI2, PERC2, VALU2, ADJI3, PERC3, VALU3, ADJI4, PERC4, VALU4, ADJI5, PERC5, VALU5, ADJI6, PERC6, VALU6, ADJI7, PERC7, VALU7, ADJI8, PERC8, VALU8, ADJI9, PERC9, VALU9, ADJI10, PERC10, VALU10)
                    /// </para>
                    /// </summary>
                    public string VALU10
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU10", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU10", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CRAD", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CRADLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ADJI1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI3", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC3", ""), typeof(float));
                        localElementDictionary.Add(XName.Get("VALU3", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI4", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC4", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU4", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI5", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC5", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU5", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI6", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC6", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU6", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI7", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC7", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU7", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI8", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC8", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU8", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI9", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC9", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU9", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI10", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC10", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU10", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                /// </para>
                /// </summary>
                public partial class CDNOLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> CNDNField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> SDIRField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> CNTPField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> WHNGField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> SREPField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> CREPField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    public static explicit operator CDNOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDNOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CDNOLocalType()
                    {
                        BuildElementDictionary();
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public CDNOLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> CNDN
                    {
                        get
                        {
                            if ((this.CNDNField == null))
                            {
                                this.CNDNField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CNDN", ""));
                            }
                            return this.CNDNField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.CNDNField = null;
                            }
                            else
                            {
                                if ((this.CNDNField == null))
                                {
                                    this.CNDNField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CNDN", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.CNDNField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> SDIR
                    {
                        get
                        {
                            if ((this.SDIRField == null))
                            {
                                this.SDIRField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("SDIR", ""));
                            }
                            return this.SDIRField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.SDIRField = null;
                            }
                            else
                            {
                                if ((this.SDIRField == null))
                                {
                                    this.SDIRField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("SDIR", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.SDIRField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> CNTP
                    {
                        get
                        {
                            if ((this.CNTPField == null))
                            {
                                this.CNTPField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CNTP", ""));
                            }
                            return this.CNTPField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.CNTPField = null;
                            }
                            else
                            {
                                if ((this.CNTPField == null))
                                {
                                    this.CNTPField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CNTP", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.CNTPField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> WHNG
                    {
                        get
                        {
                            if ((this.WHNGField == null))
                            {
                                this.WHNGField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("WHNG", ""));
                            }
                            return this.WHNGField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.WHNGField = null;
                            }
                            else
                            {
                                if ((this.WHNGField == null))
                                {
                                    this.WHNGField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("WHNG", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.WHNGField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> SREP
                    {
                        get
                        {
                            if ((this.SREPField == null))
                            {
                                this.SREPField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("SREP", ""));
                            }
                            return this.SREPField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.SREPField = null;
                            }
                            else
                            {
                                if ((this.SREPField == null))
                                {
                                    this.SREPField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("SREP", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.SREPField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN | SDIR | CNTP | WHNG | SREP | CREP)*
                    /// </para>
                    /// </summary>
                    public IList<string> CREP
                    {
                        get
                        {
                            if ((this.CREPField == null))
                            {
                                this.CREPField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("CREP", ""));
                            }
                            return this.CREPField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.CREPField = null;
                            }
                            else
                            {
                                if ((this.CREPField == null))
                                {
                                    this.CREPField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("CREP", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.CREPField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CDNO", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CDNOLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("CNDN", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SDIR", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CNTP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("WHNG", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SREP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CREP", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (NROU, EANC*, SUPC, CONU, TMEA, UNOM, PROD)
                /// </para>
                /// </summary>
                public partial class FREELocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> EANCField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator FREELocalType(XElement xe) { return XTypedServices.ToXTypedElement<FREELocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static FREELocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NROU", "")), new NamedContentModelEntity(XName.Get("EANC", "")), new NamedContentModelEntity(XName.Get("SUPC", "")), new NamedContentModelEntity(XName.Get("CONU", "")), new NamedContentModelEntity(XName.Get("TMEA", "")), new NamedContentModelEntity(XName.Get("UNOM", "")), new NamedContentModelEntity(XName.Get("PROD", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (NROU, EANC*, SUPC, CONU, TMEA, UNOM, PROD)
                    /// </para>
                    /// </summary>
                    public FREELocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, EANC*, SUPC, CONU, TMEA, UNOM, PROD)
                    /// </para>
                    /// </summary>
                    public string NROU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("NROU", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("NROU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, EANC*, SUPC, CONU, TMEA, UNOM, PROD)
                    /// </para>
                    /// </summary>
                    public IList<string> EANC
                    {
                        get
                        {
                            if ((this.EANCField == null))
                            {
                                this.EANCField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("EANC", ""));
                            }
                            return this.EANCField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.EANCField = null;
                            }
                            else
                            {
                                if ((this.EANCField == null))
                                {
                                    this.EANCField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("EANC", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.EANCField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, EANC*, SUPC, CONU, TMEA, UNOM, PROD)
                    /// </para>
                    /// </summary>
                    public string SUPC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SUPC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SUPC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, EANC*, SUPC, CONU, TMEA, UNOM, PROD)
                    /// </para>
                    /// </summary>
                    public string CONU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CONU", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CONU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, EANC*, SUPC, CONU, TMEA, UNOM, PROD)
                    /// </para>
                    /// </summary>
                    public string TMEA
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("TMEA", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("TMEA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, EANC*, SUPC, CONU, TMEA, UNOM, PROD)
                    /// </para>
                    /// </summary>
                    public string UNOM
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("UNOM", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("UNOM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NROU, EANC*, SUPC, CONU, TMEA, UNOM, PROD)
                    /// </para>
                    /// </summary>
                    public string PROD
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PROD", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PROD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("FREE", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<FREELocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("NROU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("EANC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SUPC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CONU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("TMEA", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("UNOM", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PROD", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (STYE, COLR, SIZE)
                /// </para>
                /// </summary>
                public partial class PROQLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator PROQLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PROQLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static PROQLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("STYE", "")), new NamedContentModelEntity(XName.Get("COLR", "")), new NamedContentModelEntity(XName.Get("SIZE", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (STYE, COLR, SIZE)
                    /// </para>
                    /// </summary>
                    public PROQLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (STYE, COLR, SIZE)
                    /// </para>
                    /// </summary>
                    public string STYE
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("STYE", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("STYE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (STYE, COLR, SIZE)
                    /// </para>
                    /// </summary>
                    public string COLR
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("COLR", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("COLR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (STYE, COLR, SIZE)
                    /// </para>
                    /// </summary>
                    public string SIZE
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SIZE", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SIZE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("PROQ", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<PROQLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("STYE", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("COLR", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SIZE", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, CRAD, TERM)
            /// </para>
            /// </summary>
            public partial class PRALocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator PRALocalType(XElement xe) { return XTypedServices.ToXTypedElement<PRALocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static PRALocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("CRAD", "")), new NamedContentModelEntity(XName.Get("TERM", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, CRAD, TERM)
                /// </para>
                /// </summary>
                public PRALocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, CRAD, TERM)
                /// </para>
                /// </summary>
                public string LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, CRAD, TERM)
                /// </para>
                /// </summary>
                public CRADLocalType CRAD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CRAD", ""));
                        return ((CRADLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CRAD", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, CRAD, TERM)
                /// </para>
                /// </summary>
                public string TERM
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TERM", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TERM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("PRA", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<PRALocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CRAD", ""), typeof(CRADLocalType));
                    localElementDictionary.Add(XName.Get("TERM", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ADJI1, PERC1, VALU1)
                /// </para>
                /// </summary>
                public partial class CRADLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CRADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CRADLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CRADLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ADJI1", "")), new NamedContentModelEntity(XName.Get("PERC1", "")), new NamedContentModelEntity(XName.Get("VALU1", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1)
                    /// </para>
                    /// </summary>
                    public CRADLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1)
                    /// </para>
                    /// </summary>
                    public string ADJI1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1)
                    /// </para>
                    /// </summary>
                    public string PERC1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI1, PERC1, VALU1)
                    /// </para>
                    /// </summary>
                    public string VALU1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CRAD", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CRADLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ADJI1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU1", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("UNB", ""), typeof(UNB));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("UNB", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public UNB UNB { get { return rootObject as UNB; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(UNB root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public UNB UNB { get { return rootObject as UNB; } }

        private XRoot()
        {
        }

        public XRoot(UNB root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}