//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace Spar.Data.XsdModels.CreditNotes.CreditNoteI
{


    /// <summary>
    /// <para>
    /// Regular expression: (FileInformation, Interchange*)
    /// </para>
    /// </summary>
    public partial class File : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InterchangeLocalType> InterchangeField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator File(XElement xe) { return XTypedServices.ToXTypedElement<File>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static File()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FileInformation", "")), new NamedContentModelEntity(XName.Get("Interchange", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (FileInformation, Interchange*)
        /// </para>
        /// </summary>
        public File()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FileInformation, Interchange*)
        /// </para>
        /// </summary>
        public FileInformationLocalType FileInformation
        {
            get
            {
                XElement x = this.GetElement(XName.Get("FileInformation", ""));
                return ((FileInformationLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("FileInformation", ""), value);
            }
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FileInformation, Interchange*)
        /// </para>
        /// </summary>
        public IList<File.InterchangeLocalType> Interchange
        {
            get
            {
                if ((this.InterchangeField == null))
                {
                    this.InterchangeField = new XTypedList<InterchangeLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Interchange", ""));
                }
                return this.InterchangeField;
            }
            set
            {
                if ((value == null))
                {
                    this.InterchangeField = null;
                }
                else
                {
                    if ((this.InterchangeField == null))
                    {
                        this.InterchangeField = XTypedList<InterchangeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Interchange", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<InterchangeLocalType>(this.InterchangeField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("File", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static File Load(string xmlFile)
        {
            return XTypedServices.Load<File>(xmlFile);
        }

        public static File Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<File>(xmlFile);
        }

        public static File Parse(string xml)
        {
            return XTypedServices.Parse<File>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<File>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("FileInformation", ""), typeof(FileInformationLocalType));
            localElementDictionary.Add(XName.Get("Interchange", ""), typeof(InterchangeLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (FileType)
        /// </para>
        /// </summary>
        public partial class FileInformationLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator FileInformationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FileInformationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static FileInformationLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FileType", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (FileType)
            /// </para>
            /// </summary>
            public FileInformationLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (FileType)
            /// </para>
            /// </summary>
            public string FileType
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("FileType", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("FileType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("FileInformation", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<FileInformationLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("FileType", ""), typeof(string));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Header)
        /// </para>
        /// </summary>
        public partial class InterchangeLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator InterchangeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InterchangeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static InterchangeLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Header)
            /// </para>
            /// </summary>
            public InterchangeLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header)
            /// </para>
            /// </summary>
            public HeaderLocalType Header
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Header", ""));
                    return ((HeaderLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("Header", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Interchange", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<InterchangeLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("Header", ""), typeof(HeaderLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Sender_Identification, Recipient_Identification, DATE_AND_TIME_OF_TRANSMISSION, Interchange_Control_Reference, MESSAGE_HEADER)
            /// </para>
            /// </summary>
            public partial class HeaderLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator HeaderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HeaderLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static HeaderLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Sender_Identification", "")), new NamedContentModelEntity(XName.Get("Recipient_Identification", "")), new NamedContentModelEntity(XName.Get("DATE_AND_TIME_OF_TRANSMISSION", "")), new NamedContentModelEntity(XName.Get("Interchange_Control_Reference", "")), new NamedContentModelEntity(XName.Get("MESSAGE_HEADER", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Sender_Identification, Recipient_Identification, DATE_AND_TIME_OF_TRANSMISSION, Interchange_Control_Reference, MESSAGE_HEADER)
                /// </para>
                /// </summary>
                public HeaderLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender_Identification, Recipient_Identification, DATE_AND_TIME_OF_TRANSMISSION, Interchange_Control_Reference, MESSAGE_HEADER)
                /// </para>
                /// </summary>
                public long Sender_Identification
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Sender_Identification", ""));
                        return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Sender_Identification", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender_Identification, Recipient_Identification, DATE_AND_TIME_OF_TRANSMISSION, Interchange_Control_Reference, MESSAGE_HEADER)
                /// </para>
                /// </summary>
                public long Recipient_Identification
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Recipient_Identification", ""));
                        return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Recipient_Identification", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender_Identification, Recipient_Identification, DATE_AND_TIME_OF_TRANSMISSION, Interchange_Control_Reference, MESSAGE_HEADER)
                /// </para>
                /// </summary>
                public DATE_AND_TIME_OF_TRANSMISSIONLocalType DATE_AND_TIME_OF_TRANSMISSION
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("DATE_AND_TIME_OF_TRANSMISSION", ""));
                        return ((DATE_AND_TIME_OF_TRANSMISSIONLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("DATE_AND_TIME_OF_TRANSMISSION", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender_Identification, Recipient_Identification, DATE_AND_TIME_OF_TRANSMISSION, Interchange_Control_Reference, MESSAGE_HEADER)
                /// </para>
                /// </summary>
                public long Interchange_Control_Reference
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Interchange_Control_Reference", ""));
                        return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Interchange_Control_Reference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender_Identification, Recipient_Identification, DATE_AND_TIME_OF_TRANSMISSION, Interchange_Control_Reference, MESSAGE_HEADER)
                /// </para>
                /// </summary>
                public MESSAGE_HEADERLocalType MESSAGE_HEADER
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("MESSAGE_HEADER", ""));
                        return ((MESSAGE_HEADERLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("MESSAGE_HEADER", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("Header", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<HeaderLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("Sender_Identification", ""), typeof(long));
                    localElementDictionary.Add(XName.Get("Recipient_Identification", ""), typeof(long));
                    localElementDictionary.Add(XName.Get("DATE_AND_TIME_OF_TRANSMISSION", ""), typeof(DATE_AND_TIME_OF_TRANSMISSIONLocalType));
                    localElementDictionary.Add(XName.Get("Interchange_Control_Reference", ""), typeof(long));
                    localElementDictionary.Add(XName.Get("MESSAGE_HEADER", ""), typeof(MESSAGE_HEADERLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Transmission_Date)
                /// </para>
                /// </summary>
                public partial class DATE_AND_TIME_OF_TRANSMISSIONLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator DATE_AND_TIME_OF_TRANSMISSIONLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DATE_AND_TIME_OF_TRANSMISSIONLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static DATE_AND_TIME_OF_TRANSMISSIONLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Transmission_Date", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Transmission_Date)
                    /// </para>
                    /// </summary>
                    public DATE_AND_TIME_OF_TRANSMISSIONLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Transmission_Date)
                    /// </para>
                    /// </summary>
                    public System.DateTime Transmission_Date
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Transmission_Date", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Transmission_Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("DATE_AND_TIME_OF_TRANSMISSION", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<DATE_AND_TIME_OF_TRANSMISSIONLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("Transmission_Date", ""), typeof(System.DateTime));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Message_Reference, MESSAGE_IDENTIFIER, Common_Access_Reference, Message_Detail, Segment_Count?)
                /// </para>
                /// </summary>
                public partial class MESSAGE_HEADERLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator MESSAGE_HEADERLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MESSAGE_HEADERLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static MESSAGE_HEADERLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Message_Reference", "")), new NamedContentModelEntity(XName.Get("MESSAGE_IDENTIFIER", "")), new NamedContentModelEntity(XName.Get("Common_Access_Reference", "")), new NamedContentModelEntity(XName.Get("Message_Detail", "")), new NamedContentModelEntity(XName.Get("Segment_Count", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Message_Reference, MESSAGE_IDENTIFIER, Common_Access_Reference, Message_Detail, Segment_Count?)
                    /// </para>
                    /// </summary>
                    public MESSAGE_HEADERLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Message_Reference, MESSAGE_IDENTIFIER, Common_Access_Reference, Message_Detail, Segment_Count?)
                    /// </para>
                    /// </summary>
                    public sbyte Message_Reference
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Message_Reference", ""));
                            return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Message_Reference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Message_Reference, MESSAGE_IDENTIFIER, Common_Access_Reference, Message_Detail, Segment_Count?)
                    /// </para>
                    /// </summary>
                    public MESSAGE_IDENTIFIERLocalType MESSAGE_IDENTIFIER
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("MESSAGE_IDENTIFIER", ""));
                            return ((MESSAGE_IDENTIFIERLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("MESSAGE_IDENTIFIER", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Message_Reference, MESSAGE_IDENTIFIER, Common_Access_Reference, Message_Detail, Segment_Count?)
                    /// </para>
                    /// </summary>
                    public string Common_Access_Reference
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Common_Access_Reference", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Common_Access_Reference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Message_Reference, MESSAGE_IDENTIFIER, Common_Access_Reference, Message_Detail, Segment_Count?)
                    /// </para>
                    /// </summary>
                    public Message_DetailLocalType Message_Detail
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Message_Detail", ""));
                            return ((Message_DetailLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("Message_Detail", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (Message_Reference, MESSAGE_IDENTIFIER, Common_Access_Reference, Message_Detail, Segment_Count?)
                    /// </para>
                    /// </summary>
                    public System.Nullable<sbyte> Segment_Count
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Segment_Count", ""));
                            if ((x == null))
                            {
                                return null;
                            }
                            return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Segment_Count", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("MESSAGE_HEADER", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<MESSAGE_HEADERLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("Message_Reference", ""), typeof(sbyte));
                        localElementDictionary.Add(XName.Get("MESSAGE_IDENTIFIER", ""), typeof(MESSAGE_IDENTIFIERLocalType));
                        localElementDictionary.Add(XName.Get("Common_Access_Reference", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("Message_Detail", ""), typeof(Message_DetailLocalType));
                        localElementDictionary.Add(XName.Get("Segment_Count", ""), typeof(sbyte));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Message_Type, Message_Version, Message_Release_Number, Message_Controlling_Agency)
                    /// </para>
                    /// </summary>
                    public partial class MESSAGE_IDENTIFIERLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator MESSAGE_IDENTIFIERLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MESSAGE_IDENTIFIERLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static MESSAGE_IDENTIFIERLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Message_Type", "")), new NamedContentModelEntity(XName.Get("Message_Version", "")), new NamedContentModelEntity(XName.Get("Message_Release_Number", "")), new NamedContentModelEntity(XName.Get("Message_Controlling_Agency", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Message_Type, Message_Version, Message_Release_Number, Message_Controlling_Agency)
                        /// </para>
                        /// </summary>
                        public MESSAGE_IDENTIFIERLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (Message_Type, Message_Version, Message_Release_Number, Message_Controlling_Agency)
                        /// </para>
                        /// </summary>
                        public string Message_Type
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("Message_Type", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("Message_Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (Message_Type, Message_Version, Message_Release_Number, Message_Controlling_Agency)
                        /// </para>
                        /// </summary>
                        public sbyte Message_Version
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("Message_Version", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("Message_Version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (Message_Type, Message_Version, Message_Release_Number, Message_Controlling_Agency)
                        /// </para>
                        /// </summary>
                        public sbyte Message_Release_Number
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("Message_Release_Number", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("Message_Release_Number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (Message_Type, Message_Version, Message_Release_Number, Message_Controlling_Agency)
                        /// </para>
                        /// </summary>
                        public string Message_Controlling_Agency
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("Message_Controlling_Agency", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("Message_Controlling_Agency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("MESSAGE_IDENTIFIER", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<MESSAGE_IDENTIFIERLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("Message_Type", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("Message_Version", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("Message_Release_Number", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("Message_Controlling_Agency", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                    /// </para>
                    /// </summary>
                    public partial class Message_DetailLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<VRSLocalType> VRSField;

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator Message_DetailLocalType(XElement xe) { return XTypedServices.ToXTypedElement<Message_DetailLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static Message_DetailLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SAP", "")), new NamedContentModelEntity(XName.Get("SDP", "")), new NamedContentModelEntity(XName.Get("CLO", "")), new NamedContentModelEntity(XName.Get("REF", "")), new NamedContentModelEntity(XName.Get("DCF", "")), new NamedContentModelEntity(XName.Get("VRS", "")), new NamedContentModelEntity(XName.Get("DOT", "")), new NamedContentModelEntity(XName.Get("VRT", "")), new NamedContentModelEntity(XName.Get("MSY", "")), new NamedContentModelEntity(XName.Get("BTT", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public Message_DetailLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public SAPLocalType SAP
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("SAP", ""));
                                return ((SAPLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("SAP", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public SDPLocalType SDP
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("SDP", ""));
                                return ((SDPLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("SDP", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public CLOLocalType CLO
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("CLO", ""));
                                return ((CLOLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("CLO", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public @REFLocalType @REF
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("REF", ""));
                                return ((@REFLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("REF", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public DCFLocalType DCF
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("DCF", ""));
                                return ((DCFLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("DCF", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public IList<File.InterchangeLocalType.HeaderLocalType.MESSAGE_HEADERLocalType.Message_DetailLocalType.VRSLocalType> VRS
                        {
                            get
                            {
                                if ((this.VRSField == null))
                                {
                                    this.VRSField = new XTypedList<VRSLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("VRS", ""));
                                }
                                return this.VRSField;
                            }
                            set
                            {
                                if ((value == null))
                                {
                                    this.VRSField = null;
                                }
                                else
                                {
                                    if ((this.VRSField == null))
                                    {
                                        this.VRSField = XTypedList<VRSLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("VRS", ""));
                                    }
                                    else
                                    {
                                        XTypedServices.SetList<VRSLocalType>(this.VRSField, value);
                                    }
                                }
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public DOTLocalType DOT
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("DOT", ""));
                                return ((DOTLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("DOT", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public VRTLocalType VRT
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("VRT", ""));
                                return ((VRTLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("VRT", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public MSYLocalType MSY
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("MSY", ""));
                                return ((MSYLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("MSY", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SAP, SDP, CLO, @REF, DCF, VRS*, DOT, VRT, MSY, BTT)
                        /// </para>
                        /// </summary>
                        public BTTLocalType BTT
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("BTT", ""));
                                return ((BTTLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("BTT", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("Message_Detail", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<Message_DetailLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("SAP", ""), typeof(SAPLocalType));
                            localElementDictionary.Add(XName.Get("SDP", ""), typeof(SDPLocalType));
                            localElementDictionary.Add(XName.Get("CLO", ""), typeof(CLOLocalType));
                            localElementDictionary.Add(XName.Get("REF", ""), typeof(@REFLocalType));
                            localElementDictionary.Add(XName.Get("DCF", ""), typeof(DCFLocalType));
                            localElementDictionary.Add(XName.Get("VRS", ""), typeof(VRSLocalType));
                            localElementDictionary.Add(XName.Get("DOT", ""), typeof(DOTLocalType));
                            localElementDictionary.Add(XName.Get("VRT", ""), typeof(VRTLocalType));
                            localElementDictionary.Add(XName.Get("MSY", ""), typeof(MSYLocalType));
                            localElementDictionary.Add(XName.Get("BTT", ""), typeof(BTTLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Supplier_Accounting_Point, Suppliers_Vat_Registration_Number)
                        /// </para>
                        /// </summary>
                        public partial class SAPLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator SAPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SAPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static SAPLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Supplier_Accounting_Point", "")), new NamedContentModelEntity(XName.Get("Suppliers_Vat_Registration_Number", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Supplier_Accounting_Point, Suppliers_Vat_Registration_Number)
                            /// </para>
                            /// </summary>
                            public SAPLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Supplier_Accounting_Point, Suppliers_Vat_Registration_Number)
                            /// </para>
                            /// </summary>
                            public string Supplier_Accounting_Point
                           {
                               get
                                {
                                    XElement x = this.GetElement(XName.Get("Supplier_Accounting_Point", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Supplier_Accounting_Point", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Supplier_Accounting_Point, Suppliers_Vat_Registration_Number)
                            /// </para>
                            /// </summary>
                            public string Suppliers_Vat_Registration_Number
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Suppliers_Vat_Registration_Number", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Suppliers_Vat_Registration_Number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("SAP", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<SAPLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Supplier_Accounting_Point", ""), typeof(long));
                                localElementDictionary.Add(XName.Get("Suppliers_Vat_Registration_Number", ""), typeof(long));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Supplier_Despatch_Point, SUPPLIER_DESPATCH_POINT_ADDRESS)
                        /// </para>
                        /// </summary>
                        public partial class SDPLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator SDPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SDPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static SDPLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Supplier_Despatch_Point", "")), new NamedContentModelEntity(XName.Get("SUPPLIER_DESPATCH_POINT_ADDRESS", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Supplier_Despatch_Point, SUPPLIER_DESPATCH_POINT_ADDRESS)
                            /// </para>
                            /// </summary>
                            public SDPLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Supplier_Despatch_Point, SUPPLIER_DESPATCH_POINT_ADDRESS)
                            /// </para>
                            /// </summary>
                            public string Supplier_Despatch_Point
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Supplier_Despatch_Point", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Supplier_Despatch_Point", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Supplier_Despatch_Point, SUPPLIER_DESPATCH_POINT_ADDRESS)
                            /// </para>
                            /// </summary>
                            public SUPPLIER_DESPATCH_POINT_ADDRESSLocalType SUPPLIER_DESPATCH_POINT_ADDRESS
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("SUPPLIER_DESPATCH_POINT_ADDRESS", ""));
                                    return ((SUPPLIER_DESPATCH_POINT_ADDRESSLocalType)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("SUPPLIER_DESPATCH_POINT_ADDRESS", ""), value);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("SDP", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<SDPLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Supplier_Despatch_Point", ""), typeof(long));
                                localElementDictionary.Add(XName.Get("SUPPLIER_DESPATCH_POINT_ADDRESS", ""), typeof(SUPPLIER_DESPATCH_POINT_ADDRESSLocalType));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Address_line1, Address_line2, Address_line3, Address_line4)
                            /// </para>
                            /// </summary>
                            public partial class SUPPLIER_DESPATCH_POINT_ADDRESSLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator SUPPLIER_DESPATCH_POINT_ADDRESSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SUPPLIER_DESPATCH_POINT_ADDRESSLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static SUPPLIER_DESPATCH_POINT_ADDRESSLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Address_line1", "")), new NamedContentModelEntity(XName.Get("Address_line2", "")), new NamedContentModelEntity(XName.Get("Address_line3", "")), new NamedContentModelEntity(XName.Get("Address_line4", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Address_line1, Address_line2, Address_line3, Address_line4)
                                /// </para>
                                /// </summary>
                                public SUPPLIER_DESPATCH_POINT_ADDRESSLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Address_line1, Address_line2, Address_line3, Address_line4)
                                /// </para>
                                /// </summary>
                                public string Address_line1
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Address_line1", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Address_line1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Address_line1, Address_line2, Address_line3, Address_line4)
                                /// </para>
                                /// </summary>
                                public string Address_line2
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Address_line2", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Address_line2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Address_line1, Address_line2, Address_line3, Address_line4)
                                /// </para>
                                /// </summary>
                                public string Address_line3
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Address_line3", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Address_line3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Address_line1, Address_line2, Address_line3, Address_line4)
                                /// </para>
                                /// </summary>
                                public short Address_line4
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Address_line4", ""));
                                        return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Address_line4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("SUPPLIER_DESPATCH_POINT_ADDRESS", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<SUPPLIER_DESPATCH_POINT_ADDRESSLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("Address_line1", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("Address_line2", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("Address_line3", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("Address_line4", ""), typeof(short));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Customer_Delivery_Invoice_Point, Customer_Order_Point, Customer_Delivery_Point_Name, CUSTOMER_DELIVERY_POINT_ADDRESS, Alternate_Invoice_Point, CustomerVatNumber)
                        /// </para>
                        /// </summary>
                        public partial class CLOLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator CLOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CLOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static CLOLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Customer_Delivery_Invoice_Point", "")), new NamedContentModelEntity(XName.Get("Customer_Order_Point", "")), new NamedContentModelEntity(XName.Get("Customer_Delivery_Point_Name", "")), new NamedContentModelEntity(XName.Get("CUSTOMER_DELIVERY_POINT_ADDRESS", "")), new NamedContentModelEntity(XName.Get("Alternate_Invoice_Point", "")), new NamedContentModelEntity(XName.Get("CustomerVatNumber", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Customer_Delivery_Invoice_Point, Customer_Order_Point, Customer_Delivery_Point_Name, CUSTOMER_DELIVERY_POINT_ADDRESS, Alternate_Invoice_Point, CustomerVatNumber)
                            /// </para>
                            /// </summary>
                            public CLOLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Customer_Delivery_Invoice_Point, Customer_Order_Point, Customer_Delivery_Point_Name, CUSTOMER_DELIVERY_POINT_ADDRESS, Alternate_Invoice_Point, CustomerVatNumber)
                            /// </para>
                            /// </summary>
                            public long Customer_Delivery_Invoice_Point
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Customer_Delivery_Invoice_Point", ""));
                                    return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Customer_Delivery_Invoice_Point", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Customer_Delivery_Invoice_Point, Customer_Order_Point, Customer_Delivery_Point_Name, CUSTOMER_DELIVERY_POINT_ADDRESS, Alternate_Invoice_Point, CustomerVatNumber)
                            /// </para>
                            /// </summary>
                            public long Customer_Order_Point
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Customer_Order_Point", ""));
                                    return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Customer_Order_Point", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Customer_Delivery_Invoice_Point, Customer_Order_Point, Customer_Delivery_Point_Name, CUSTOMER_DELIVERY_POINT_ADDRESS, Alternate_Invoice_Point, CustomerVatNumber)
                            /// </para>
                            /// </summary>
                            public string Customer_Delivery_Point_Name
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Customer_Delivery_Point_Name", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Customer_Delivery_Point_Name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Customer_Delivery_Invoice_Point, Customer_Order_Point, Customer_Delivery_Point_Name, CUSTOMER_DELIVERY_POINT_ADDRESS, Alternate_Invoice_Point, CustomerVatNumber)
                            /// </para>
                            /// </summary>
                            public CUSTOMER_DELIVERY_POINT_ADDRESSLocalType CUSTOMER_DELIVERY_POINT_ADDRESS
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("CUSTOMER_DELIVERY_POINT_ADDRESS", ""));
                                    return ((CUSTOMER_DELIVERY_POINT_ADDRESSLocalType)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("CUSTOMER_DELIVERY_POINT_ADDRESS", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Customer_Delivery_Invoice_Point, Customer_Order_Point, Customer_Delivery_Point_Name, CUSTOMER_DELIVERY_POINT_ADDRESS, Alternate_Invoice_Point, CustomerVatNumber)
                            /// </para>
                            /// </summary>
                            public string Alternate_Invoice_Point
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Alternate_Invoice_Point", ""));
                                    return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Alternate_Invoice_Point", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Customer_Delivery_Invoice_Point, Customer_Order_Point, Customer_Delivery_Point_Name, CUSTOMER_DELIVERY_POINT_ADDRESS, Alternate_Invoice_Point, CustomerVatNumber)
                            /// </para>
                            /// </summary>
                            public long CustomerVatNumber
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("CustomerVatNumber", ""));
                                    return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("CustomerVatNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("CLO", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<CLOLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Customer_Delivery_Invoice_Point", ""), typeof(long));
                                localElementDictionary.Add(XName.Get("Customer_Order_Point", ""), typeof(long));
                                localElementDictionary.Add(XName.Get("Customer_Delivery_Point_Name", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("CUSTOMER_DELIVERY_POINT_ADDRESS", ""), typeof(CUSTOMER_DELIVERY_POINT_ADDRESSLocalType));
                                localElementDictionary.Add(XName.Get("Alternate_Invoice_Point", ""), typeof(long));
                                localElementDictionary.Add(XName.Get("CustomerVatNumber", ""), typeof(long));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Address_line1, Address_line3, Address_line4)
                            /// </para>
                            /// </summary>
                            public partial class CUSTOMER_DELIVERY_POINT_ADDRESSLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator CUSTOMER_DELIVERY_POINT_ADDRESSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CUSTOMER_DELIVERY_POINT_ADDRESSLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static CUSTOMER_DELIVERY_POINT_ADDRESSLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Address_line1", "")), new NamedContentModelEntity(XName.Get("Address_line3", "")), new NamedContentModelEntity(XName.Get("Address_line4", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Address_line1, Address_line3, Address_line4)
                                /// </para>
                                /// </summary>
                                public CUSTOMER_DELIVERY_POINT_ADDRESSLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Address_line1, Address_line3, Address_line4)
                                /// </para>
                                /// </summary>
                                public string Address_line1
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Address_line1", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Address_line1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Address_line1, Address_line3, Address_line4)
                                /// </para>
                                /// </summary>
                                public string Address_line3
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Address_line3", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Address_line3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Address_line1, Address_line3, Address_line4)
                                /// </para>
                                /// </summary>
                                public short Address_line4
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Address_line4", ""));
                                        return XTypedServices.ParseValue<short>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Address_line4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("CUSTOMER_DELIVERY_POINT_ADDRESS", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<CUSTOMER_DELIVERY_POINT_ADDRESSLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("Address_line1", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("Address_line3", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("Address_line4", ""), typeof(short));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (REFC010_REFERENCES)
                        /// </para>
                        /// </summary>
                        public partial class @REFLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator @REFLocalType(XElement xe) { return XTypedServices.ToXTypedElement<@REFLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static @REFLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("REFC010_REFERENCES", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (REFC010_REFERENCES)
                            /// </para>
                            /// </summary>
                            public @REFLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (REFC010_REFERENCES)
                            /// </para>
                            /// </summary>
                            public REFC010_REFERENCESLocalType REFC010_REFERENCES
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("REFC010_REFERENCES", ""));
                                    return ((REFC010_REFERENCESLocalType)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("REFC010_REFERENCES", ""), value);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("REF", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<@REFLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("REFC010_REFERENCES", ""), typeof(REFC010_REFERENCESLocalType));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Reference_number, Date)
                            /// </para>
                            /// </summary>
                            public partial class REFC010_REFERENCESLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator REFC010_REFERENCESLocalType(XElement xe) { return XTypedServices.ToXTypedElement<REFC010_REFERENCESLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static REFC010_REFERENCESLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Reference_number", "")), new NamedContentModelEntity(XName.Get("Date", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Reference_number, Date)
                                /// </para>
                                /// </summary>
                                public REFC010_REFERENCESLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Reference_number, Date)
                                /// </para>
                                /// </summary>
                                public string Reference_number
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Reference_number", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Reference_number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Reference_number, Date)
                                /// </para>
                                /// </summary>
                                public System.DateTime Date
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Date", ""));
                                        DateTime d;
                                        DateTime.TryParse(x.Value, out d);
                                        return d; 
                                        //return XTypedServices.ParseValue<System.DateTime>(d.Date, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("REFC010_REFERENCES", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<REFC010_REFERENCESLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("Reference_number", ""), typeof(long));
                                    localElementDictionary.Add(XName.Get("Date", ""), typeof(System.DateTime));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Line_Sequence_Number, DOCUMENT_REFERENCE*, REASON_CODE, LDS*)
                        /// </para>
                        /// </summary>
                        public partial class DCFLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<DOCUMENT_REFERENCELocalType> DOCUMENT_REFERENCEField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<LDSLocalType> LDSField;

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator DCFLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DCFLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static DCFLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Line_Sequence_Number", "")), new NamedContentModelEntity(XName.Get("DOCUMENT_REFERENCE", "")), new NamedContentModelEntity(XName.Get("REASON_CODE", "")), new NamedContentModelEntity(XName.Get("LDS", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, DOCUMENT_REFERENCE*, REASON_CODE, LDS*)
                            /// </para>
                            /// </summary>
                            public DCFLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, DOCUMENT_REFERENCE*, REASON_CODE, LDS*)
                            /// </para>
                            /// </summary>
                            public int Line_Sequence_Number
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Line_Sequence_Number", ""));
                                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Line_Sequence_Number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, DOCUMENT_REFERENCE*, REASON_CODE, LDS*)
                            /// </para>
                            /// </summary>
                            public IList<File.InterchangeLocalType.HeaderLocalType.MESSAGE_HEADERLocalType.Message_DetailLocalType.DCFLocalType.DOCUMENT_REFERENCELocalType> DOCUMENT_REFERENCE
                            {
                                get
                                {
                                    if ((this.DOCUMENT_REFERENCEField == null))
                                    {
                                        this.DOCUMENT_REFERENCEField = new XTypedList<DOCUMENT_REFERENCELocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("DOCUMENT_REFERENCE", ""));
                                    }
                                    return this.DOCUMENT_REFERENCEField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.DOCUMENT_REFERENCEField = null;
                                    }
                                    else
                                    {
                                        if ((this.DOCUMENT_REFERENCEField == null))
                                        {
                                            this.DOCUMENT_REFERENCEField = XTypedList<DOCUMENT_REFERENCELocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DOCUMENT_REFERENCE", ""));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<DOCUMENT_REFERENCELocalType>(this.DOCUMENT_REFERENCEField, value);
                                        }
                                    }
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, DOCUMENT_REFERENCE*, REASON_CODE, LDS*)
                            /// </para>
                            /// </summary>
                            public REASON_CODELocalType REASON_CODE
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("REASON_CODE", ""));
                                    return ((REASON_CODELocalType)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("REASON_CODE", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, DOCUMENT_REFERENCE*, REASON_CODE, LDS*)
                            /// </para>
                            /// </summary>
                            public IList<File.InterchangeLocalType.HeaderLocalType.MESSAGE_HEADERLocalType.Message_DetailLocalType.DCFLocalType.LDSLocalType> LDS
                            {
                                get
                                {
                                    if ((this.LDSField == null))
                                    {
                                        this.LDSField = new XTypedList<LDSLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("LDS", ""));
                                    }
                                    return this.LDSField;
                                }
                                set
                                {
                                    if ((value == null))
                                    {
                                        this.LDSField = null;
                                    }
                                    else
                                    {
                                        if ((this.LDSField == null))
                                        {
                                            this.LDSField = XTypedList<LDSLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LDS", ""));
                                        }
                                        else
                                        {
                                            XTypedServices.SetList<LDSLocalType>(this.LDSField, value);
                                        }
                                    }
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("DCF", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<DCFLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Line_Sequence_Number", ""), typeof(int));
                                localElementDictionary.Add(XName.Get("DOCUMENT_REFERENCE", ""), typeof(DOCUMENT_REFERENCELocalType));
                                localElementDictionary.Add(XName.Get("REASON_CODE", ""), typeof(REASON_CODELocalType));
                                localElementDictionary.Add(XName.Get("LDS", ""), typeof(LDSLocalType));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Reference_number, Date, Document_type)
                            /// </para>
                            /// </summary>
                            public partial class DOCUMENT_REFERENCELocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator DOCUMENT_REFERENCELocalType(XElement xe) { return XTypedServices.ToXTypedElement<DOCUMENT_REFERENCELocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static DOCUMENT_REFERENCELocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Reference_number", "")), new NamedContentModelEntity(XName.Get("Date", "")), new NamedContentModelEntity(XName.Get("Document_type", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Reference_number, Date, Document_type)
                                /// </para>
                                /// </summary>
                                public DOCUMENT_REFERENCELocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Reference_number, Date, Document_type)
                                /// </para>
                                /// </summary>
                                public string Reference_number
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Reference_number", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Reference_number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Reference_number, Date, Document_type)
                                /// </para>
                                /// </summary>
                                public string Date
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Date", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Reference_number, Date, Document_type)
                                /// </para>
                                /// </summary>
                                public string Document_type
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Document_type", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Document_type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("DOCUMENT_REFERENCE", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<DOCUMENT_REFERENCELocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("Reference_number", ""), typeof(int));
                                    localElementDictionary.Add(XName.Get("Date", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("Document_type", ""), typeof(string));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Reason_Code)
                            /// </para>
                            /// </summary>
                            public partial class REASON_CODELocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator REASON_CODELocalType(XElement xe) { return XTypedServices.ToXTypedElement<REASON_CODELocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static REASON_CODELocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Reason_Code", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Reason_Code)
                                /// </para>
                                /// </summary>
                                public REASON_CODELocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Reason_Code)
                                /// </para>
                                /// </summary>
                                public string Reason_Code
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Reason_Code", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Reason_Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("REASON_CODE", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<REASON_CODELocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("Reason_Code", ""), typeof(string));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, Net_Extended_Line_Cost_Excluding_Vat, Vat_Rate_Percentage, Vat_Rate_Code, PRODUCT_NUMBER, QUANTITY_DETAILS, COST_PRICE)
                            /// </para>
                            /// </summary>
                            public partial class LDSLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator LDSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LDSLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static LDSLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Line_Sequence_Number", "")), new NamedContentModelEntity(XName.Get("Net_Extended_Line_Cost_Excluding_Vat", "")), new NamedContentModelEntity(XName.Get("Vat_Rate_Percentage", "")), new NamedContentModelEntity(XName.Get("Vat_Rate_Code", "")), new NamedContentModelEntity(XName.Get("PRODUCT_NUMBER", "")), new NamedContentModelEntity(XName.Get("QUANTITY_DETAILS", "")), new NamedContentModelEntity(XName.Get("COST_PRICE", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Line_Sequence_Number, Net_Extended_Line_Cost_Excluding_Vat, Vat_Rate_Percentage, Vat_Rate_Code, PRODUCT_NUMBER, QUANTITY_DETAILS, COST_PRICE)
                                /// </para>
                                /// </summary>
                                public LDSLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Line_Sequence_Number, Net_Extended_Line_Cost_Excluding_Vat, Vat_Rate_Percentage, Vat_Rate_Code, PRODUCT_NUMBER, QUANTITY_DETAILS, COST_PRICE)
                                /// </para>
                                /// </summary>
                                public int Line_Sequence_Number
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Line_Sequence_Number", ""));
                                        return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Line_Sequence_Number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Line_Sequence_Number, Net_Extended_Line_Cost_Excluding_Vat, Vat_Rate_Percentage, Vat_Rate_Code, PRODUCT_NUMBER, QUANTITY_DETAILS, COST_PRICE)
                                /// </para>
                                /// </summary>
                                public decimal Net_Extended_Line_Cost_Excluding_Vat
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Net_Extended_Line_Cost_Excluding_Vat", ""));
                                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Net_Extended_Line_Cost_Excluding_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Line_Sequence_Number, Net_Extended_Line_Cost_Excluding_Vat, Vat_Rate_Percentage, Vat_Rate_Code, PRODUCT_NUMBER, QUANTITY_DETAILS, COST_PRICE)
                                /// </para>
                                /// </summary>
                                public decimal Vat_Rate_Percentage
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Vat_Rate_Percentage", ""));
                                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Vat_Rate_Percentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Line_Sequence_Number, Net_Extended_Line_Cost_Excluding_Vat, Vat_Rate_Percentage, Vat_Rate_Code, PRODUCT_NUMBER, QUANTITY_DETAILS, COST_PRICE)
                                /// </para>
                                /// </summary>
                                public string Vat_Rate_Code
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("Vat_Rate_Code", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("Vat_Rate_Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Line_Sequence_Number, Net_Extended_Line_Cost_Excluding_Vat, Vat_Rate_Percentage, Vat_Rate_Code, PRODUCT_NUMBER, QUANTITY_DETAILS, COST_PRICE)
                                /// </para>
                                /// </summary>
                                public PRODUCT_NUMBERLocalType PRODUCT_NUMBER
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("PRODUCT_NUMBER", ""));
                                        return ((PRODUCT_NUMBERLocalType)(x));
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("PRODUCT_NUMBER", ""), value);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Line_Sequence_Number, Net_Extended_Line_Cost_Excluding_Vat, Vat_Rate_Percentage, Vat_Rate_Code, PRODUCT_NUMBER, QUANTITY_DETAILS, COST_PRICE)
                                /// </para>
                                /// </summary>
                                public QUANTITY_DETAILSLocalType QUANTITY_DETAILS
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("QUANTITY_DETAILS", ""));
                                        return ((QUANTITY_DETAILSLocalType)(x));
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("QUANTITY_DETAILS", ""), value);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (Line_Sequence_Number, Net_Extended_Line_Cost_Excluding_Vat, Vat_Rate_Percentage, Vat_Rate_Code, PRODUCT_NUMBER, QUANTITY_DETAILS, COST_PRICE)
                                /// </para>
                                /// </summary>
                                public COST_PRICELocalType COST_PRICE
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("COST_PRICE", ""));
                                        return ((COST_PRICELocalType)(x));
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("COST_PRICE", ""), value);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("LDS", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<LDSLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("Line_Sequence_Number", ""), typeof(int));
                                    localElementDictionary.Add(XName.Get("Net_Extended_Line_Cost_Excluding_Vat", ""), typeof(float));
                                    localElementDictionary.Add(XName.Get("Vat_Rate_Percentage", ""), typeof(float));
                                    localElementDictionary.Add(XName.Get("Vat_Rate_Code", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("PRODUCT_NUMBER", ""), typeof(PRODUCT_NUMBERLocalType));
                                    localElementDictionary.Add(XName.Get("QUANTITY_DETAILS", ""), typeof(QUANTITY_DETAILSLocalType));
                                    localElementDictionary.Add(XName.Get("COST_PRICE", ""), typeof(COST_PRICELocalType));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (EAN_product_number, Supplier_product_code, Product_description)
                                /// </para>
                                /// </summary>
                                public partial class PRODUCT_NUMBERLocalType : XTypedElement, IXMetaData
                                {

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;

                                    public static explicit operator PRODUCT_NUMBERLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PRODUCT_NUMBERLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                    static PRODUCT_NUMBERLocalType()
                                    {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("EAN_product_number", "")), new NamedContentModelEntity(XName.Get("Supplier_product_code", "")), new NamedContentModelEntity(XName.Get("Product_description", "")));
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (EAN_product_number, Supplier_product_code, Product_description)
                                    /// </para>
                                    /// </summary>
                                    public PRODUCT_NUMBERLocalType()
                                    {
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: required
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (EAN_product_number, Supplier_product_code, Product_description)
                                    /// </para>
                                    /// </summary>
                                    public long EAN_product_number
                                    {
                                        get
                                        {
                                            XElement x = this.GetElement(XName.Get("EAN_product_number", ""));
                                            return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                        }
                                        set
                                        {
                                            this.SetElement(XName.Get("EAN_product_number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: required
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (EAN_product_number, Supplier_product_code, Product_description)
                                    /// </para>
                                    /// </summary>
                                    public String Supplier_product_code
                                    {
                                        get
                                        {
                                            XElement x = this.GetElement(XName.Get("Supplier_product_code", ""));
                                            return XTypedServices.ParseValue<String>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetElement(XName.Get("Supplier_product_code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: required
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (EAN_product_number, Supplier_product_code, Product_description)
                                    /// </para>
                                    /// </summary>
                                    public string Product_description
                                    {
                                        get
                                        {
                                            XElement x = this.GetElement(XName.Get("Product_description", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetElement(XName.Get("Product_description", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                    {
                                        get
                                        {
                                            return localElementDictionary;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName
                                    {
                                        get
                                        {
                                            return XName.Get("PRODUCT_NUMBER", "");
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin
                                    {
                                        get
                                        {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager
                                    {
                                        get
                                        {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }

                                    public override XTypedElement Clone()
                                    {
                                        return XTypedServices.CloneXTypedElement<PRODUCT_NUMBERLocalType>(this);
                                    }

                                    private static void BuildElementDictionary()
                                    {
                                        localElementDictionary.Add(XName.Get("EAN_product_number", ""), typeof(long));
                                        localElementDictionary.Add(XName.Get("Supplier_product_code", ""), typeof(int));
                                        localElementDictionary.Add(XName.Get("Product_description", ""), typeof(string));
                                    }

                                    ContentModelEntity IXMetaData.GetContentModel()
                                    {
                                        return contentModel;
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Number_of_units_involved, Unit_of_measure)
                                /// </para>
                                /// </summary>
                                public partial class QUANTITY_DETAILSLocalType : XTypedElement, IXMetaData
                                {

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;

                                    public static explicit operator QUANTITY_DETAILSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<QUANTITY_DETAILSLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                    static QUANTITY_DETAILSLocalType()
                                    {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Number_of_units_involved", "")), new NamedContentModelEntity(XName.Get("Unit_of_measure", "")));
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (Number_of_units_involved, Unit_of_measure)
                                    /// </para>
                                    /// </summary>
                                    public QUANTITY_DETAILSLocalType()
                                    {
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: required
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (Number_of_units_involved, Unit_of_measure)
                                    /// </para>
                                    /// </summary>
                                    public float Number_of_units_involved
                                    {
                                        get
                                        {
                                            XElement x = this.GetElement(XName.Get("Number_of_units_involved", ""));
                                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                        }
                                        set
                                        {
                                            this.SetElement(XName.Get("Number_of_units_involved", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                        }
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: required
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (Number_of_units_involved, Unit_of_measure)
                                    /// </para>
                                    /// </summary>
                                    public string Unit_of_measure
                                    {
                                        get
                                        {
                                            XElement x = this.GetElement(XName.Get("Unit_of_measure", ""));
                                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                        set
                                        {
                                            this.SetElement(XName.Get("Unit_of_measure", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                    {
                                        get
                                        {
                                            return localElementDictionary;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName
                                    {
                                        get
                                        {
                                            return XName.Get("QUANTITY_DETAILS", "");
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin
                                    {
                                        get
                                        {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager
                                    {
                                        get
                                        {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }

                                    public override XTypedElement Clone()
                                    {
                                        return XTypedServices.CloneXTypedElement<QUANTITY_DETAILSLocalType>(this);
                                    }

                                    private static void BuildElementDictionary()
                                    {
                                        localElementDictionary.Add(XName.Get("Number_of_units_involved", ""), typeof(float));
                                        localElementDictionary.Add(XName.Get("Unit_of_measure", ""), typeof(string));
                                    }

                                    ContentModelEntity IXMetaData.GetContentModel()
                                    {
                                        return contentModel;
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (Cost_price)
                                /// </para>
                                /// </summary>
                                public partial class COST_PRICELocalType : XTypedElement, IXMetaData
                                {

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    private static ContentModelEntity contentModel;

                                    public static explicit operator COST_PRICELocalType(XElement xe) { return XTypedServices.ToXTypedElement<COST_PRICELocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                    static COST_PRICELocalType()
                                    {
                                        BuildElementDictionary();
                                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Cost_price", "")));
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Regular expression: (Cost_price)
                                    /// </para>
                                    /// </summary>
                                    public COST_PRICELocalType()
                                    {
                                    }

                                    /// <summary>
                                    /// <para>
                                    /// Occurrence: required
                                    /// </para>
                                    /// <para>
                                    /// Regular expression: (Cost_price)
                                    /// </para>
                                    /// </summary>
                                    public float Cost_price
                                    {
                                        get
                                        {
                                            XElement x = this.GetElement(XName.Get("Cost_price", ""));
                                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                        }
                                        set
                                        {
                                            this.SetElement(XName.Get("Cost_price", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                    {
                                        get
                                        {
                                            return localElementDictionary;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    XName IXMetaData.SchemaName
                                    {
                                        get
                                        {
                                            return XName.Get("COST_PRICE", "");
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    SchemaOrigin IXMetaData.TypeOrigin
                                    {
                                        get
                                        {
                                            return SchemaOrigin.Fragment;
                                        }
                                    }

                                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                    ILinqToXsdTypeManager IXMetaData.TypeManager
                                    {
                                        get
                                        {
                                            return LinqToXsdTypeManager.Instance;
                                        }
                                    }

                                    public override XTypedElement Clone()
                                    {
                                        return XTypedServices.CloneXTypedElement<COST_PRICELocalType>(this);
                                    }

                                    private static void BuildElementDictionary()
                                    {
                                        localElementDictionary.Add(XName.Get("Cost_price", ""), typeof(float));
                                    }

                                    ContentModelEntity IXMetaData.GetContentModel()
                                    {
                                        return contentModel;
                                    }
                                }
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (line_sequence_number, Vat_Rate_Percentage, Vat_Rate_Code, Number_Of_Item_Lines, Line_Sub_Total_Amount_Excluding_Vat, Vat_Amount_Payable)
                        /// </para>
                        /// </summary>
                        public partial class VRSLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator VRSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VRSLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static VRSLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("line_sequence_number", "")), new NamedContentModelEntity(XName.Get("Vat_Rate_Percentage", "")), new NamedContentModelEntity(XName.Get("Vat_Rate_Code", "")), new NamedContentModelEntity(XName.Get("Number_Of_Item_Lines", "")), new NamedContentModelEntity(XName.Get("Line_Sub_Total_Amount_Excluding_Vat", "")), new NamedContentModelEntity(XName.Get("Vat_Amount_Payable", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (line_sequence_number, Vat_Rate_Percentage, Vat_Rate_Code, Number_Of_Item_Lines, Line_Sub_Total_Amount_Excluding_Vat, Vat_Amount_Payable)
                            /// </para>
                            /// </summary>
                            public VRSLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (line_sequence_number, Vat_Rate_Percentage, Vat_Rate_Code, Number_Of_Item_Lines, Line_Sub_Total_Amount_Excluding_Vat, Vat_Amount_Payable)
                            /// </para>
                            /// </summary>
                            public int line_sequence_number
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("line_sequence_number", ""));
                                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("line_sequence_number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (line_sequence_number, Vat_Rate_Percentage, Vat_Rate_Code, Number_Of_Item_Lines, Line_Sub_Total_Amount_Excluding_Vat, Vat_Amount_Payable)
                            /// </para>
                            /// </summary>
                            public float Vat_Rate_Percentage
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Vat_Rate_Percentage", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Vat_Rate_Percentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (line_sequence_number, Vat_Rate_Percentage, Vat_Rate_Code, Number_Of_Item_Lines, Line_Sub_Total_Amount_Excluding_Vat, Vat_Amount_Payable)
                            /// </para>
                            /// </summary>
                            public string Vat_Rate_Code
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Vat_Rate_Code", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Vat_Rate_Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (line_sequence_number, Vat_Rate_Percentage, Vat_Rate_Code, Number_Of_Item_Lines, Line_Sub_Total_Amount_Excluding_Vat, Vat_Amount_Payable)
                            /// </para>
                            /// </summary>
                            public sbyte Number_Of_Item_Lines
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Number_Of_Item_Lines", ""));
                                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Number_Of_Item_Lines", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (line_sequence_number, Vat_Rate_Percentage, Vat_Rate_Code, Number_Of_Item_Lines, Line_Sub_Total_Amount_Excluding_Vat, Vat_Amount_Payable)
                            /// </para>
                            /// </summary>
                            public float Line_Sub_Total_Amount_Excluding_Vat
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Line_Sub_Total_Amount_Excluding_Vat", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Line_Sub_Total_Amount_Excluding_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (line_sequence_number, Vat_Rate_Percentage, Vat_Rate_Code, Number_Of_Item_Lines, Line_Sub_Total_Amount_Excluding_Vat, Vat_Amount_Payable)
                            /// </para>
                            /// </summary>
                            public float Vat_Amount_Payable
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Vat_Amount_Payable", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Vat_Amount_Payable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("VRS", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<VRSLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("line_sequence_number", ""), typeof(int));
                                localElementDictionary.Add(XName.Get("Vat_Rate_Percentage", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Vat_Rate_Code", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("Number_Of_Item_Lines", ""), typeof(sbyte));
                                localElementDictionary.Add(XName.Get("Line_Sub_Total_Amount_Excluding_Vat", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Vat_Amount_Payable", ""), typeof(float));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                        /// </para>
                        /// </summary>
                        public partial class DOTLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator DOTLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DOTLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static DOTLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Lines_Net_Total_Cost_Excluding_Vat", "")), new NamedContentModelEntity(XName.Get("Total_Vat_Amount_Payable", "")), new NamedContentModelEntity(XName.Get("Total_Amount_Payable_Including_Vat", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                            /// </para>
                            /// </summary>
                            public DOTLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Lines_Net_Total_Cost_Excluding_Vat
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Lines_Net_Total_Cost_Excluding_Vat", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Lines_Net_Total_Cost_Excluding_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Total_Vat_Amount_Payable
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Total_Vat_Amount_Payable", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Total_Vat_Amount_Payable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Total_Amount_Payable_Including_Vat
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Total_Amount_Payable_Including_Vat", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Total_Amount_Payable_Including_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("DOT", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<DOTLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Lines_Net_Total_Cost_Excluding_Vat", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Total_Vat_Amount_Payable", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Total_Amount_Payable_Including_Vat", ""), typeof(float));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Line_Sequence_Number, Vat_Rate_Percentage, Vat_Rate_Code, Batch_Sub_Total_Amount_Excluding_Vat, Batch_Sub_Total_Of_Vat, Batch_Sub_Total_Amount_Including_Vat)
                        /// </para>
                        /// </summary>
                        public partial class VRTLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator VRTLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VRTLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static VRTLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Line_Sequence_Number", "")), new NamedContentModelEntity(XName.Get("Vat_Rate_Percentage", "")), new NamedContentModelEntity(XName.Get("Vat_Rate_Code", "")), new NamedContentModelEntity(XName.Get("Batch_Sub_Total_Amount_Excluding_Vat", "")), new NamedContentModelEntity(XName.Get("Batch_Sub_Total_Of_Vat", "")), new NamedContentModelEntity(XName.Get("Batch_Sub_Total_Amount_Including_Vat", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, Vat_Rate_Percentage, Vat_Rate_Code, Batch_Sub_Total_Amount_Excluding_Vat, Batch_Sub_Total_Of_Vat, Batch_Sub_Total_Amount_Including_Vat)
                            /// </para>
                            /// </summary>
                            public VRTLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, Vat_Rate_Percentage, Vat_Rate_Code, Batch_Sub_Total_Amount_Excluding_Vat, Batch_Sub_Total_Of_Vat, Batch_Sub_Total_Amount_Including_Vat)
                            /// </para>
                            /// </summary>
                            public int Line_Sequence_Number
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Line_Sequence_Number", ""));
                                    return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Line_Sequence_Number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, Vat_Rate_Percentage, Vat_Rate_Code, Batch_Sub_Total_Amount_Excluding_Vat, Batch_Sub_Total_Of_Vat, Batch_Sub_Total_Amount_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Vat_Rate_Percentage
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Vat_Rate_Percentage", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Vat_Rate_Percentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, Vat_Rate_Percentage, Vat_Rate_Code, Batch_Sub_Total_Amount_Excluding_Vat, Batch_Sub_Total_Of_Vat, Batch_Sub_Total_Amount_Including_Vat)
                            /// </para>
                            /// </summary>
                            public string Vat_Rate_Code
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Vat_Rate_Code", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Vat_Rate_Code", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, Vat_Rate_Percentage, Vat_Rate_Code, Batch_Sub_Total_Amount_Excluding_Vat, Batch_Sub_Total_Of_Vat, Batch_Sub_Total_Amount_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Batch_Sub_Total_Amount_Excluding_Vat
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Batch_Sub_Total_Amount_Excluding_Vat", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Batch_Sub_Total_Amount_Excluding_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, Vat_Rate_Percentage, Vat_Rate_Code, Batch_Sub_Total_Amount_Excluding_Vat, Batch_Sub_Total_Of_Vat, Batch_Sub_Total_Amount_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Batch_Sub_Total_Of_Vat
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Batch_Sub_Total_Of_Vat", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Batch_Sub_Total_Of_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Line_Sequence_Number, Vat_Rate_Percentage, Vat_Rate_Code, Batch_Sub_Total_Amount_Excluding_Vat, Batch_Sub_Total_Of_Vat, Batch_Sub_Total_Amount_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Batch_Sub_Total_Amount_Including_Vat
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Batch_Sub_Total_Amount_Including_Vat", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Batch_Sub_Total_Amount_Including_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("VRT", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<VRTLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Line_Sequence_Number", ""), typeof(int));
                                localElementDictionary.Add(XName.Get("Vat_Rate_Percentage", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Vat_Rate_Code", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("Batch_Sub_Total_Amount_Excluding_Vat", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Batch_Sub_Total_Of_Vat", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Batch_Sub_Total_Amount_Including_Vat", ""), typeof(float));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                        /// </para>
                        /// </summary>
                        public partial class MSYLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator MSYLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MSYLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static MSYLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Lines_Net_Total_Cost_Excluding_Vat", "")), new NamedContentModelEntity(XName.Get("Total_Vat_Amount_Payable", "")), new NamedContentModelEntity(XName.Get("Total_Amount_Payable_Including_Vat", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                            /// </para>
                            /// </summary>
                            public MSYLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Lines_Net_Total_Cost_Excluding_Vat
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Lines_Net_Total_Cost_Excluding_Vat", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Lines_Net_Total_Cost_Excluding_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Total_Vat_Amount_Payable
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Total_Vat_Amount_Payable", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Total_Vat_Amount_Payable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Lines_Net_Total_Cost_Excluding_Vat, Total_Vat_Amount_Payable, Total_Amount_Payable_Including_Vat)
                            /// </para>
                            /// </summary>
                            public float Total_Amount_Payable_Including_Vat
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Total_Amount_Payable_Including_Vat", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Total_Amount_Payable_Including_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("MSY", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<MSYLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Lines_Net_Total_Cost_Excluding_Vat", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Total_Vat_Amount_Payable", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Total_Amount_Payable_Including_Vat", ""), typeof(float));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Batch_Total_Amount_Excluding_Vat, Batch_Total_Of_Vat_Amount, Batch_Total_Amount_Payable_Including)
                        /// </para>
                        /// </summary>
                        public partial class BTTLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator BTTLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BTTLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static BTTLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Batch_Total_Amount_Excluding_Vat", "")), new NamedContentModelEntity(XName.Get("Batch_Total_Of_Vat_Amount", "")), new NamedContentModelEntity(XName.Get("Batch_Total_Amount_Payable_Including", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Batch_Total_Amount_Excluding_Vat, Batch_Total_Of_Vat_Amount, Batch_Total_Amount_Payable_Including)
                            /// </para>
                            /// </summary>
                            public BTTLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Batch_Total_Amount_Excluding_Vat, Batch_Total_Of_Vat_Amount, Batch_Total_Amount_Payable_Including)
                            /// </para>
                            /// </summary>
                            public float Batch_Total_Amount_Excluding_Vat
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Batch_Total_Amount_Excluding_Vat", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Batch_Total_Amount_Excluding_Vat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Batch_Total_Amount_Excluding_Vat, Batch_Total_Of_Vat_Amount, Batch_Total_Amount_Payable_Including)
                            /// </para>
                            /// </summary>
                            public float Batch_Total_Of_Vat_Amount
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Batch_Total_Of_Vat_Amount", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Batch_Total_Of_Vat_Amount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Batch_Total_Amount_Excluding_Vat, Batch_Total_Of_Vat_Amount, Batch_Total_Amount_Payable_Including)
                            /// </para>
                            /// </summary>
                            public float Batch_Total_Amount_Payable_Including
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Batch_Total_Amount_Payable_Including", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Batch_Total_Amount_Payable_Including", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("BTT", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<BTTLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Batch_Total_Amount_Excluding_Vat", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Batch_Total_Of_Vat_Amount", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("Batch_Total_Amount_Payable_Including", ""), typeof(float));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }
                }
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("File", ""), typeof(File));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("File", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public File File { get { return rootObject as File; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(File root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public File File { get { return rootObject as File; } }

        private XRoot()
        {
        }

        public XRoot(File root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}