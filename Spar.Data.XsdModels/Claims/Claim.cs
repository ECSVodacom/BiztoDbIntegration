//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace Spar.Data.XsdModels.Claims
{


    /// <summary>
    /// <para>
    /// Regular expression: (Claim*)
    /// </para>
    /// </summary>
    public partial class Claims : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ClaimLocalType> ClaimField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator Claims(XElement xe) { return XTypedServices.ToXTypedElement<Claims>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static Claims()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Claim", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Claim*)
        /// </para>
        /// </summary>
        public Claims()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Claim*)
        /// </para>
        /// </summary>
        public IList<Claims.ClaimLocalType> Claim
        {
            get
            {
                if ((this.ClaimField == null))
                {
                    this.ClaimField = new XTypedList<ClaimLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Claim", ""));
                }
                return this.ClaimField;
            }
            set
            {
                if ((value == null))
                {
                    this.ClaimField = null;
                }
                else
                {
                    if ((this.ClaimField == null))
                    {
                        this.ClaimField = XTypedList<ClaimLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Claim", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<ClaimLocalType>(this.ClaimField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("Claims", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Claims Load(string xmlFile)
        {
            return XTypedServices.Load<Claims>(xmlFile);
        }

        public static Claims Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Claims>(xmlFile);
        }

        public static Claims Parse(string xml)
        {
            return XTypedServices.Parse<Claims>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Claims>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Claim", ""), typeof(ClaimLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
        /// </para>
        /// </summary>
        public partial class ClaimLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CLNLocalType> CLNField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator ClaimLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ClaimLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static ClaimLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "")), new NamedContentModelEntity(XName.Get("UNH", "")), new NamedContentModelEntity(XName.Get("SAP", "")), new NamedContentModelEntity(XName.Get("SDP", "")), new NamedContentModelEntity(XName.Get("CLO", "")), new NamedContentModelEntity(XName.Get("REF", "")), new NamedContentModelEntity(XName.Get("CRF", "")), new NamedContentModelEntity(XName.Get("CLN", "")), new NamedContentModelEntity(XName.Get("CTR", "")), new NamedContentModelEntity(XName.Get("CMS", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public ClaimLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public HeaderLocalType Header
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Header", ""));
                    return ((HeaderLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("Header", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public UNHLocalType UNH
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("UNH", ""));
                    return ((UNHLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("UNH", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public SAPLocalType SAP
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("SAP", ""));
                    return ((SAPLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("SAP", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public SDPLocalType SDP
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("SDP", ""));
                    return ((SDPLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("SDP", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public CLOLocalType CLO
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CLO", ""));
                    return ((CLOLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("CLO", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public @REFLocalType @REF
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("REF", ""));
                    return ((@REFLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("REF", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public CRFLocalType CRF
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CRF", ""));
                    return ((CRFLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("CRF", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public IList<Claims.ClaimLocalType.CLNLocalType> CLN
            {
                get
                {
                    if ((this.CLNField == null))
                    {
                        this.CLNField = new XTypedList<CLNLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("CLN", ""));
                    }
                    return this.CLNField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.CLNField = null;
                    }
                    else
                    {
                        if ((this.CLNField == null))
                        {
                            this.CLNField = XTypedList<CLNLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CLN", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<CLNLocalType>(this.CLNField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public CTRLocalType CTR
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CTR", ""));
                    return ((CTRLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("CTR", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header, UNH, SAP, SDP?, CLO, @REF, CRF, CLN*, CTR, CMS)
            /// </para>
            /// </summary>
            public CMSLocalType CMS
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CMS", ""));
                    return ((CMSLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("CMS", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Claim", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<ClaimLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("Header", ""), typeof(HeaderLocalType));
                localElementDictionary.Add(XName.Get("UNH", ""), typeof(UNHLocalType));
                localElementDictionary.Add(XName.Get("SAP", ""), typeof(SAPLocalType));
                localElementDictionary.Add(XName.Get("SDP", ""), typeof(SDPLocalType));
                localElementDictionary.Add(XName.Get("CLO", ""), typeof(CLOLocalType));
                localElementDictionary.Add(XName.Get("REF", ""), typeof(@REFLocalType));
                localElementDictionary.Add(XName.Get("CRF", ""), typeof(CRFLocalType));
                localElementDictionary.Add(XName.Get("CLN", ""), typeof(CLNLocalType));
                localElementDictionary.Add(XName.Get("CTR", ""), typeof(CTRLocalType));
                localElementDictionary.Add(XName.Get("CMS", ""), typeof(CMSLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Sender, Receiver, InterchangeNo, Date)
            /// </para>
            /// </summary>
            public partial class HeaderLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator HeaderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HeaderLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static HeaderLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Sender", "")), new NamedContentModelEntity(XName.Get("Receiver", "")), new NamedContentModelEntity(XName.Get("InterchangeNo", "")), new NamedContentModelEntity(XName.Get("Date", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date)
                /// </para>
                /// </summary>
                public HeaderLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date)
                /// </para>
                /// </summary>
                public string Sender
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Sender", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Sender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date)
                /// </para>
                /// </summary>
                public string Receiver
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Receiver", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Receiver", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date)
                /// </para>
                /// </summary>
                public string InterchangeNo
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("InterchangeNo", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("InterchangeNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date)
                /// </para>
                /// </summary>
                public System.DateTime Date
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Date", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("Header", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<HeaderLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("Sender", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("Receiver", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("InterchangeNo", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("Date", ""), typeof(System.DateTime));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (MessageReferenceNumber, MessageIdentifier)
            /// </para>
            /// </summary>
            public partial class UNHLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator UNHLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UNHLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static UNHLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageReferenceNumber", "")), new NamedContentModelEntity(XName.Get("MessageIdentifier", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (MessageReferenceNumber, MessageIdentifier)
                /// </para>
                /// </summary>
                public UNHLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (MessageReferenceNumber, MessageIdentifier)
                /// </para>
                /// </summary>
                public string MessageReferenceNumber
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("MessageReferenceNumber", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("MessageReferenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (MessageReferenceNumber, MessageIdentifier)
                /// </para>
                /// </summary>
                public MessageIdentifierLocalType MessageIdentifier
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("MessageIdentifier", ""));
                        return ((MessageIdentifierLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("MessageIdentifier", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("UNH", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<UNHLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("MessageReferenceNumber", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("MessageIdentifier", ""), typeof(MessageIdentifierLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                /// </para>
                /// </summary>
                public partial class MessageIdentifierLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator MessageIdentifierLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MessageIdentifierLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static MessageIdentifierLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageType", "")), new NamedContentModelEntity(XName.Get("MessageVersionNumber", "")), new NamedContentModelEntity(XName.Get("MessageReleaseNumber", "")), new NamedContentModelEntity(XName.Get("ControllingAgency", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                    /// </para>
                    /// </summary>
                    public MessageIdentifierLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                    /// </para>
                    /// </summary>
                    public string MessageType
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("MessageType", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("MessageType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                    /// </para>
                    /// </summary>
                    public string MessageVersionNumber
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("MessageVersionNumber", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("MessageVersionNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                    /// </para>
                    /// </summary>
                    public string MessageReleaseNumber
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("MessageReleaseNumber", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("MessageReleaseNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                    /// </para>
                    /// </summary>
                    public string ControllingAgency
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ControllingAgency", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ControllingAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("MessageIdentifier", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<MessageIdentifierLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("MessageType", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("MessageVersionNumber", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("MessageReleaseNumber", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ControllingAgency", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (SupplierAccountingPoint)
            /// </para>
            /// </summary>
            public partial class SAPLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator SAPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SAPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static SAPLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SupplierAccountingPoint", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (SupplierAccountingPoint)
                /// </para>
                /// </summary>
                public SAPLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (SupplierAccountingPoint)
                /// </para>
                /// </summary>
                public string SupplierAccountingPoint
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("SupplierAccountingPoint", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("SupplierAccountingPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("SAP", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<SAPLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("SupplierAccountingPoint", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (SupplierDespatchPoint)
            /// </para>
            /// </summary>
            public partial class SDPLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator SDPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SDPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static SDPLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SupplierDespatchPoint", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (SupplierDespatchPoint)
                /// </para>
                /// </summary>
                public SDPLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (SupplierDespatchPoint)
                /// </para>
                /// </summary>
                public string SupplierDespatchPoint
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("SupplierDespatchPoint", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("SupplierDespatchPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("SDP", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<SDPLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("SupplierDespatchPoint", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (CustomerDeliveryPoint, CustomerOrderPoint, CustomerDeliveryPointName, CustomerDeliveryPointAddress?, AlternateInvoicePoint)
            /// </para>
            /// </summary>
            public partial class CLOLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator CLOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CLOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static CLOLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CustomerDeliveryPoint", "")), new NamedContentModelEntity(XName.Get("CustomerOrderPoint", "")), new NamedContentModelEntity(XName.Get("CustomerDeliveryPointName", "")), new NamedContentModelEntity(XName.Get("CustomerDeliveryPointAddress", "")), new NamedContentModelEntity(XName.Get("AlternateInvoicePoint", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (CustomerDeliveryPoint, CustomerOrderPoint, CustomerDeliveryPointName, CustomerDeliveryPointAddress?, AlternateInvoicePoint)
                /// </para>
                /// </summary>
                public CLOLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CustomerDeliveryPoint, CustomerOrderPoint, CustomerDeliveryPointName, CustomerDeliveryPointAddress?, AlternateInvoicePoint)
                /// </para>
                /// </summary>
                public string CustomerDeliveryPoint
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CustomerDeliveryPoint", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CustomerDeliveryPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CustomerDeliveryPoint, CustomerOrderPoint, CustomerDeliveryPointName, CustomerDeliveryPointAddress?, AlternateInvoicePoint)
                /// </para>
                /// </summary>
                public string CustomerOrderPoint
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CustomerOrderPoint", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CustomerOrderPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CustomerDeliveryPoint, CustomerOrderPoint, CustomerDeliveryPointName, CustomerDeliveryPointAddress?, AlternateInvoicePoint)
                /// </para>
                /// </summary>
                public string CustomerDeliveryPointName
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CustomerDeliveryPointName", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CustomerDeliveryPointName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (CustomerDeliveryPoint, CustomerOrderPoint, CustomerDeliveryPointName, CustomerDeliveryPointAddress?, AlternateInvoicePoint)
                /// </para>
                /// </summary>
                public CustomerDeliveryPointAddressLocalType CustomerDeliveryPointAddress
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CustomerDeliveryPointAddress", ""));
                        return ((CustomerDeliveryPointAddressLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CustomerDeliveryPointAddress", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CustomerDeliveryPoint, CustomerOrderPoint, CustomerDeliveryPointName, CustomerDeliveryPointAddress?, AlternateInvoicePoint)
                /// </para>
                /// </summary>
                public string AlternateInvoicePoint
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("AlternateInvoicePoint", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("AlternateInvoicePoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("CLO", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<CLOLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("CustomerDeliveryPoint", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CustomerOrderPoint", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CustomerDeliveryPointName", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CustomerDeliveryPointAddress", ""), typeof(CustomerDeliveryPointAddressLocalType));
                    localElementDictionary.Add(XName.Get("AlternateInvoicePoint", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (AddressLine1?, AddressLine2?, AddressLine3?, AddressLine4?)
                /// </para>
                /// </summary>
                public partial class CustomerDeliveryPointAddressLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CustomerDeliveryPointAddressLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CustomerDeliveryPointAddressLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CustomerDeliveryPointAddressLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("AddressLine1", "")), new NamedContentModelEntity(XName.Get("AddressLine2", "")), new NamedContentModelEntity(XName.Get("AddressLine3", "")), new NamedContentModelEntity(XName.Get("AddressLine4", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (AddressLine1?, AddressLine2?, AddressLine3?, AddressLine4?)
                    /// </para>
                    /// </summary>
                    public CustomerDeliveryPointAddressLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (AddressLine1?, AddressLine2?, AddressLine3?, AddressLine4?)
                    /// </para>
                    /// </summary>
                    public string AddressLine1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("AddressLine1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("AddressLine1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (AddressLine1?, AddressLine2?, AddressLine3?, AddressLine4?)
                    /// </para>
                    /// </summary>
                    public string AddressLine2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("AddressLine2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("AddressLine2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (AddressLine1?, AddressLine2?, AddressLine3?, AddressLine4?)
                    /// </para>
                    /// </summary>
                    public string AddressLine3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("AddressLine3", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("AddressLine3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (AddressLine1?, AddressLine2?, AddressLine3?, AddressLine4?)
                    /// </para>
                    /// </summary>
                    public string AddressLine4
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("AddressLine4", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("AddressLine4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CustomerDeliveryPointAddress", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CustomerDeliveryPointAddressLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("AddressLine1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("AddressLine2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("AddressLine3", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("AddressLine4", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ClaimNum, ContractDealNumber)
            /// </para>
            /// </summary>
            public partial class @REFLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator @REFLocalType(XElement xe) { return XTypedServices.ToXTypedElement<@REFLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static @REFLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClaimNum", "")), new NamedContentModelEntity(XName.Get("ContractDealNumber", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ClaimNum, ContractDealNumber)
                /// </para>
                /// </summary>
                public @REFLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ClaimNum, ContractDealNumber)
                /// </para>
                /// </summary>
                public ClaimNumLocalType ClaimNum
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ClaimNum", ""));
                        return ((ClaimNumLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ClaimNum", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ClaimNum, ContractDealNumber)
                /// </para>
                /// </summary>
                public ContractDealNumberLocalType ContractDealNumber
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ContractDealNumber", ""));
                        return ((ContractDealNumberLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ContractDealNumber", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("REF", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<@REFLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ClaimNum", ""), typeof(ClaimNumLocalType));
                    localElementDictionary.Add(XName.Get("ContractDealNumber", ""), typeof(ContractDealNumberLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ClaimNumber, ClaimDate)
                /// </para>
                /// </summary>
                public partial class ClaimNumLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ClaimNumLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ClaimNumLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ClaimNumLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClaimNumber", "")), new NamedContentModelEntity(XName.Get("ClaimDate", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ClaimNumber, ClaimDate)
                    /// </para>
                    /// </summary>
                    public ClaimNumLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ClaimNumber, ClaimDate)
                    /// </para>
                    /// </summary>
                    public string ClaimNumber
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ClaimNumber", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ClaimNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ClaimNumber, ClaimDate)
                    /// </para>
                    /// </summary>
                    public System.DateTime ClaimDate
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ClaimDate", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ClaimDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ClaimNum", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ClaimNumLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ClaimNumber", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ClaimDate", ""), typeof(System.DateTime));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ContractDealNrCustomer, ContractDealNrSupplier, SuppliersRepresentative?, CustomersRepresentative)
                /// </para>
                /// </summary>
                public partial class ContractDealNumberLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ContractDealNumberLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ContractDealNumberLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ContractDealNumberLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ContractDealNrCustomer", "")), new NamedContentModelEntity(XName.Get("ContractDealNrSupplier", "")), new NamedContentModelEntity(XName.Get("SuppliersRepresentative", "")), new NamedContentModelEntity(XName.Get("CustomersRepresentative", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ContractDealNrCustomer, ContractDealNrSupplier, SuppliersRepresentative?, CustomersRepresentative)
                    /// </para>
                    /// </summary>
                    public ContractDealNumberLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ContractDealNrCustomer, ContractDealNrSupplier, SuppliersRepresentative?, CustomersRepresentative)
                    /// </para>
                    /// </summary>
                    public string ContractDealNrCustomer
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ContractDealNrCustomer", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ContractDealNrCustomer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ContractDealNrCustomer, ContractDealNrSupplier, SuppliersRepresentative?, CustomersRepresentative)
                    /// </para>
                    /// </summary>
                    public string ContractDealNrSupplier
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ContractDealNrSupplier", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ContractDealNrSupplier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ContractDealNrCustomer, ContractDealNrSupplier, SuppliersRepresentative?, CustomersRepresentative)
                    /// </para>
                    /// </summary>
                    public string SuppliersRepresentative
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SuppliersRepresentative", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SuppliersRepresentative", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ContractDealNrCustomer, ContractDealNrSupplier, SuppliersRepresentative?, CustomersRepresentative)
                    /// </para>
                    /// </summary>
                    public string CustomersRepresentative
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CustomersRepresentative", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CustomersRepresentative", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ContractDealNumber", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ContractDealNumberLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ContractDealNrCustomer", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ContractDealNrSupplier", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SuppliersRepresentative", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CustomersRepresentative", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (ClaimReference)
            /// </para>
            /// </summary>
            public partial class CRFLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator CRFLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CRFLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static CRFLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ClaimReference", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ClaimReference)
                /// </para>
                /// </summary>
                public CRFLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (ClaimReference)
                /// </para>
                /// </summary>
                public ClaimReferenceLocalType ClaimReference
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ClaimReference", ""));
                        return ((ClaimReferenceLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ClaimReference", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("CRF", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<CRFLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("ClaimReference", ""), typeof(ClaimReferenceLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ManClaimNum?, ManClaimCode?, InvNum?, InvDate, InvNumCode, CreditNum?, CreditDate?)
                /// </para>
                /// </summary>
                public partial class ClaimReferenceLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ClaimReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ClaimReferenceLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ClaimReferenceLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ManClaimNum", "")), new NamedContentModelEntity(XName.Get("ManClaimCode", "")), new NamedContentModelEntity(XName.Get("InvNum", "")), new NamedContentModelEntity(XName.Get("InvDate", "")), new NamedContentModelEntity(XName.Get("InvNumCode", "")), new NamedContentModelEntity(XName.Get("CreditNum", "")), new NamedContentModelEntity(XName.Get("CreditDate", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ManClaimNum?, ManClaimCode?, InvNum?, InvDate, InvNumCode, CreditNum?, CreditDate?)
                    /// </para>
                    /// </summary>
                    public ClaimReferenceLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ManClaimNum?, ManClaimCode?, InvNum?, InvDate, InvNumCode, CreditNum?, CreditDate?)
                    /// </para>
                    /// </summary>
                    public string ManClaimNum
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ManClaimNum", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ManClaimNum", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ManClaimNum?, ManClaimCode?, InvNum?, InvDate, InvNumCode, CreditNum?, CreditDate?)
                    /// </para>
                    /// </summary>
                    public string ManClaimCode
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ManClaimCode", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ManClaimCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ManClaimNum?, ManClaimCode?, InvNum?, InvDate, InvNumCode, CreditNum?, CreditDate?)
                    /// </para>
                    /// </summary>
                    public string InvNum
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("InvNum", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("InvNum", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ManClaimNum?, ManClaimCode?, InvNum?, InvDate, InvNumCode, CreditNum?, CreditDate?)
                    /// </para>
                    /// </summary>
                    public System.DateTime InvDate
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("InvDate", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("InvDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ManClaimNum?, ManClaimCode?, InvNum?, InvDate, InvNumCode, CreditNum?, CreditDate?)
                    /// </para>
                    /// </summary>
                    public string InvNumCode
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("InvNumCode", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("InvNumCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ManClaimNum?, ManClaimCode?, InvNum?, InvDate, InvNumCode, CreditNum?, CreditDate?)
                    /// </para>
                    /// </summary>
                    public string CreditNum
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CreditNum", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CreditNum", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ManClaimNum?, ManClaimCode?, InvNum?, InvDate, InvNumCode, CreditNum?, CreditDate?)
                    /// </para>
                    /// </summary>
                    public System.Nullable<System.DateTime> CreditDate
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CreditDate", ""));
                            if ((x == null))
                            {
                                return null;
                            }
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CreditDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ClaimReference", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ClaimReferenceLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ManClaimNum", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ManClaimCode", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("InvNum", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("InvDate", ""), typeof(System.DateTime));
                        localElementDictionary.Add(XName.Get("InvNumCode", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CreditNum", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CreditDate", ""), typeof(System.DateTime));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
            /// </para>
            /// </summary>
            public partial class CLNLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator CLNLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CLNLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static CLNLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LineSequenceNr", "")), new NamedContentModelEntity(XName.Get("LineReasonCode", "")), new NamedContentModelEntity(XName.Get("LineSubTotalExVat", "")), new NamedContentModelEntity(XName.Get("VatRatePercentage", "")), new NamedContentModelEntity(XName.Get("ProductNumber", "")), new NamedContentModelEntity(XName.Get("QuantityDetails", "")), new NamedContentModelEntity(XName.Get("CostPrice", "")), new NamedContentModelEntity(XName.Get("CreditAdjustments", "")), new NamedContentModelEntity(XName.Get("ContractDealNumber", "")), new NamedContentModelEntity(XName.Get("LineNarratives", "")), new NamedContentModelEntity(XName.Get("ProductQualifiers", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public CLNLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public sbyte LineSequenceNr
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LineSequenceNr", ""));
                        return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LineSequenceNr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public LineReasonCodeLocalType LineReasonCode
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LineReasonCode", ""));
                        return ((LineReasonCodeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("LineReasonCode", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public decimal LineSubTotalExVat
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LineSubTotalExVat", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LineSubTotalExVat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public decimal VatRatePercentage
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VatRatePercentage", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VatRatePercentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public ProductNumberLocalType ProductNumber
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ProductNumber", ""));
                        return ((ProductNumberLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ProductNumber", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public QuantityDetailsLocalType QuantityDetails
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("QuantityDetails", ""));
                        return ((QuantityDetailsLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("QuantityDetails", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public CostPriceLocalType CostPrice
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CostPrice", ""));
                        return ((CostPriceLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CostPrice", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public CreditAdjustmentsLocalType CreditAdjustments
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CreditAdjustments", ""));
                        return ((CreditAdjustmentsLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CreditAdjustments", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public ContractDealNumberLocalType ContractDealNumber
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ContractDealNumber", ""));
                        return ((ContractDealNumberLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ContractDealNumber", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public LineNarrativesLocalType LineNarratives
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LineNarratives", ""));
                        return ((LineNarrativesLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("LineNarratives", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LineSequenceNr, LineReasonCode, LineSubTotalExVat, VatRatePercentage, ProductNumber, QuantityDetails, CostPrice, CreditAdjustments, ContractDealNumber, LineNarratives?, ProductQualifiers)
                /// </para>
                /// </summary>
                public ProductQualifiersLocalType ProductQualifiers
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ProductQualifiers", ""));
                        return ((ProductQualifiersLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ProductQualifiers", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("CLN", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<CLNLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LineSequenceNr", ""), typeof(sbyte));
                    localElementDictionary.Add(XName.Get("LineReasonCode", ""), typeof(LineReasonCodeLocalType));
                    localElementDictionary.Add(XName.Get("LineSubTotalExVat", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("VatRatePercentage", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("ProductNumber", ""), typeof(ProductNumberLocalType));
                    localElementDictionary.Add(XName.Get("QuantityDetails", ""), typeof(QuantityDetailsLocalType));
                    localElementDictionary.Add(XName.Get("CostPrice", ""), typeof(CostPriceLocalType));
                    localElementDictionary.Add(XName.Get("CreditAdjustments", ""), typeof(CreditAdjustmentsLocalType));
                    localElementDictionary.Add(XName.Get("ContractDealNumber", ""), typeof(ContractDealNumberLocalType));
                    localElementDictionary.Add(XName.Get("LineNarratives", ""), typeof(LineNarrativesLocalType));
                    localElementDictionary.Add(XName.Get("ProductQualifiers", ""), typeof(ProductQualifiersLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LineReasonCode?, LineGoodsReturnedBasis?)
                /// </para>
                /// </summary>
                public partial class LineReasonCodeLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator LineReasonCodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LineReasonCodeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static LineReasonCodeLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LineReasonCode", "")), new NamedContentModelEntity(XName.Get("LineGoodsReturnedBasis", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (LineReasonCode?, LineGoodsReturnedBasis?)
                    /// </para>
                    /// </summary>
                    public LineReasonCodeLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (LineReasonCode?, LineGoodsReturnedBasis?)
                    /// </para>
                    /// </summary>
                    public string LineReasonCode
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("LineReasonCode", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("LineReasonCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (LineReasonCode?, LineGoodsReturnedBasis?)
                    /// </para>
                    /// </summary>
                    public string LineGoodsReturnedBasis
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("LineGoodsReturnedBasis", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("LineGoodsReturnedBasis", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("LineReasonCode", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<LineReasonCodeLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("LineReasonCode", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("LineGoodsReturnedBasis", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (EanProductNumberConsumerUnit, SupplierProductCode?, ProductDescription)
                /// </para>
                /// </summary>
                public partial class ProductNumberLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ProductNumberLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ProductNumberLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ProductNumberLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("EanProductNumberConsumerUnit", "")), new NamedContentModelEntity(XName.Get("SupplierProductCode", "")), new NamedContentModelEntity(XName.Get("ProductDescription", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (EanProductNumberConsumerUnit, SupplierProductCode?, ProductDescription)
                    /// </para>
                    /// </summary>
                    public ProductNumberLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EanProductNumberConsumerUnit, SupplierProductCode?, ProductDescription)
                    /// </para>
                    /// </summary>
                    public string EanProductNumberConsumerUnit
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("EanProductNumberConsumerUnit", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("EanProductNumberConsumerUnit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (EanProductNumberConsumerUnit, SupplierProductCode?, ProductDescription)
                    /// </para>
                    /// </summary>
                    public string SupplierProductCode
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SupplierProductCode", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SupplierProductCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EanProductNumberConsumerUnit, SupplierProductCode?, ProductDescription)
                    /// </para>
                    /// </summary>
                    public string ProductDescription
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ProductDescription", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ProductDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ProductNumber", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ProductNumberLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("EanProductNumberConsumerUnit", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SupplierProductCode", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ProductDescription", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (NumberOfUnitsClaimed, ConsumerUnitsPerUnitsClaimed, LooseConsumerUnitsReturned)
                /// </para>
                /// </summary>
                public partial class QuantityDetailsLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator QuantityDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<QuantityDetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static QuantityDetailsLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NumberOfUnitsClaimed", "")), new NamedContentModelEntity(XName.Get("ConsumerUnitsPerUnitsClaimed", "")), new NamedContentModelEntity(XName.Get("LooseConsumerUnitsReturned", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (NumberOfUnitsClaimed, ConsumerUnitsPerUnitsClaimed, LooseConsumerUnitsReturned)
                    /// </para>
                    /// </summary>
                    public QuantityDetailsLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NumberOfUnitsClaimed, ConsumerUnitsPerUnitsClaimed, LooseConsumerUnitsReturned)
                    /// </para>
                    /// </summary>
                    public decimal NumberOfUnitsClaimed
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("NumberOfUnitsClaimed", ""));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("NumberOfUnitsClaimed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NumberOfUnitsClaimed, ConsumerUnitsPerUnitsClaimed, LooseConsumerUnitsReturned)
                    /// </para>
                    /// </summary>
                    public decimal ConsumerUnitsPerUnitsClaimed
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ConsumerUnitsPerUnitsClaimed", ""));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ConsumerUnitsPerUnitsClaimed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NumberOfUnitsClaimed, ConsumerUnitsPerUnitsClaimed, LooseConsumerUnitsReturned)
                    /// </para>
                    /// </summary>
                    public decimal LooseConsumerUnitsReturned
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("LooseConsumerUnitsReturned", ""));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("LooseConsumerUnitsReturned", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("QuantityDetails", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<QuantityDetailsLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("NumberOfUnitsClaimed", ""), typeof(decimal));
                        localElementDictionary.Add(XName.Get("ConsumerUnitsPerUnitsClaimed", ""), typeof(decimal));
                        localElementDictionary.Add(XName.Get("LooseConsumerUnitsReturned", ""), typeof(decimal));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (CostPriceExVat, ConsumerUnitsPerCostPrice)
                /// </para>
                /// </summary>
                public partial class CostPriceLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CostPriceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CostPriceLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CostPriceLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CostPriceExVat", "")), new NamedContentModelEntity(XName.Get("ConsumerUnitsPerCostPrice", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (CostPriceExVat, ConsumerUnitsPerCostPrice)
                    /// </para>
                    /// </summary>
                    public CostPriceLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CostPriceExVat, ConsumerUnitsPerCostPrice)
                    /// </para>
                    /// </summary>
                    public decimal CostPriceExVat
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CostPriceExVat", ""));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CostPriceExVat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CostPriceExVat, ConsumerUnitsPerCostPrice)
                    /// </para>
                    /// </summary>
                    public decimal ConsumerUnitsPerCostPrice
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ConsumerUnitsPerCostPrice", ""));
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ConsumerUnitsPerCostPrice", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CostPrice", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CostPriceLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("CostPriceExVat", ""), typeof(decimal));
                        localElementDictionary.Add(XName.Get("ConsumerUnitsPerCostPrice", ""), typeof(decimal));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (AdjustmentIndicator | Percentage | Value)*
                /// </para>
                /// </summary>
                public partial class CreditAdjustmentsLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> AdjustmentIndicatorField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<decimal> PercentageField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<decimal> ValueField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    public static explicit operator CreditAdjustmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CreditAdjustmentsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CreditAdjustmentsLocalType()
                    {
                        BuildElementDictionary();
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (AdjustmentIndicator | Percentage | Value)*
                    /// </para>
                    /// </summary>
                    public CreditAdjustmentsLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (AdjustmentIndicator | Percentage | Value)*
                    /// </para>
                    /// </summary>
                    public IList<string> AdjustmentIndicator
                    {
                        get
                        {
                            if ((this.AdjustmentIndicatorField == null))
                            {
                                this.AdjustmentIndicatorField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("AdjustmentIndicator", ""));
                            }
                            return this.AdjustmentIndicatorField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.AdjustmentIndicatorField = null;
                            }
                            else
                            {
                                if ((this.AdjustmentIndicatorField == null))
                                {
                                    this.AdjustmentIndicatorField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("AdjustmentIndicator", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.AdjustmentIndicatorField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (AdjustmentIndicator | Percentage | Value)*
                    /// </para>
                    /// </summary>
                    public IList<decimal> Percentage
                    {
                        get
                        {
                            if ((this.PercentageField == null))
                            {
                                this.PercentageField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, XName.Get("Percentage", ""));
                            }
                            return this.PercentageField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.PercentageField = null;
                            }
                            else
                            {
                                if ((this.PercentageField == null))
                                {
                                    this.PercentageField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, XName.Get("Percentage", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.Decimal>(this.PercentageField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required, choice
                    /// </para>
                    /// <para>
                    /// Regular expression: (AdjustmentIndicator | Percentage | Value)*
                    /// </para>
                    /// </summary>
                    public IList<decimal> Value
                    {
                        get
                        {
                            if ((this.ValueField == null))
                            {
                                this.ValueField = new XSimpleList<decimal>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, XName.Get("Value", ""));
                            }
                            return this.ValueField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.ValueField = null;
                            }
                            else
                            {
                                if ((this.ValueField == null))
                                {
                                    this.ValueField = XSimpleList<decimal>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype, value, XName.Get("Value", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.Decimal>(this.ValueField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CreditAdjustments", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CreditAdjustmentsLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("AdjustmentIndicator", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("Percentage", ""), typeof(decimal));
                        localElementDictionary.Add(XName.Get("Value", ""), typeof(decimal));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return ContentModelEntity.Default;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (SuppliersRepresentative, CustomersRepresentative)
                /// </para>
                /// </summary>
                public partial class ContractDealNumberLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ContractDealNumberLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ContractDealNumberLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ContractDealNumberLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SuppliersRepresentative", "")), new NamedContentModelEntity(XName.Get("CustomersRepresentative", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (SuppliersRepresentative, CustomersRepresentative)
                    /// </para>
                    /// </summary>
                    public ContractDealNumberLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (SuppliersRepresentative, CustomersRepresentative)
                    /// </para>
                    /// </summary>
                    public string SuppliersRepresentative
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SuppliersRepresentative", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SuppliersRepresentative", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (SuppliersRepresentative, CustomersRepresentative)
                    /// </para>
                    /// </summary>
                    public string CustomersRepresentative
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CustomersRepresentative", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CustomersRepresentative", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ContractDealNumber", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ContractDealNumberLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("SuppliersRepresentative", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CustomersRepresentative", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Narrative)
                /// </para>
                /// </summary>
                public partial class LineNarrativesLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator LineNarrativesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LineNarrativesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static LineNarrativesLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Narrative", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Narrative)
                    /// </para>
                    /// </summary>
                    public LineNarrativesLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Narrative)
                    /// </para>
                    /// </summary>
                    public NarrativeLocalType Narrative
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Narrative", ""));
                            return ((NarrativeLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("Narrative", ""), value);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("LineNarratives", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<LineNarrativesLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("Narrative", ""), typeof(NarrativeLocalType));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (NarrativeDescription)
                    /// </para>
                    /// </summary>
                    public partial class NarrativeLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator NarrativeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NarrativeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static NarrativeLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NarrativeDescription", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (NarrativeDescription)
                        /// </para>
                        /// </summary>
                        public NarrativeLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (NarrativeDescription)
                        /// </para>
                        /// </summary>
                        public string NarrativeDescription
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("NarrativeDescription", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("NarrativeDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("Narrative", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<NarrativeLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("NarrativeDescription", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Style, Colour)
                /// </para>
                /// </summary>
                public partial class ProductQualifiersLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ProductQualifiersLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ProductQualifiersLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ProductQualifiersLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Style", "")), new NamedContentModelEntity(XName.Get("Colour", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Style, Colour)
                    /// </para>
                    /// </summary>
                    public ProductQualifiersLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Style, Colour)
                    /// </para>
                    /// </summary>
                    public string Style
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Style", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Style", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Style, Colour)
                    /// </para>
                    /// </summary>
                    public string Colour
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Colour", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Colour", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ProductQualifiers", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ProductQualifiersLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("Style", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("Colour", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
            /// </para>
            /// </summary>
            public partial class CTRLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator CTRLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CTRLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static CTRLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LinesNetTotalCostEXvat", "")), new NamedContentModelEntity(XName.Get("TotalVatAmountPayable", "")), new NamedContentModelEntity(XName.Get("TotalAmountPayableIncVat", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
                /// </para>
                /// </summary>
                public CTRLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
                /// </para>
                /// </summary>
                public decimal LinesNetTotalCostEXvat
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LinesNetTotalCostEXvat", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LinesNetTotalCostEXvat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
                /// </para>
                /// </summary>
                public decimal TotalVatAmountPayable
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TotalVatAmountPayable", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TotalVatAmountPayable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
                /// </para>
                /// </summary>
                public decimal TotalAmountPayableIncVat
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TotalAmountPayableIncVat", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TotalAmountPayableIncVat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("CTR", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<CTRLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LinesNetTotalCostEXvat", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("TotalVatAmountPayable", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("TotalAmountPayableIncVat", ""), typeof(decimal));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
            /// </para>
            /// </summary>
            public partial class CMSLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator CMSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CMSLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static CMSLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LinesNetTotalCostEXvat", "")), new NamedContentModelEntity(XName.Get("TotalVatAmountPayable", "")), new NamedContentModelEntity(XName.Get("TotalAmountPayableIncVat", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
                /// </para>
                /// </summary>
                public CMSLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
                /// </para>
                /// </summary>
                public decimal LinesNetTotalCostEXvat
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LinesNetTotalCostEXvat", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LinesNetTotalCostEXvat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
                /// </para>
                /// </summary>
                public decimal TotalVatAmountPayable
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TotalVatAmountPayable", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TotalVatAmountPayable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LinesNetTotalCostEXvat, TotalVatAmountPayable, TotalAmountPayableIncVat)
                /// </para>
                /// </summary>
                public decimal TotalAmountPayableIncVat
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TotalAmountPayableIncVat", ""));
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TotalAmountPayableIncVat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("CMS", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<CMSLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LinesNetTotalCostEXvat", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("TotalVatAmountPayable", ""), typeof(decimal));
                    localElementDictionary.Add(XName.Get("TotalAmountPayableIncVat", ""), typeof(decimal));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("Claims", ""), typeof(Claims));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("Claims", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public Claims Claims { get { return rootObject as Claims; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(Claims root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public Claims Claims { get { return rootObject as Claims; } }

        private XRoot()
        {
        }

        public XRoot(Claims root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}