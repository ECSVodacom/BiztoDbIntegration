//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace Spar.Data.XsdModels.Invoices.DropShip
{

    /// <summary>
    /// <para>
    /// Regular expression: (UNH)
    /// </para>
    /// </summary>
    public partial class UNB : XTypedElement, IXMetaData
    {
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UNHLocalType> UNHField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator UNB(XElement xe) { return XTypedServices.ToXTypedElement<UNB>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static UNB()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("UNH", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (UNH)
        /// </para>
        /// </summary>
        public UNB()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UNH*)
        /// </para>
        /// </summary>
        public IList<UNB.UNHLocalType> UNH
        {
            get
            {
                if ((this.UNHField == null))
                {
                    this.UNHField = new XTypedList<UNHLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("UNH", ""));
                }
                return this.UNHField;
            }
            set
            {
                if ((value == null))
                {
                    this.UNHField = null;
                }
                else
                {
                    if ((this.UNHField == null))
                    {
                        this.UNHField = XTypedList<UNHLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UNH", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<UNHLocalType>(this.UNHField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("UNB", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static UNB Load(string xmlFile)
        {
            return XTypedServices.Load<UNB>(xmlFile);
        }

        public static UNB Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<UNB>(xmlFile);
        }

        public static UNB Parse(string xml)
        {
            return XTypedServices.Parse<UNB>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<UNB>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("UNH", ""), typeof(UNHLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
        /// </para>
        /// </summary>
        public partial class UNHLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ILDLocalType> ILDField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<VRSLocalType> VRSField;

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator UNHLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UNHLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static UNHLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("recievedate", "")), new NamedContentModelEntity(XName.Get("translatedate", "")), new NamedContentModelEntity(XName.Get("mailboxdate", "")), new NamedContentModelEntity(XName.Get("extractdate", "")), new NamedContentModelEntity(XName.Get("confirmdate", "")), new NamedContentModelEntity(XName.Get("SAP", "")), new NamedContentModelEntity(XName.Get("SDP", "")), new NamedContentModelEntity(XName.Get("CLO", "")), new NamedContentModelEntity(XName.Get("IRE", "")), new NamedContentModelEntity(XName.Get("NAR", "")), new NamedContentModelEntity(XName.Get("ODD", "")), new NamedContentModelEntity(XName.Get("CNF", "")), new NamedContentModelEntity(XName.Get("ILD", "")), new NamedContentModelEntity(XName.Get("DLA", "")), new NamedContentModelEntity(XName.Get("VRS", "")), new NamedContentModelEntity(XName.Get("IPD", "")), new NamedContentModelEntity(XName.Get("SDI", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public UNHLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public string recievedate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("recievedate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("recievedate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public string translatedate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("translatedate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("translatedate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public string mailboxdate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("mailboxdate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("mailboxdate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public string extractdate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("extractdate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("extractdate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public string confirmdate
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("confirmdate", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set
                {
                    this.SetElement(XName.Get("confirmdate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public SAPLocalType SAP
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("SAP", ""));
                    return ((SAPLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("SAP", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public SDPLocalType SDP
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("SDP", ""));
                    return ((SDPLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("SDP", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public CLOLocalType CLO
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CLO", ""));
                    return ((CLOLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("CLO", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public IRELocalType IRE
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("IRE", ""));
                    return ((IRELocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("IRE", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public NARLocalType NAR
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("NAR", ""));
                    return ((NARLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("NAR", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public ODDLocalType ODD
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("ODD", ""));
                    return ((ODDLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("ODD", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public CNFLocalType CNF
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("CNF", ""));
                    return ((CNFLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("CNF", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public IList<UNB.UNHLocalType.ILDLocalType> ILD
            {
                get
                {
                    if ((this.ILDField == null))
                    {
                        this.ILDField = new XTypedList<ILDLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ILD", ""));
                    }
                    return this.ILDField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.ILDField = null;
                    }
                    else
                    {
                        if ((this.ILDField == null))
                        {
                            this.ILDField = XTypedList<ILDLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ILD", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<ILDLocalType>(this.ILDField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public DLALocalType DLA
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("DLA", ""));
                    return ((DLALocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("DLA", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public IList<UNB.UNHLocalType.VRSLocalType> VRS
            {
                get
                {
                    if ((this.VRSField == null))
                    {
                        this.VRSField = new XTypedList<VRSLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("VRS", ""));
                    }
                    return this.VRSField;
                }
                set
                {
                    if ((value == null))
                    {
                        this.VRSField = null;
                    }
                    else
                    {
                        if ((this.VRSField == null))
                        {
                            this.VRSField = XTypedList<VRSLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("VRS", ""));
                        }
                        else
                        {
                            XTypedServices.SetList<VRSLocalType>(this.VRSField, value);
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public IPDLocalType IPD
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("IPD", ""));
                    return ((IPDLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("IPD", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (recievedate, translatedate, mailboxdate, extractdate, confirmdate, SAP, SDP, CLO, IRE, NAR, ODD, CNF, ILD*, DLA?, VRS*, IPD, SDI?)
            /// </para>
            /// </summary>
            public SDILocalType SDI
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("SDI", ""));
                    return ((SDILocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("SDI", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("UNH", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<UNHLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("recievedate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("translatedate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("mailboxdate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("extractdate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("confirmdate", ""), typeof(string));
                localElementDictionary.Add(XName.Get("SAP", ""), typeof(SAPLocalType));
                localElementDictionary.Add(XName.Get("SDP", ""), typeof(SDPLocalType));
                localElementDictionary.Add(XName.Get("CLO", ""), typeof(CLOLocalType));
                localElementDictionary.Add(XName.Get("IRE", ""), typeof(IRELocalType));
                localElementDictionary.Add(XName.Get("NAR", ""), typeof(NARLocalType));
                localElementDictionary.Add(XName.Get("ODD", ""), typeof(ODDLocalType));
                localElementDictionary.Add(XName.Get("CNF", ""), typeof(CNFLocalType));
                localElementDictionary.Add(XName.Get("ILD", ""), typeof(ILDLocalType));
                localElementDictionary.Add(XName.Get("DLA", ""), typeof(DLALocalType));
                localElementDictionary.Add(XName.Get("VRS", ""), typeof(VRSLocalType));
                localElementDictionary.Add(XName.Get("IPD", ""), typeof(IPDLocalType));
                localElementDictionary.Add(XName.Get("SDI", ""), typeof(SDILocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (SAPT, SVAT)
            /// </para>
            /// </summary>
            public partial class SAPLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator SAPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SAPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static SAPLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SAPT", "")), new NamedContentModelEntity(XName.Get("SVAT", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (SAPT, SVAT)
                /// </para>
                /// </summary>
                public SAPLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (SAPT, SVAT)
                /// </para>
                /// </summary>
                public string SAPT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("SAPT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("SAPT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (SAPT, SVAT)
                /// </para>
                /// </summary>
                public string SVAT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("SVAT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("SVAT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("SAP", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<SAPLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("SAPT", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("SVAT", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (SUDP, SUDA)
            /// </para>
            /// </summary>
            public partial class SDPLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator SDPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SDPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static SDPLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SUDP", "")), new NamedContentModelEntity(XName.Get("SUDA", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (SUDP, SUDA)
                /// </para>
                /// </summary>
                public SDPLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (SUDP, SUDA)
                /// </para>
                /// </summary>
                public string SUDP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("SUDP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("SUDP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (SUDP, SUDA)
                /// </para>
                /// </summary>
                public SUDALocalType SUDA
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("SUDA", ""));
                        return ((SUDALocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("SUDA", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("SDP", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<SDPLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("SUDP", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("SUDA", ""), typeof(SUDALocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (alin1, alin2, alin3, alin4)
                /// </para>
                /// </summary>
                public partial class SUDALocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator SUDALocalType(XElement xe) { return XTypedServices.ToXTypedElement<SUDALocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static SUDALocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("alin1", "")), new NamedContentModelEntity(XName.Get("alin2", "")), new NamedContentModelEntity(XName.Get("alin3", "")), new NamedContentModelEntity(XName.Get("alin4", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public SUDALocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public string alin1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("alin1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("alin1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public string alin2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("alin2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("alin2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public string alin3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("alin3", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("alin3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public string alin4
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("alin4", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("alin4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("SUDA", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<SUDALocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("alin1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("alin2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("alin3", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("alin4", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
            /// </para>
            /// </summary>
            public partial class CLOLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator CLOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CLOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static CLOLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CDPT", "")), new NamedContentModelEntity(XName.Get("COPT", "")), new NamedContentModelEntity(XName.Get("CDPN", "")), new NamedContentModelEntity(XName.Get("CDPA", "")), new NamedContentModelEntity(XName.Get("ALIP", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public CLOLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public string CDPT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDPT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDPT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public string COPT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("COPT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("COPT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public string CDPN
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDPN", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDPN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public CDPALocalType CDPA
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDPA", ""));
                        return ((CDPALocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDPA", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CDPT, COPT, CDPN, CDPA, ALIP)
                /// </para>
                /// </summary>
                public string ALIP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ALIP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("ALIP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("CLO", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<CLOLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("CDPT", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("COPT", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CDPN", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CDPA", ""), typeof(CDPALocalType));
                    localElementDictionary.Add(XName.Get("ALIP", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (alin1, alin2, alin3, alin4)
                /// </para>
                /// </summary>
                public partial class CDPALocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CDPALocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDPALocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CDPALocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("alin1", "")), new NamedContentModelEntity(XName.Get("alin2", "")), new NamedContentModelEntity(XName.Get("alin3", "")), new NamedContentModelEntity(XName.Get("alin4", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public CDPALocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public string alin1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("alin1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("alin1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public string alin2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("alin2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("alin2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public string alin3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("alin3", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("alin3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (alin1, alin2, alin3, alin4)
                    /// </para>
                    /// </summary>
                    public string alin4
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("alin4", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("alin4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CDPA", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CDPALocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("alin1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("alin2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("alin3", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("alin4", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (INVR, PDET)
            /// </para>
            /// </summary>
            public partial class IRELocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator IRELocalType(XElement xe) { return XTypedServices.ToXTypedElement<IRELocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static IRELocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("INVR", "")), new NamedContentModelEntity(XName.Get("PDET", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (INVR, PDET)
                /// </para>
                /// </summary>
                public IRELocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (INVR, PDET)
                /// </para>
                /// </summary>
                public INVRLocalType INVR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("INVR", ""));
                        return ((INVRLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("INVR", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (INVR, PDET)
                /// </para>
                /// </summary>
                public PDETLocalType PDET
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("PDET", ""));
                        return ((PDETLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("PDET", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("IRE", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<IRELocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("INVR", ""), typeof(INVRLocalType));
                    localElementDictionary.Add(XName.Get("PDET", ""), typeof(PDETLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (REFN, DATE1, DATE2)
                /// </para>
                /// </summary>
                public partial class INVRLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator INVRLocalType(XElement xe) { return XTypedServices.ToXTypedElement<INVRLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static INVRLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("REFN", "")), new NamedContentModelEntity(XName.Get("DATE1", "")), new NamedContentModelEntity(XName.Get("DATE2", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (REFN, DATE1, DATE2)
                    /// </para>
                    /// </summary>
                    public INVRLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (REFN, DATE1, DATE2)
                    /// </para>
                    /// </summary>
                    public string REFN
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("REFN", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("REFN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (REFN, DATE1, DATE2)
                    /// </para>
                    /// </summary>
                    public string DATE1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DATE1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DATE1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (REFN, DATE1, DATE2)
                    /// </para>
                    /// </summary>
                    public string DATE2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DATE2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DATE2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("INVR", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<INVRLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("REFN", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DATE1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DATE2", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (DTER, CURR, AGNT, BANK, INDN, SHCN)
                /// </para>
                /// </summary>
                public partial class PDETLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator PDETLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PDETLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static PDETLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DTER", "")), new NamedContentModelEntity(XName.Get("CURR", "")), new NamedContentModelEntity(XName.Get("AGNT", "")), new NamedContentModelEntity(XName.Get("BANK", "")), new NamedContentModelEntity(XName.Get("INDN", "")), new NamedContentModelEntity(XName.Get("SHCN", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (DTER, CURR, AGNT, BANK, INDN, SHCN)
                    /// </para>
                    /// </summary>
                    public PDETLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (DTER, CURR, AGNT, BANK, INDN, SHCN)
                    /// </para>
                    /// </summary>
                    public string DTER
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DTER", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DTER", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (DTER, CURR, AGNT, BANK, INDN, SHCN)
                    /// </para>
                    /// </summary>
                    public string CURR
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CURR", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CURR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (DTER, CURR, AGNT, BANK, INDN, SHCN)
                    /// </para>
                    /// </summary>
                    public string AGNT
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("AGNT", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("AGNT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (DTER, CURR, AGNT, BANK, INDN, SHCN)
                    /// </para>
                    /// </summary>
                    public string BANK
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("BANK", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("BANK", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (DTER, CURR, AGNT, BANK, INDN, SHCN)
                    /// </para>
                    /// </summary>
                    public string INDN
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("INDN", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("INDN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (DTER, CURR, AGNT, BANK, INDN, SHCN)
                    /// </para>
                    /// </summary>
                    public string SHCN
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SHCN", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SHCN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("PDET", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<PDETLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("DTER", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CURR", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("AGNT", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("BANK", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("INDN", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SHCN", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, NARR)
            /// </para>
            /// </summary>
            public partial class NARLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator NARLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NARLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static NARLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("NARR", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, NARR)
                /// </para>
                /// </summary>
                public NARLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, NARR)
                /// </para>
                /// </summary>
                public string LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, NARR)
                /// </para>
                /// </summary>
                public string NARR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NARR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NARR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("NAR", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<NARLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("NARR", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, ORNO, CDNO, DELR, PODD, NCAR)
            /// </para>
            /// </summary>
            public partial class ODDLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator ODDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ODDLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static ODDLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("ORNO", "")), new NamedContentModelEntity(XName.Get("CDNO", "")), new NamedContentModelEntity(XName.Get("DELR", "")), new NamedContentModelEntity(XName.Get("PODD", "")), new NamedContentModelEntity(XName.Get("NCAR", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, ORNO, CDNO, DELR, PODD, NCAR)
                /// </para>
                /// </summary>
                public ODDLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, ORNO, CDNO, DELR, PODD, NCAR)
                /// </para>
                /// </summary>
                public string LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, ORNO, CDNO, DELR, PODD, NCAR)
                /// </para>
                /// </summary>
                public ORNOLocalType ORNO
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ORNO", ""));
                        return ((ORNOLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("ORNO", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, ORNO, CDNO, DELR, PODD, NCAR)
                /// </para>
                /// </summary>
                public CDNOLocalType CDNO
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDNO", ""));
                        return ((CDNOLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDNO", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, ORNO, CDNO, DELR, PODD, NCAR)
                /// </para>
                /// </summary>
                public DELRLocalType DELR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("DELR", ""));
                        return ((DELRLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("DELR", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, ORNO, CDNO, DELR, PODD, NCAR)
                /// </para>
                /// </summary>
                public PODDLocalType PODD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("PODD", ""));
                        return ((PODDLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("PODD", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, ORNO, CDNO, DELR, PODD, NCAR)
                /// </para>
                /// </summary>
                public string NCAR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NCAR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NCAR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("ODD", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<ODDLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("ORNO", ""), typeof(ORNOLocalType));
                    localElementDictionary.Add(XName.Get("CDNO", ""), typeof(CDNOLocalType));
                    localElementDictionary.Add(XName.Get("DELR", ""), typeof(DELRLocalType));
                    localElementDictionary.Add(XName.Get("PODD", ""), typeof(PODDLocalType));
                    localElementDictionary.Add(XName.Get("NCAR", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ORNU1, ORNU2, DATE)
                /// </para>
                /// </summary>
                public partial class ORNOLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator ORNOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ORNOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static ORNOLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ORNU1", "")), new NamedContentModelEntity(XName.Get("ORNU2", "")), new NamedContentModelEntity(XName.Get("DATE", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ORNU1, ORNU2, DATE)
                    /// </para>
                    /// </summary>
                    public ORNOLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ORNU1, ORNU2, DATE)
                    /// </para>
                    /// </summary>
                    public string ORNU1
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ORNU1", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ORNU1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ORNU1, ORNU2, DATE)
                    /// </para>
                    /// </summary>
                    public string ORNU2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ORNU2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ORNU2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ORNU1, ORNU2, DATE)
                    /// </para>
                    /// </summary>
                    public string DATE
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DATE", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DATE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("ORNO", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<ORNOLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ORNU1", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ORNU2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DATE", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP*)
                /// </para>
                /// </summary>
                public partial class CDNOLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XSimpleList<string> SREPField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CDNOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDNOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CDNOLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CNDN", "")), new NamedContentModelEntity(XName.Get("SDIR", "")), new NamedContentModelEntity(XName.Get("CNDN2", "")), new NamedContentModelEntity(XName.Get("CNTP", "")), new NamedContentModelEntity(XName.Get("WHNG", "")), new NamedContentModelEntity(XName.Get("SREP", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP*)
                    /// </para>
                    /// </summary>
                    public CDNOLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP*)
                    /// </para>
                    /// </summary>
                    public string CNDN
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CNDN", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CNDN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP*)
                    /// </para>
                    /// </summary>
                    public string SDIR
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SDIR", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SDIR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP*)
                    /// </para>
                    /// </summary>
                    public string CNDN2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CNDN2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CNDN2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP*)
                    /// </para>
                    /// </summary>
                    public string CNTP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CNTP", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CNTP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP*)
                    /// </para>
                    /// </summary>
                    public string WHNG
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("WHNG", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("WHNG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP*)
                    /// </para>
                    /// </summary>
                    public IList<string> SREP
                    {
                        get
                        {
                            if ((this.SREPField == null))
                            {
                                this.SREPField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XName.Get("SREP", ""));
                            }
                            return this.SREPField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.SREPField = null;
                            }
                            else
                            {
                                if ((this.SREPField == null))
                                {
                                    this.SREPField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XName.Get("SREP", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<System.String>(this.SREPField, value);
                                }
                            }
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CDNO", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CDNOLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("CNDN", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SDIR", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CNDN2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CNTP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("WHNG", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SREP", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (REFN, DATE)
                /// </para>
                /// </summary>
                public partial class DELRLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator DELRLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DELRLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static DELRLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("REFN", "")), new NamedContentModelEntity(XName.Get("DATE", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (REFN, DATE)
                    /// </para>
                    /// </summary>
                    public DELRLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (REFN, DATE)
                    /// </para>
                    /// </summary>
                    public string REFN
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("REFN", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("REFN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (REFN, DATE)
                    /// </para>
                    /// </summary>
                    public string DATE
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DATE", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DATE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("DELR", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<DELRLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("REFN", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DATE", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (REFN, DATE)
                /// </para>
                /// </summary>
                public partial class PODDLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator PODDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PODDLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static PODDLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("REFN", "")), new NamedContentModelEntity(XName.Get("DATE", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (REFN, DATE)
                    /// </para>
                    /// </summary>
                    public PODDLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (REFN, DATE)
                    /// </para>
                    /// </summary>
                    public string REFN
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("REFN", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("REFN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (REFN, DATE)
                    /// </para>
                    /// </summary>
                    public string DATE
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DATE", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DATE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("PODD", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<PODDLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("REFN", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DATE", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, CNRF)
            /// </para>
            /// </summary>
            public partial class CNFLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator CNFLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CNFLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static CNFLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("CNRF", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, CNRF)
                /// </para>
                /// </summary>
                public CNFLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, CNRF)
                /// </para>
                /// </summary>
                public string LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, CNRF)
                /// </para>
                /// </summary>
                public string CNRF
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CNRF", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CNRF", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("CNF", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<CNFLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CNRF", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
            /// </para>
            /// </summary>
            public partial class ILDLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator ILDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ILDLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static ILDLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("OLSQ", "")), new NamedContentModelEntity(XName.Get("PROC", "")), new NamedContentModelEntity(XName.Get("QDEL", "")), new NamedContentModelEntity(XName.Get("COST", "")), new NamedContentModelEntity(XName.Get("CRAD", "")), new NamedContentModelEntity(XName.Get("NELC", "")), new NamedContentModelEntity(XName.Get("DCMD", "")), new NamedContentModelEntity(XName.Get("VATP", "")), new NamedContentModelEntity(XName.Get("VATC", "")), new NamedContentModelEntity(XName.Get("NCCP", "")), new NamedContentModelEntity(XName.Get("CDNO", "")), new NamedContentModelEntity(XName.Get("CUSP", "")), new NamedContentModelEntity(XName.Get("CSDI", "")), new NamedContentModelEntity(XName.Get("FRDL", "")), new NamedContentModelEntity(XName.Get("NARR", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public ILDLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string OLSQ
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("OLSQ", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("OLSQ", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public PROCLocalType PROC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("PROC", ""));
                        return ((PROCLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("PROC", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public QDELLocalType QDEL
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("QDEL", ""));
                        return ((QDELLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("QDEL", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public COSTLocalType COST
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("COST", ""));
                        return ((COSTLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("COST", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public CRADLocalType CRAD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CRAD", ""));
                        return ((CRADLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CRAD", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string NELC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NELC", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NELC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string DCMD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("DCMD", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("DCMD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string VATP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VATP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VATP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string VATC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VATC", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VATC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string NCCP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NCCP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NCCP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public CDNOLocalType CDNO
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CDNO", ""));
                        return ((CDNOLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CDNO", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string CUSP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CUSP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CUSP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string CSDI
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CSDI", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CSDI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public FRDLLocalType FRDL
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("FRDL", ""));
                        return ((FRDLLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("FRDL", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, OLSQ, PROC, QDEL, COST, CRAD, NELC, DCMD, VATP, VATC, NCCP, CDNO, CUSP, CSDI, FRDL?, NARR)
                /// </para>
                /// </summary>
                public string NARR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NARR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NARR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("ILD", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<ILDLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("OLSQ", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("PROC", ""), typeof(PROCLocalType));
                    localElementDictionary.Add(XName.Get("QDEL", ""), typeof(QDELLocalType));
                    localElementDictionary.Add(XName.Get("COST", ""), typeof(COSTLocalType));
                    localElementDictionary.Add(XName.Get("CRAD", ""), typeof(CRADLocalType));
                    localElementDictionary.Add(XName.Get("NELC", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("DCMD", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("VATP", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("VATC", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("NCCP", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CDNO", ""), typeof(CDNOLocalType));
                    localElementDictionary.Add(XName.Get("CUSP", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CSDI", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("FRDL", ""), typeof(FRDLLocalType));
                    localElementDictionary.Add(XName.Get("NARR", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (EANC, EANC2, SUPC, PROD)
                /// </para>
                /// </summary>
                public partial class PROCLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator PROCLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PROCLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static PROCLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("EANC", "")), new NamedContentModelEntity(XName.Get("EANC2", "")), new NamedContentModelEntity(XName.Get("SUPC", "")), new NamedContentModelEntity(XName.Get("PROD", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public PROCLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public string EANC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("EANC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("EANC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public string EANC2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("EANC2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("EANC2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public string SUPC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SUPC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SUPC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (EANC, EANC2, SUPC, PROD)
                    /// </para>
                    /// </summary>
                    public string PROD
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PROD", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PROD", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("PROC", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<PROCLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("EANC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("EANC2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SUPC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PROD", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (NODU, CUDU, TMEA, UNOM, BTCH, SCNR, DATE)
                /// </para>
                /// </summary>
                public partial class QDELLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator QDELLocalType(XElement xe) { return XTypedServices.ToXTypedElement<QDELLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static QDELLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NODU", "")), new NamedContentModelEntity(XName.Get("CUDU", "")), new NamedContentModelEntity(XName.Get("TMEA", "")), new NamedContentModelEntity(XName.Get("UNOM", "")), new NamedContentModelEntity(XName.Get("BTCH", "")), new NamedContentModelEntity(XName.Get("SCNR", "")), new NamedContentModelEntity(XName.Get("DATE", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (NODU, CUDU, TMEA, UNOM, BTCH, SCNR, DATE)
                    /// </para>
                    /// </summary>
                    public QDELLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NODU, CUDU, TMEA, UNOM, BTCH, SCNR, DATE)
                    /// </para>
                    /// </summary>
                    public string NODU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("NODU", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("NODU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NODU, CUDU, TMEA, UNOM, BTCH, SCNR, DATE)
                    /// </para>
                    /// </summary>
                    public string CUDU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CUDU", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CUDU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NODU, CUDU, TMEA, UNOM, BTCH, SCNR, DATE)
                    /// </para>
                    /// </summary>
                    public string TMEA
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("TMEA", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("TMEA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NODU, CUDU, TMEA, UNOM, BTCH, SCNR, DATE)
                    /// </para>
                    /// </summary>
                    public string UNOM
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("UNOM", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("UNOM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NODU, CUDU, TMEA, UNOM, BTCH, SCNR, DATE)
                    /// </para>
                    /// </summary>
                    public string BTCH
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("BTCH", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("BTCH", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NODU, CUDU, TMEA, UNOM, BTCH, SCNR, DATE)
                    /// </para>
                    /// </summary>
                    public string SCNR
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SCNR", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SCNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (NODU, CUDU, TMEA, UNOM, BTCH, SCNR, DATE)
                    /// </para>
                    /// </summary>
                    public string DATE
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("DATE", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("DATE", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("QDEL", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<QDELLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("NODU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CUDU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("TMEA", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("UNOM", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("BTCH", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SCNR", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DATE", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (COSP, CUCP, UNOM)
                /// </para>
                /// </summary>
                public partial class COSTLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator COSTLocalType(XElement xe) { return XTypedServices.ToXTypedElement<COSTLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static COSTLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("COSP", "")), new NamedContentModelEntity(XName.Get("CUCP", "")), new NamedContentModelEntity(XName.Get("UNOM", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (COSP, CUCP, UNOM)
                    /// </para>
                    /// </summary>
                    public COSTLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (COSP, CUCP, UNOM)
                    /// </para>
                    /// </summary>
                    public string COSP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("COSP", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("COSP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (COSP, CUCP, UNOM)
                    /// </para>
                    /// </summary>
                    public string CUCP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CUCP", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CUCP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (COSP, CUCP, UNOM)
                    /// </para>
                    /// </summary>
                    public string UNOM
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("UNOM", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("UNOM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("COST", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<COSTLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("COSP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CUCP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("UNOM", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                /// </para>
                /// </summary>
                public partial class CRADLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CRADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CRADLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CRADLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ADJI", "")), new NamedContentModelEntity(XName.Get("PERC", "")), new NamedContentModelEntity(XName.Get("VALU", "")), new NamedContentModelEntity(XName.Get("ADJI2", "")), new NamedContentModelEntity(XName.Get("PERC2", "")), new NamedContentModelEntity(XName.Get("VALU2", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public CRADLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string ADJI
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string PERC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string VALU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string ADJI2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string PERC2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string VALU2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CRAD", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CRADLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ADJI", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU2", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP, CREP)
                /// </para>
                /// </summary>
                public partial class CDNOLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CDNOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CDNOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CDNOLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CNDN", "")), new NamedContentModelEntity(XName.Get("SDIR", "")), new NamedContentModelEntity(XName.Get("CNDN2", "")), new NamedContentModelEntity(XName.Get("CNTP", "")), new NamedContentModelEntity(XName.Get("WHNG", "")), new NamedContentModelEntity(XName.Get("SREP", "")), new NamedContentModelEntity(XName.Get("CREP", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP, CREP)
                    /// </para>
                    /// </summary>
                    public CDNOLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP, CREP)
                    /// </para>
                    /// </summary>
                    public string CNDN
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CNDN", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CNDN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP, CREP)
                    /// </para>
                    /// </summary>
                    public string SDIR
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SDIR", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SDIR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP, CREP)
                    /// </para>
                    /// </summary>
                    public string CNDN2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CNDN2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CNDN2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP, CREP)
                    /// </para>
                    /// </summary>
                    public string CNTP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CNTP", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CNTP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP, CREP)
                    /// </para>
                    /// </summary>
                    public string WHNG
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("WHNG", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("WHNG", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP, CREP)
                    /// </para>
                    /// </summary>
                    public string SREP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SREP", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SREP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (CNDN, SDIR, CNDN2, CNTP, WHNG, SREP, CREP)
                    /// </para>
                    /// </summary>
                    public string CREP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CREP", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CREP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CDNO", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CDNOLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("CNDN", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SDIR", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CNDN2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CNTP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("WHNG", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SREP", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("CREP", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (SUPC?)
                /// </para>
                /// </summary>
                public partial class FRDLLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator FRDLLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FRDLLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static FRDLLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SUPC", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (SUPC?)
                    /// </para>
                    /// </summary>
                    public FRDLLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (SUPC?)
                    /// </para>
                    /// </summary>
                    public string SUPC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SUPC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SUPC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("FRDL", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<FRDLLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("SUPC", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, DRAD, VATP, VATC, CUSP)
            /// </para>
            /// </summary>
            public partial class DLALocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator DLALocalType(XElement xe) { return XTypedServices.ToXTypedElement<DLALocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static DLALocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("DRAD", "")), new NamedContentModelEntity(XName.Get("VATP", "")), new NamedContentModelEntity(XName.Get("VATC", "")), new NamedContentModelEntity(XName.Get("CUSP", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, DRAD, VATP, VATC, CUSP)
                /// </para>
                /// </summary>
                public DLALocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, DRAD, VATP, VATC, CUSP)
                /// </para>
                /// </summary>
                public string LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, DRAD, VATP, VATC, CUSP)
                /// </para>
                /// </summary>
                public DRADLocalType DRAD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("DRAD", ""));
                        return ((DRADLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("DRAD", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, DRAD, VATP, VATC, CUSP)
                /// </para>
                /// </summary>
                public string VATP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VATP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VATP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, DRAD, VATP, VATC, CUSP)
                /// </para>
                /// </summary>
                public string VATC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VATC", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VATC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, DRAD, VATP, VATC, CUSP)
                /// </para>
                /// </summary>
                public string CUSP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CUSP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("CUSP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("DLA", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<DLALocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("DRAD", ""), typeof(DRADLocalType));
                    localElementDictionary.Add(XName.Get("VATP", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("VATC", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CUSP", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                /// </para>
                /// </summary>
                public partial class DRADLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator DRADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DRADLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static DRADLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ADJI", "")), new NamedContentModelEntity(XName.Get("PERC", "")), new NamedContentModelEntity(XName.Get("VALU", "")), new NamedContentModelEntity(XName.Get("ADJI2", "")), new NamedContentModelEntity(XName.Get("PERC2", "")), new NamedContentModelEntity(XName.Get("VALU2", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public DRADLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string ADJI
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string PERC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string VALU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string ADJI2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string PERC2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string VALU2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("DRAD", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<DRADLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ADJI", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU2", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
            /// </para>
            /// </summary>
            public partial class VRSLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator VRSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VRSLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static VRSLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("VATP", "")), new NamedContentModelEntity(XName.Get("VATC", "")), new NamedContentModelEntity(XName.Get("NRIL", "")), new NamedContentModelEntity(XName.Get("LSTA", "")), new NamedContentModelEntity(XName.Get("VATA", "")), new NamedContentModelEntity(XName.Get("CRAD", "")), new NamedContentModelEntity(XName.Get("DRAD", "")), new NamedContentModelEntity(XName.Get("ESTA", "")), new NamedContentModelEntity(XName.Get("SEDA", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public VRSLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public string LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public string VATP
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VATP", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VATP", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public string VATC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VATC", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VATC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public string NRIL
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("NRIL", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("NRIL", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public string LSTA
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSTA", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSTA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public string VATA
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("VATA", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("VATA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public CRADLocalType CRAD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CRAD", ""));
                        return ((CRADLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CRAD", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public DRADLocalType DRAD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("DRAD", ""));
                        return ((DRADLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("DRAD", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public string ESTA
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ESTA", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("ESTA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, VATP, VATC, NRIL, LSTA, VATA, CRAD, DRAD, ESTA, SEDA)
                /// </para>
                /// </summary>
                public string SEDA
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("SEDA", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("SEDA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("VRS", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<VRSLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("VATP", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("VATC", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("NRIL", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("LSTA", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("VATA", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("CRAD", ""), typeof(CRADLocalType));
                    localElementDictionary.Add(XName.Get("DRAD", ""), typeof(DRADLocalType));
                    localElementDictionary.Add(XName.Get("ESTA", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("SEDA", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                /// </para>
                /// </summary>
                public partial class CRADLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CRADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CRADLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CRADLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ADJI", "")), new NamedContentModelEntity(XName.Get("PERC", "")), new NamedContentModelEntity(XName.Get("VALU", "")), new NamedContentModelEntity(XName.Get("ADJI2", "")), new NamedContentModelEntity(XName.Get("PERC2", "")), new NamedContentModelEntity(XName.Get("VALU2", "")), new NamedContentModelEntity(XName.Get("ADJI3", "")), new NamedContentModelEntity(XName.Get("PERC3", "")), new NamedContentModelEntity(XName.Get("VALU3", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public CRADLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public string ADJI
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public string PERC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public string VALU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public string ADJI2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public string PERC2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public string VALU2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public string ADJI3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI3", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public string PERC3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC3", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2, ADJI3?, PERC3?, VALU3?)
                    /// </para>
                    /// </summary>
                    public string VALU3
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU3", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CRAD", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CRADLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ADJI", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI3", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC3", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU3", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                /// </para>
                /// </summary>
                public partial class DRADLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator DRADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DRADLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static DRADLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ADJI", "")), new NamedContentModelEntity(XName.Get("PERC", "")), new NamedContentModelEntity(XName.Get("VALU", "")), new NamedContentModelEntity(XName.Get("ADJI2", "")), new NamedContentModelEntity(XName.Get("PERC2", "")), new NamedContentModelEntity(XName.Get("VALU2", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public DRADLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string ADJI
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string PERC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string VALU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string ADJI2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ADJI2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ADJI2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string PERC2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ADJI, PERC, VALU, ADJI2, PERC2, VALU2)
                    /// </para>
                    /// </summary>
                    public string VALU2
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU2", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("DRAD", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<DRADLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ADJI", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("ADJI2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("PERC2", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU2", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LNTA, TVAT, TPAY, TMEA, TNPC)
            /// </para>
            /// </summary>
            public partial class IPDLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator IPDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<IPDLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static IPDLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LNTA", "")), new NamedContentModelEntity(XName.Get("TVAT", "")), new NamedContentModelEntity(XName.Get("TPAY", "")), new NamedContentModelEntity(XName.Get("TMEA", "")), new NamedContentModelEntity(XName.Get("TNPC", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LNTA, TVAT, TPAY, TMEA, TNPC)
                /// </para>
                /// </summary>
                public IPDLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LNTA, TVAT, TPAY, TMEA, TNPC)
                /// </para>
                /// </summary>
                public string LNTA
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LNTA", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LNTA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LNTA, TVAT, TPAY, TMEA, TNPC)
                /// </para>
                /// </summary>
                public string TVAT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TVAT", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TVAT", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LNTA, TVAT, TPAY, TMEA, TNPC)
                /// </para>
                /// </summary>
                public string TPAY
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TPAY", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TPAY", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LNTA, TVAT, TPAY, TMEA, TNPC)
                /// </para>
                /// </summary>
                public string TMEA
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TMEA", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TMEA", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LNTA, TVAT, TPAY, TMEA, TNPC)
                /// </para>
                /// </summary>
                public string TNPC
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TNPC", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TNPC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("IPD", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<IPDLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LNTA", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("TVAT", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("TPAY", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("TMEA", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("TNPC", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (LSNR, TSAM, SETT)
            /// </para>
            /// </summary>
            public partial class SDILocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator SDILocalType(XElement xe) { return XTypedServices.ToXTypedElement<SDILocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static SDILocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LSNR", "")), new NamedContentModelEntity(XName.Get("TSAM", "")), new NamedContentModelEntity(XName.Get("SETT", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LSNR, TSAM, SETT)
                /// </para>
                /// </summary>
                public SDILocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, TSAM, SETT)
                /// </para>
                /// </summary>
                public string LSNR
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("LSNR", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("LSNR", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, TSAM, SETT)
                /// </para>
                /// </summary>
                public string TSAM
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TSAM", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("TSAM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (LSNR, TSAM, SETT)
                /// </para>
                /// </summary>
                public SETTLocalType SETT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("SETT", ""));
                        return ((SETTLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("SETT", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("SDI", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<SDILocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("LSNR", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("TSAM", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("SETT", ""), typeof(SETTLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (PERC, VALU, TERM)
                /// </para>
                /// </summary>
                public partial class SETTLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator SETTLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SETTLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static SETTLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PERC", "")), new NamedContentModelEntity(XName.Get("VALU", "")), new NamedContentModelEntity(XName.Get("TERM", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (PERC, VALU, TERM)
                    /// </para>
                    /// </summary>
                    public SETTLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (PERC, VALU, TERM)
                    /// </para>
                    /// </summary>
                    public string PERC
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("PERC", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("PERC", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (PERC, VALU, TERM)
                    /// </para>
                    /// </summary>
                    public string VALU
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VALU", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("VALU", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (PERC, VALU, TERM)
                    /// </para>
                    /// </summary>
                    public string TERM
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("TERM", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("TERM", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("SETT", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<SETTLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("PERC", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("VALU", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("TERM", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("UNB", ""), typeof(UNB));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("UNB", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public UNB UNB { get { return rootObject as UNB; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(UNB root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public UNB UNB { get { return rootObject as UNB; } }

        private XRoot()
        {
        }

        public XRoot(UNB root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}