//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;


namespace Spar.Data.XsdModels.Invoices.InvoiceI
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     This code was generated by a tool.
    //     Runtime Version:4.0.30319.42000
    //
    //     Changes to this file may cause incorrect behavior and will be lost if
    //     the code is regenerated.
    // </auto-generated>
    //------------------------------------------------------------------------------

    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Xml;
    using System.Xml.Linq;
    using System.Xml.Schema;
    using Xml.Schema.Linq;



    /// <summary>
    /// <para>
    /// Regular expression: (TAXINV*)
    /// </para>
    /// </summary>
    public partial class InvoiceDocument : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TAXINVLocalType> TAXINVField;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator InvoiceDocument(XElement xe) { return XTypedServices.ToXTypedElement<InvoiceDocument>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static InvoiceDocument()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TAXINV", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (TAXINV*)
        /// </para>
        /// </summary>
        public InvoiceDocument()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TAXINV*)
        /// </para>
        /// </summary>
        public IList<InvoiceDocument.TAXINVLocalType> TAXINV
        {
            get
            {
                if ((this.TAXINVField == null))
                {
                    this.TAXINVField = new XTypedList<TAXINVLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("TAXINV", ""));
                }
                return this.TAXINVField;
            }
            set
            {
                if ((value == null))
                {
                    this.TAXINVField = null;
                }
                else
                {
                    if ((this.TAXINVField == null))
                    {
                        this.TAXINVField = XTypedList<TAXINVLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TAXINV", ""));
                    }
                    else
                    {
                        XTypedServices.SetList<TAXINVLocalType>(this.TAXINVField, value);
                    }
                }
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("InvoiceDocument", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static InvoiceDocument Load(string xmlFile)
        {
            return XTypedServices.Load<InvoiceDocument>(xmlFile);
        }

        public static InvoiceDocument Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<InvoiceDocument>(xmlFile);
        }

        public static InvoiceDocument Parse(string xml)
        {
            return XTypedServices.Parse<InvoiceDocument>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<InvoiceDocument>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("TAXINV", ""), typeof(TAXINVLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (UNB)
        /// </para>
        /// </summary>
        public partial class TAXINVLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator TAXINVLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TAXINVLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static TAXINVLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("UNB", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (UNB)
            /// </para>
            /// </summary>
            public TAXINVLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (UNB)
            /// </para>
            /// </summary>
            public UNBLocalType UNB
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("UNB", ""));
                    return ((UNBLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("UNB", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("TAXINV", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<TAXINVLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("UNB", ""), typeof(UNBLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (CreationDateTime?, INTERCHANGESENDER, INTERCHANGERECIPIENT, UNH, IPD)
            /// </para>
            /// </summary>
            public partial class UNBLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator UNBLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UNBLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static UNBLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CreationDateTime", "")), new NamedContentModelEntity(XName.Get("INTERCHANGESENDER", "")), new NamedContentModelEntity(XName.Get("INTERCHANGERECIPIENT", "")), new NamedContentModelEntity(XName.Get("UNH", "")), new NamedContentModelEntity(XName.Get("IPD", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (CreationDateTime?, INTERCHANGESENDER, INTERCHANGERECIPIENT, UNH, IPD)
                /// </para>
                /// </summary>
                public UNBLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (CreationDateTime?, INTERCHANGESENDER, INTERCHANGERECIPIENT, UNH, IPD)
                /// </para>
                /// </summary>
                public CreationDateTimeLocalType CreationDateTime
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("CreationDateTime", ""));
                        return ((CreationDateTimeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("CreationDateTime", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CreationDateTime?, INTERCHANGESENDER, INTERCHANGERECIPIENT, UNH, IPD)
                /// </para>
                /// </summary>
                public INTERCHANGESENDERLocalType INTERCHANGESENDER
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("INTERCHANGESENDER", ""));
                        return ((INTERCHANGESENDERLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("INTERCHANGESENDER", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CreationDateTime?, INTERCHANGESENDER, INTERCHANGERECIPIENT, UNH, IPD)
                /// </para>
                /// </summary>
                public INTERCHANGERECIPIENTLocalType INTERCHANGERECIPIENT
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("INTERCHANGERECIPIENT", ""));
                        return ((INTERCHANGERECIPIENTLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("INTERCHANGERECIPIENT", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CreationDateTime?, INTERCHANGESENDER, INTERCHANGERECIPIENT, UNH, IPD)
                /// </para>
                /// </summary>
                public UNHLocalType UNH
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("UNH", ""));
                        return ((UNHLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("UNH", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (CreationDateTime?, INTERCHANGESENDER, INTERCHANGERECIPIENT, UNH, IPD)
                /// </para>
                /// </summary>
                public IPDLocalType IPD
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("IPD", ""));
                        return ((IPDLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("IPD", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("UNB", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<UNBLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("CreationDateTime", ""), typeof(CreationDateTimeLocalType));
                    localElementDictionary.Add(XName.Get("INTERCHANGESENDER", ""), typeof(INTERCHANGESENDERLocalType));
                    localElementDictionary.Add(XName.Get("INTERCHANGERECIPIENT", ""), typeof(INTERCHANGERECIPIENTLocalType));
                    localElementDictionary.Add(XName.Get("UNH", ""), typeof(UNHLocalType));
                    localElementDictionary.Add(XName.Get("IPD", ""), typeof(IPDLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Date)
                /// </para>
                /// </summary>
                public partial class CreationDateTimeLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator CreationDateTimeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CreationDateTimeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static CreationDateTimeLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Date", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Date)
                    /// </para>
                    /// </summary>
                    public CreationDateTimeLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Date)
                    /// </para>
                    /// </summary>
                    public System.DateTime Date
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Date", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("CreationDateTime", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<CreationDateTimeLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("Date", ""), typeof(System.DateTime));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (SenderIdentification)
                /// </para>
                /// </summary>
                public partial class INTERCHANGESENDERLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator INTERCHANGESENDERLocalType(XElement xe) { return XTypedServices.ToXTypedElement<INTERCHANGESENDERLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static INTERCHANGESENDERLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SenderIdentification", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (SenderIdentification)
                    /// </para>
                    /// </summary>
                    public INTERCHANGESENDERLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (SenderIdentification)
                    /// </para>
                    /// </summary>
                    public string SenderIdentification
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SenderIdentification", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SenderIdentification", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("INTERCHANGESENDER", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<INTERCHANGESENDERLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("SenderIdentification", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (RecipientIdentification)
                /// </para>
                /// </summary>
                public partial class INTERCHANGERECIPIENTLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator INTERCHANGERECIPIENTLocalType(XElement xe) { return XTypedServices.ToXTypedElement<INTERCHANGERECIPIENTLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static INTERCHANGERECIPIENTLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RecipientIdentification", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (RecipientIdentification)
                    /// </para>
                    /// </summary>
                    public INTERCHANGERECIPIENTLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (RecipientIdentification)
                    /// </para>
                    /// </summary>
                    public string RecipientIdentification
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("RecipientIdentification", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("RecipientIdentification", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("INTERCHANGERECIPIENT", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<INTERCHANGERECIPIENTLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("RecipientIdentification", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                /// </para>
                /// </summary>
                public partial class UNHLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<ILDLocalType> ILDField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator UNHLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UNHLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static UNHLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageReferenceNumber", "")), new NamedContentModelEntity(XName.Get("MessageIdentifier", "")), new NamedContentModelEntity(XName.Get("CommonAccessReference", "")), new NamedContentModelEntity(XName.Get("SAP", "")), new NamedContentModelEntity(XName.Get("SDP", "")), new NamedContentModelEntity(XName.Get("CLO", "")), new NamedContentModelEntity(XName.Get("IRE", "")), new NamedContentModelEntity(XName.Get("NAR", "")), new NamedContentModelEntity(XName.Get("ODD", "")), new NamedContentModelEntity(XName.Get("ILD", "")), new NamedContentModelEntity(XName.Get("VRS", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public UNHLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public sbyte MessageReferenceNumber
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("MessageReferenceNumber", ""));
                            return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("MessageReferenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public MessageIdentifierLocalType MessageIdentifier
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("MessageIdentifier", ""));
                            return ((MessageIdentifierLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("MessageIdentifier", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public string CommonAccessReference
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CommonAccessReference", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("CommonAccessReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public SAPLocalType SAP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SAP", ""));
                            return ((SAPLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("SAP", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public SDPLocalType SDP
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SDP", ""));
                            return ((SDPLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("SDP", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public CLOLocalType CLO
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CLO", ""));
                            return ((CLOLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("CLO", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public IRELocalType IRE
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("IRE", ""));
                            return ((IRELocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("IRE", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public NARLocalType NAR
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("NAR", ""));
                            return ((NARLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("NAR", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public ODDLocalType ODD
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ODD", ""));
                            return ((ODDLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("ODD", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public IList<InvoiceDocument.TAXINVLocalType.UNBLocalType.UNHLocalType.ILDLocalType> ILD
                    {
                        get
                        {
                            if ((this.ILDField == null))
                            {
                                this.ILDField = new XTypedList<ILDLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("ILD", ""));
                            }
                            return this.ILDField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.ILDField = null;
                            }
                            else
                            {
                                if ((this.ILDField == null))
                                {
                                    this.ILDField = XTypedList<ILDLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("ILD", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<ILDLocalType>(this.ILDField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNumber, MessageIdentifier, CommonAccessReference, SAP, SDP?, CLO, IRE, NAR, ODD, ILD*, VRS)
                    /// </para>
                    /// </summary>
                    public VRSLocalType VRS
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("VRS", ""));
                            return ((VRSLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("VRS", ""), value);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("UNH", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<UNHLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("MessageReferenceNumber", ""), typeof(sbyte));
                        localElementDictionary.Add(XName.Get("MessageIdentifier", ""), typeof(MessageIdentifierLocalType));
                        localElementDictionary.Add(XName.Get("CommonAccessReference", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SAP", ""), typeof(SAPLocalType));
                        localElementDictionary.Add(XName.Get("SDP", ""), typeof(SDPLocalType));
                        localElementDictionary.Add(XName.Get("CLO", ""), typeof(CLOLocalType));
                        localElementDictionary.Add(XName.Get("IRE", ""), typeof(IRELocalType));
                        localElementDictionary.Add(XName.Get("NAR", ""), typeof(NARLocalType));
                        localElementDictionary.Add(XName.Get("ODD", ""), typeof(ODDLocalType));
                        localElementDictionary.Add(XName.Get("ILD", ""), typeof(ILDLocalType));
                        localElementDictionary.Add(XName.Get("VRS", ""), typeof(VRSLocalType));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                    /// </para>
                    /// </summary>
                    public partial class MessageIdentifierLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator MessageIdentifierLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MessageIdentifierLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static MessageIdentifierLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageType", "")), new NamedContentModelEntity(XName.Get("MessageVersionNumber", "")), new NamedContentModelEntity(XName.Get("MessageReleaseNumber", "")), new NamedContentModelEntity(XName.Get("ControllingAgency", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                        /// </para>
                        /// </summary>
                        public MessageIdentifierLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                        /// </para>
                        /// </summary>
                        public string MessageType
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("MessageType", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("MessageType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                        /// </para>
                        /// </summary>
                        public sbyte MessageVersionNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("MessageVersionNumber", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("MessageVersionNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                        /// </para>
                        /// </summary>
                        public sbyte MessageReleaseNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("MessageReleaseNumber", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("MessageReleaseNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (MessageType, MessageVersionNumber, MessageReleaseNumber, ControllingAgency)
                        /// </para>
                        /// </summary>
                        public string ControllingAgency
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ControllingAgency", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("ControllingAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("MessageIdentifier", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<MessageIdentifierLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("MessageType", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("MessageVersionNumber", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("MessageReleaseNumber", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("ControllingAgency", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (SupplierAccountingPoint, SupplierVatRegistrationNumber, SupplierAddress)
                    /// </para>
                    /// </summary>
                    public partial class SAPLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator SAPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SAPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static SAPLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SupplierAccountingPoint", "")), new NamedContentModelEntity(XName.Get("SupplierVatRegistrationNumber", "")), new NamedContentModelEntity(XName.Get("SupplierAddress", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (SupplierAccountingPoint, SupplierVatRegistrationNumber, SupplierAddress)
                        /// </para>
                        /// </summary>
                        public SAPLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SupplierAccountingPoint, SupplierVatRegistrationNumber, SupplierAddress)
                        /// </para>
                        /// </summary>
                        public string SupplierAccountingPoint
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("SupplierAccountingPoint", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("SupplierAccountingPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SupplierAccountingPoint, SupplierVatRegistrationNumber, SupplierAddress)
                        /// </para>
                        /// </summary>
                        public string SupplierVatRegistrationNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("SupplierVatRegistrationNumber", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("SupplierVatRegistrationNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SupplierAccountingPoint, SupplierVatRegistrationNumber, SupplierAddress)
                        /// </para>
                        /// </summary>
                        public string SupplierAddress
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("SupplierAddress", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("SupplierAddress", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("SAP", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<SAPLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("SupplierAccountingPoint", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("SupplierVatRegistrationNumber", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("SupplierAddress", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (SupplierDespatchPoint)
                    /// </para>
                    /// </summary>
                    public partial class SDPLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator SDPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SDPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static SDPLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SupplierDespatchPoint", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (SupplierDespatchPoint)
                        /// </para>
                        /// </summary>
                        public SDPLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SupplierDespatchPoint)
                        /// </para>
                        /// </summary>
                        public string SupplierDespatchPoint
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("SupplierDespatchPoint", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("SupplierDespatchPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("SDP", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<SDPLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("SupplierDespatchPoint", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (CustomerDeliveryInvoicePoint, CustomerOrderPoint, CustomerDeliveryPointName, AlternateInvoicePoint)
                    /// </para>
                    /// </summary>
                    public partial class CLOLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator CLOLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CLOLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static CLOLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CustomerDeliveryInvoicePoint", "")), new NamedContentModelEntity(XName.Get("CustomerOrderPoint", "")), new NamedContentModelEntity(XName.Get("CustomerDeliveryPointName", "")), new NamedContentModelEntity(XName.Get("AlternateInvoicePoint", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (CustomerDeliveryInvoicePoint, CustomerOrderPoint, CustomerDeliveryPointName, AlternateInvoicePoint)
                        /// </para>
                        /// </summary>
                        public CLOLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (CustomerDeliveryInvoicePoint, CustomerOrderPoint, CustomerDeliveryPointName, AlternateInvoicePoint)
                        /// </para>
                        /// </summary>
                        public string CustomerDeliveryInvoicePoint
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("CustomerDeliveryInvoicePoint", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("CustomerDeliveryInvoicePoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (CustomerDeliveryInvoicePoint, CustomerOrderPoint, CustomerDeliveryPointName, AlternateInvoicePoint)
                        /// </para>
                        /// </summary>
                        public string CustomerOrderPoint
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("CustomerOrderPoint", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("CustomerOrderPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (CustomerDeliveryInvoicePoint, CustomerOrderPoint, CustomerDeliveryPointName, AlternateInvoicePoint)
                        /// </para>
                        /// </summary>
                        public string CustomerDeliveryPointName
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("CustomerDeliveryPointName", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("CustomerDeliveryPointName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (CustomerDeliveryInvoicePoint, CustomerOrderPoint, CustomerDeliveryPointName, AlternateInvoicePoint)
                        /// </para>
                        /// </summary>
                        public string AlternateInvoicePoint
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("AlternateInvoicePoint", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("AlternateInvoicePoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("CLO", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<CLOLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("CustomerDeliveryInvoicePoint", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("CustomerOrderPoint", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("CustomerDeliveryPointName", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("AlternateInvoicePoint", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (InvoiceReferences)
                    /// </para>
                    /// </summary>
                    public partial class IRELocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator IRELocalType(XElement xe) { return XTypedServices.ToXTypedElement<IRELocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static IRELocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("InvoiceReferences", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (InvoiceReferences)
                        /// </para>
                        /// </summary>
                        public IRELocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (InvoiceReferences)
                        /// </para>
                        /// </summary>
                        public InvoiceReferencesLocalType InvoiceReferences
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("InvoiceReferences", ""));
                                return ((InvoiceReferencesLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("InvoiceReferences", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("IRE", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<IRELocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("InvoiceReferences", ""), typeof(InvoiceReferencesLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Number, Date)
                        /// </para>
                        /// </summary>
                        public partial class InvoiceReferencesLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator InvoiceReferencesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InvoiceReferencesLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static InvoiceReferencesLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Number", "")), new NamedContentModelEntity(XName.Get("Date", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Number, Date)
                            /// </para>
                            /// </summary>
                            public InvoiceReferencesLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Number, Date)
                            /// </para>
                            /// </summary>
                            public string Number
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Number", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Number, Date)
                            /// </para>
                            /// </summary>
                            public System.DateTime Date
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Date", ""));
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("InvoiceReferences", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<InvoiceReferencesLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Number", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("Date", ""), typeof(System.DateTime));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (LineSequenceNumber, NarrativeLine)
                    /// </para>
                    /// </summary>
                    public partial class NARLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator NARLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NARLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static NARLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LineSequenceNumber", "")), new NamedContentModelEntity(XName.Get("NarrativeLine", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, NarrativeLine)
                        /// </para>
                        /// </summary>
                        public NARLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, NarrativeLine)
                        /// </para>
                        /// </summary>
                        public sbyte LineSequenceNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("LineSequenceNumber", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("LineSequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, NarrativeLine)
                        /// </para>
                        /// </summary>
                        public string NarrativeLine
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("NarrativeLine", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("NarrativeLine", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("NAR", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<NARLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("LineSequenceNumber", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("NarrativeLine", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (LineSequenceNumber, OrderNumberAndDate)
                    /// </para>
                    /// </summary>
                    public partial class ODDLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator ODDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ODDLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static ODDLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LineSequenceNumber", "")), new NamedContentModelEntity(XName.Get("OrderNumberAndDate", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, OrderNumberAndDate)
                        /// </para>
                        /// </summary>
                        public ODDLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, OrderNumberAndDate)
                        /// </para>
                        /// </summary>
                        public sbyte LineSequenceNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("LineSequenceNumber", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("LineSequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, OrderNumberAndDate)
                        /// </para>
                        /// </summary>
                        public OrderNumberAndDateLocalType OrderNumberAndDate
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("OrderNumberAndDate", ""));
                                return ((OrderNumberAndDateLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("OrderNumberAndDate", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("ODD", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<ODDLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("LineSequenceNumber", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("OrderNumberAndDate", ""), typeof(OrderNumberAndDateLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (CustomerOrderNumber, DateOrderPlacedByCustomer?)
                        /// </para>
                        /// </summary>
                        public partial class OrderNumberAndDateLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator OrderNumberAndDateLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OrderNumberAndDateLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static OrderNumberAndDateLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CustomerOrderNumber", "")), new NamedContentModelEntity(XName.Get("DateOrderPlacedByCustomer", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (CustomerOrderNumber, DateOrderPlacedByCustomer?)
                            /// </para>
                            /// </summary>
                            public OrderNumberAndDateLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (CustomerOrderNumber, DateOrderPlacedByCustomer?)
                            /// </para>
                            /// </summary>
                            public sbyte CustomerOrderNumber
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("CustomerOrderNumber", ""));
                                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("CustomerOrderNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (CustomerOrderNumber, DateOrderPlacedByCustomer?)
                            /// </para>
                            /// </summary>
                            public System.Nullable<System.DateTime> DateOrderPlacedByCustomer
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DateOrderPlacedByCustomer", ""));
                                    if ((x == null))
                                    {
                                        return null;
                                    }
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DateOrderPlacedByCustomer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("OrderNumberAndDate", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<OrderNumberAndDateLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("CustomerOrderNumber", ""), typeof(sbyte));
                                localElementDictionary.Add(XName.Get("DateOrderPlacedByCustomer", ""), typeof(System.DateTime));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                    /// </para>
                    /// </summary>
                    public partial class ILDLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<CreditAdjustmentLocalType> CreditAdjustmentField;

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator ILDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ILDLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static ILDLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LineSequenceNumber", "")), new NamedContentModelEntity(XName.Get("ProductNumber", "")), new NamedContentModelEntity(XName.Get("QuantityDelivered", "")), new NamedContentModelEntity(XName.Get("CreditAdjustment", "")), new NamedContentModelEntity(XName.Get("CostPriceExclVat", "")), new NamedContentModelEntity(XName.Get("NetExtendedLineCostExclVat", "")), new NamedContentModelEntity(XName.Get("VatRatePercentage", "")), new NamedContentModelEntity(XName.Get("VatRateCode", "")), new NamedContentModelEntity(XName.Get("NetConsumerUnitCostPrice", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public ILDLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public sbyte LineSequenceNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("LineSequenceNumber", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("LineSequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public ProductNumberLocalType ProductNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ProductNumber", ""));
                                return ((ProductNumberLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ProductNumber", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public QuantityDeliveredLocalType QuantityDelivered
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("QuantityDelivered", ""));
                                return ((QuantityDeliveredLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("QuantityDelivered", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public IList<InvoiceDocument.TAXINVLocalType.UNBLocalType.UNHLocalType.ILDLocalType.CreditAdjustmentLocalType> CreditAdjustment
                        {
                            get
                            {
                                if ((this.CreditAdjustmentField == null))
                                {
                                    this.CreditAdjustmentField = new XTypedList<CreditAdjustmentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("CreditAdjustment", ""));
                                }
                                return this.CreditAdjustmentField;
                            }
                            set
                            {
                                if ((value == null))
                                {
                                    this.CreditAdjustmentField = null;
                                }
                                else
                                {
                                    if ((this.CreditAdjustmentField == null))
                                    {
                                        this.CreditAdjustmentField = XTypedList<CreditAdjustmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CreditAdjustment", ""));
                                    }
                                    else
                                    {
                                        XTypedServices.SetList<CreditAdjustmentLocalType>(this.CreditAdjustmentField, value);
                                    }
                                }
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public CostPriceExclVatLocalType CostPriceExclVat
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("CostPriceExclVat", ""));
                                return ((CostPriceExclVatLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("CostPriceExclVat", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public float NetExtendedLineCostExclVat
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("NetExtendedLineCostExclVat", ""));
                                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("NetExtendedLineCostExclVat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public sbyte VatRatePercentage
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("VatRatePercentage", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("VatRatePercentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public string VatRateCode
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("VatRateCode", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("VatRateCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, ProductNumber, QuantityDelivered, CreditAdjustment*, CostPriceExclVat, NetExtendedLineCostExclVat, VatRatePercentage, VatRateCode, NetConsumerUnitCostPrice)
                        /// </para>
                        /// </summary>
                        public float NetConsumerUnitCostPrice
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("NetConsumerUnitCostPrice", ""));
                                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("NetConsumerUnitCostPrice", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("ILD", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<ILDLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("LineSequenceNumber", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("ProductNumber", ""), typeof(ProductNumberLocalType));
                            localElementDictionary.Add(XName.Get("QuantityDelivered", ""), typeof(QuantityDeliveredLocalType));
                            localElementDictionary.Add(XName.Get("CreditAdjustment", ""), typeof(CreditAdjustmentLocalType));
                            localElementDictionary.Add(XName.Get("CostPriceExclVat", ""), typeof(CostPriceExclVatLocalType));
                            localElementDictionary.Add(XName.Get("NetExtendedLineCostExclVat", ""), typeof(float));
                            localElementDictionary.Add(XName.Get("VatRatePercentage", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("VatRateCode", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("NetConsumerUnitCostPrice", ""), typeof(float));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ProductNumberofConsumerUnit, ProductNumberofOrderUnit?, ProductDescription)
                        /// </para>
                        /// </summary>
                        public partial class ProductNumberLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator ProductNumberLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ProductNumberLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static ProductNumberLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProductNumberofConsumerUnit", "")), new NamedContentModelEntity(XName.Get("ProductNumberofOrderUnit", "")), new NamedContentModelEntity(XName.Get("ProductDescription", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ProductNumberofConsumerUnit, ProductNumberofOrderUnit?, ProductDescription)
                            /// </para>
                            /// </summary>
                            public ProductNumberLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ProductNumberofConsumerUnit, ProductNumberofOrderUnit?, ProductDescription)
                            /// </para>
                            /// </summary>
                            public string ProductNumberofConsumerUnit
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ProductNumberofConsumerUnit", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ProductNumberofConsumerUnit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (ProductNumberofConsumerUnit, ProductNumberofOrderUnit?, ProductDescription)
                            /// </para>
                            /// </summary>
                            public string ProductNumberofOrderUnit
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ProductNumberofOrderUnit", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ProductNumberofOrderUnit", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ProductNumberofConsumerUnit, ProductNumberofOrderUnit?, ProductDescription)
                            /// </para>
                            /// </summary>
                            public string ProductDescription
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ProductDescription", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ProductDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("ProductNumber", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<ProductNumberLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ProductNumberofConsumerUnit", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("ProductNumberofOrderUnit", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("ProductDescription", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (NumberOfUnitsDelivered, ConsumerUnitsPerUnitDelivered, UnitOfMeasure?)
                        /// </para>
                        /// </summary>
                        public partial class QuantityDeliveredLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator QuantityDeliveredLocalType(XElement xe) { return XTypedServices.ToXTypedElement<QuantityDeliveredLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static QuantityDeliveredLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NumberOfUnitsDelivered", "")), new NamedContentModelEntity(XName.Get("ConsumerUnitsPerUnitDelivered", "")), new NamedContentModelEntity(XName.Get("UnitOfMeasure", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (NumberOfUnitsDelivered, ConsumerUnitsPerUnitDelivered, UnitOfMeasure?)
                            /// </para>
                            /// </summary>
                            public QuantityDeliveredLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (NumberOfUnitsDelivered, ConsumerUnitsPerUnitDelivered, UnitOfMeasure?)
                            /// </para>
                            /// </summary>
                            public sbyte NumberOfUnitsDelivered
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("NumberOfUnitsDelivered", ""));
                                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("NumberOfUnitsDelivered", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (NumberOfUnitsDelivered, ConsumerUnitsPerUnitDelivered, UnitOfMeasure?)
                            /// </para>
                            /// </summary>
                            public sbyte ConsumerUnitsPerUnitDelivered
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ConsumerUnitsPerUnitDelivered", ""));
                                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ConsumerUnitsPerUnitDelivered", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (NumberOfUnitsDelivered, ConsumerUnitsPerUnitDelivered, UnitOfMeasure?)
                            /// </para>
                            /// </summary>
                            public string UnitOfMeasure
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("UnitOfMeasure", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("UnitOfMeasure", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("QuantityDelivered", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<QuantityDeliveredLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("NumberOfUnitsDelivered", ""), typeof(sbyte));
                                localElementDictionary.Add(XName.Get("ConsumerUnitsPerUnitDelivered", ""), typeof(sbyte));
                                localElementDictionary.Add(XName.Get("UnitOfMeasure", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Indicator, Value, Percentage)
                        /// </para>
                        /// </summary>
                        public partial class CreditAdjustmentLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator CreditAdjustmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CreditAdjustmentLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static CreditAdjustmentLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Indicator", "")), new NamedContentModelEntity(XName.Get("Value", "")), new NamedContentModelEntity(XName.Get("Percentage", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (Indicator, Value, Percentage)
                            /// </para>
                            /// </summary>
                            public CreditAdjustmentLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Indicator, Value, Percentage)
                            /// </para>
                            /// </summary>
                            public string Indicator
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Indicator", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Indicator", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Indicator, Value, Percentage)
                            /// </para>
                            /// </summary>
                            public string Value
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Value", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (Indicator, Value, Percentage)
                            /// </para>
                            /// </summary>
                            public string Percentage
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("Percentage", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("Percentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("CreditAdjustment", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<CreditAdjustmentLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("Indicator", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("Value", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("Percentage", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (CostPrice, ConsumerUnitsPerCostPrice)
                        /// </para>
                        /// </summary>
                        public partial class CostPriceExclVatLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator CostPriceExclVatLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CostPriceExclVatLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static CostPriceExclVatLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CostPrice", "")), new NamedContentModelEntity(XName.Get("ConsumerUnitsPerCostPrice", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (CostPrice, ConsumerUnitsPerCostPrice)
                            /// </para>
                            /// </summary>
                            public CostPriceExclVatLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (CostPrice, ConsumerUnitsPerCostPrice)
                            /// </para>
                            /// </summary>
                            public float CostPrice
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("CostPrice", ""));
                                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("CostPrice", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (CostPrice, ConsumerUnitsPerCostPrice)
                            /// </para>
                            /// </summary>
                            public sbyte ConsumerUnitsPerCostPrice
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ConsumerUnitsPerCostPrice", ""));
                                    return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ConsumerUnitsPerCostPrice", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("CostPriceExclVat", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<CostPriceExclVatLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("CostPrice", ""), typeof(float));
                                localElementDictionary.Add(XName.Get("ConsumerUnitsPerCostPrice", ""), typeof(sbyte));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (LineSequenceNumber, VatRatePercentage, VatRateCode, NumberOfItemLines, LineSubTotalExclVat, VatAmountPayable)
                    /// </para>
                    /// </summary>
                    public partial class VRSLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator VRSLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VRSLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static VRSLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LineSequenceNumber", "")), new NamedContentModelEntity(XName.Get("VatRatePercentage", "")), new NamedContentModelEntity(XName.Get("VatRateCode", "")), new NamedContentModelEntity(XName.Get("NumberOfItemLines", "")), new NamedContentModelEntity(XName.Get("LineSubTotalExclVat", "")), new NamedContentModelEntity(XName.Get("VatAmountPayable", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, VatRatePercentage, VatRateCode, NumberOfItemLines, LineSubTotalExclVat, VatAmountPayable)
                        /// </para>
                        /// </summary>
                        public VRSLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, VatRatePercentage, VatRateCode, NumberOfItemLines, LineSubTotalExclVat, VatAmountPayable)
                        /// </para>
                        /// </summary>
                        public sbyte LineSequenceNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("LineSequenceNumber", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("LineSequenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, VatRatePercentage, VatRateCode, NumberOfItemLines, LineSubTotalExclVat, VatAmountPayable)
                        /// </para>
                        /// </summary>
                        public sbyte VatRatePercentage
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("VatRatePercentage", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("VatRatePercentage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, VatRatePercentage, VatRateCode, NumberOfItemLines, LineSubTotalExclVat, VatAmountPayable)
                        /// </para>
                        /// </summary>
                        public string VatRateCode
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("VatRateCode", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("VatRateCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, VatRatePercentage, VatRateCode, NumberOfItemLines, LineSubTotalExclVat, VatAmountPayable)
                        /// </para>
                        /// </summary>
                        public sbyte NumberOfItemLines
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("NumberOfItemLines", ""));
                                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("NumberOfItemLines", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, VatRatePercentage, VatRateCode, NumberOfItemLines, LineSubTotalExclVat, VatAmountPayable)
                        /// </para>
                        /// </summary>
                        public float LineSubTotalExclVat
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("LineSubTotalExclVat", ""));
                                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("LineSubTotalExclVat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineSequenceNumber, VatRatePercentage, VatRateCode, NumberOfItemLines, LineSubTotalExclVat, VatAmountPayable)
                        /// </para>
                        /// </summary>
                        public float VatAmountPayable
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("VatAmountPayable", ""));
                                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("VatAmountPayable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("VRS", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<VRSLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("LineSequenceNumber", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("VatRatePercentage", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("VatRateCode", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("NumberOfItemLines", ""), typeof(sbyte));
                            localElementDictionary.Add(XName.Get("LineSubTotalExclVat", ""), typeof(float));
                            localElementDictionary.Add(XName.Get("VatAmountPayable", ""), typeof(float));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LinesNetTotalCostExclVat, TotalVatAmountPayable, TotalAmountPayableInclVat)
                /// </para>
                /// </summary>
                public partial class IPDLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator IPDLocalType(XElement xe) { return XTypedServices.ToXTypedElement<IPDLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static IPDLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LinesNetTotalCostExclVat", "")), new NamedContentModelEntity(XName.Get("TotalVatAmountPayable", "")), new NamedContentModelEntity(XName.Get("TotalAmountPayableInclVat", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (LinesNetTotalCostExclVat, TotalVatAmountPayable, TotalAmountPayableInclVat)
                    /// </para>
                    /// </summary>
                    public IPDLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LinesNetTotalCostExclVat, TotalVatAmountPayable, TotalAmountPayableInclVat)
                    /// </para>
                    /// </summary>
                    public float LinesNetTotalCostExclVat
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("LinesNetTotalCostExclVat", ""));
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("LinesNetTotalCostExclVat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LinesNetTotalCostExclVat, TotalVatAmountPayable, TotalAmountPayableInclVat)
                    /// </para>
                    /// </summary>
                    public float TotalVatAmountPayable
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("TotalVatAmountPayable", ""));
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("TotalVatAmountPayable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LinesNetTotalCostExclVat, TotalVatAmountPayable, TotalAmountPayableInclVat)
                    /// </para>
                    /// </summary>
                    public float TotalAmountPayableInclVat
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("TotalAmountPayableInclVat", ""));
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("TotalAmountPayableInclVat", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("IPD", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<IPDLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("LinesNetTotalCostExclVat", ""), typeof(float));
                        localElementDictionary.Add(XName.Get("TotalVatAmountPayable", ""), typeof(float));
                        localElementDictionary.Add(XName.Get("TotalAmountPayableInclVat", ""), typeof(float));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("InvoiceDocument", ""), typeof(InvoiceDocument));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("InvoiceDocument", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public InvoiceDocument InvoiceDocument { get { return rootObject as InvoiceDocument; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(InvoiceDocument root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public InvoiceDocument InvoiceDocument { get { return rootObject as InvoiceDocument; } }

        private XRoot()
        {
        }

        public XRoot(InvoiceDocument root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

}