//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;


namespace DocumentTracking.Data.XsdModels.DeliveryNote
{

    /// <summary>
    /// <para>
    /// Regular expression: (Ordrsp)
    /// </para>
    /// </summary>
    public partial class Ordresp : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator Ordresp(XElement xe) { return XTypedServices.ToXTypedElement<Ordresp>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static Ordresp()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Ordrsp", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Ordrsp)
        /// </para>
        /// </summary>
        public Ordresp()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Ordrsp)
        /// </para>
        /// </summary>
        public OrdrspLocalType Ordrsp
        {
            get
            {
                XElement x = this.GetElement(XName.Get("Ordrsp", ""));
                return ((OrdrspLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("Ordrsp", ""), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("Ordresp", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static Ordresp Load(string xmlFile)
        {
            return XTypedServices.Load<Ordresp>(xmlFile);
        }

        public static Ordresp Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<Ordresp>(xmlFile);
        }

        public static Ordresp Parse(string xml)
        {
            return XTypedServices.Parse<Ordresp>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<Ordresp>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("Ordrsp", ""), typeof(OrdrspLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (Header)
        /// </para>
        /// </summary>
        public partial class OrdrspLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator OrdrspLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OrdrspLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static OrdrspLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Header", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Header)
            /// </para>
            /// </summary>
            public OrdrspLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Header)
            /// </para>
            /// </summary>
            public HeaderLocalType Header
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("Header", ""));
                    return ((HeaderLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("Header", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("Ordrsp", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<OrdrspLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("Header", ""), typeof(HeaderLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (Sender, Receiver, InterchangeNo, Date, MessageHeader)
            /// </para>
            /// </summary>
            public partial class HeaderLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator HeaderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HeaderLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static HeaderLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Sender", "")), new NamedContentModelEntity(XName.Get("Receiver", "")), new NamedContentModelEntity(XName.Get("InterchangeNo", "")), new NamedContentModelEntity(XName.Get("Date", "")), new NamedContentModelEntity(XName.Get("MessageHeader", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date, MessageHeader)
                /// </para>
                /// </summary>
                public HeaderLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date, MessageHeader)
                /// </para>
                /// </summary>
                public string Sender
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Sender", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Sender", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date, MessageHeader)
                /// </para>
                /// </summary>
                public string Receiver
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Receiver", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Receiver", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date, MessageHeader)
                /// </para>
                /// </summary>
                public string InterchangeNo
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("InterchangeNo", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("InterchangeNo", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date, MessageHeader)
                /// </para>
                /// </summary>
                public System.DateTime Date
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("Date", ""));
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Sender, Receiver, InterchangeNo, Date, MessageHeader)
                /// </para>
                /// </summary>
                public MessageHeaderLocalType MessageHeader
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("MessageHeader", ""));
                        return ((MessageHeaderLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("MessageHeader", ""), value);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("Header", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<HeaderLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("Sender", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("Receiver", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("InterchangeNo", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("Date", ""), typeof(System.DateTime));
                    localElementDictionary.Add(XName.Get("MessageHeader", ""), typeof(MessageHeaderLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (MessageReferenceNr, MessageType, SupplierDetails, CustomerLocation, RspDetails, OrderDetails, OrderLineDetails)
                /// </para>
                /// </summary>
                public partial class MessageHeaderLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator MessageHeaderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MessageHeaderLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static MessageHeaderLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageReferenceNr", "")), new NamedContentModelEntity(XName.Get("MessageType", "")), new NamedContentModelEntity(XName.Get("SupplierDetails", "")), new NamedContentModelEntity(XName.Get("CustomerLocation", "")), new NamedContentModelEntity(XName.Get("RspDetails", "")), new NamedContentModelEntity(XName.Get("OrderDetails", "")), new NamedContentModelEntity(XName.Get("OrderLineDetails", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (MessageReferenceNr, MessageType, SupplierDetails, CustomerLocation, RspDetails, OrderDetails, OrderLineDetails)
                    /// </para>
                    /// </summary>
                    public MessageHeaderLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNr, MessageType, SupplierDetails, CustomerLocation, RspDetails, OrderDetails, OrderLineDetails)
                    /// </para>
                    /// </summary>
                    public string MessageReferenceNr
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("MessageReferenceNr", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("MessageReferenceNr", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNr, MessageType, SupplierDetails, CustomerLocation, RspDetails, OrderDetails, OrderLineDetails)
                    /// </para>
                    /// </summary>
                    public string MessageType
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("MessageType", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("MessageType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNr, MessageType, SupplierDetails, CustomerLocation, RspDetails, OrderDetails, OrderLineDetails)
                    /// </para>
                    /// </summary>
                    public SupplierDetailsLocalType SupplierDetails
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SupplierDetails", ""));
                            return ((SupplierDetailsLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("SupplierDetails", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNr, MessageType, SupplierDetails, CustomerLocation, RspDetails, OrderDetails, OrderLineDetails)
                    /// </para>
                    /// </summary>
                    public CustomerLocationLocalType CustomerLocation
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CustomerLocation", ""));
                            return ((CustomerLocationLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("CustomerLocation", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNr, MessageType, SupplierDetails, CustomerLocation, RspDetails, OrderDetails, OrderLineDetails)
                    /// </para>
                    /// </summary>
                    public RspDetailsLocalType RspDetails
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("RspDetails", ""));
                            return ((RspDetailsLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("RspDetails", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNr, MessageType, SupplierDetails, CustomerLocation, RspDetails, OrderDetails, OrderLineDetails)
                    /// </para>
                    /// </summary>
                    public OrderDetailsLocalType OrderDetails
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("OrderDetails", ""));
                            return ((OrderDetailsLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("OrderDetails", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (MessageReferenceNr, MessageType, SupplierDetails, CustomerLocation, RspDetails, OrderDetails, OrderLineDetails)
                    /// </para>
                    /// </summary>
                    public OrderLineDetailsLocalType OrderLineDetails
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("OrderLineDetails", ""));
                            return ((OrderLineDetailsLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("OrderLineDetails", ""), value);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("MessageHeader", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<MessageHeaderLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("MessageReferenceNr", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("MessageType", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("SupplierDetails", ""), typeof(SupplierDetailsLocalType));
                        localElementDictionary.Add(XName.Get("CustomerLocation", ""), typeof(CustomerLocationLocalType));
                        localElementDictionary.Add(XName.Get("RspDetails", ""), typeof(RspDetailsLocalType));
                        localElementDictionary.Add(XName.Get("OrderDetails", ""), typeof(OrderDetailsLocalType));
                        localElementDictionary.Add(XName.Get("OrderLineDetails", ""), typeof(OrderLineDetailsLocalType));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (SupplierOrderPoint)
                    /// </para>
                    /// </summary>
                    public partial class SupplierDetailsLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator SupplierDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SupplierDetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static SupplierDetailsLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SupplierOrderPoint", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (SupplierOrderPoint)
                        /// </para>
                        /// </summary>
                        public SupplierDetailsLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (SupplierOrderPoint)
                        /// </para>
                        /// </summary>
                        public string SupplierOrderPoint
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("SupplierOrderPoint", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("SupplierOrderPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("SupplierDetails", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<SupplierDetailsLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("SupplierOrderPoint", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (CustomerDeliveryPoint)
                    /// </para>
                    /// </summary>
                    public partial class CustomerLocationLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator CustomerLocationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CustomerLocationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static CustomerLocationLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CustomerDeliveryPoint", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (CustomerDeliveryPoint)
                        /// </para>
                        /// </summary>
                        public CustomerLocationLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (CustomerDeliveryPoint)
                        /// </para>
                        /// </summary>
                        public string CustomerDeliveryPoint
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("CustomerDeliveryPoint", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("CustomerDeliveryPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("CustomerLocation", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<CustomerLocationLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("CustomerDeliveryPoint", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ResponseDocNumber, ResponseDate)
                    /// </para>
                    /// </summary>
                    public partial class RspDetailsLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator RspDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RspDetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static RspDetailsLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ResponseDocNumber", "")), new NamedContentModelEntity(XName.Get("ResponseDate", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ResponseDocNumber, ResponseDate)
                        /// </para>
                        /// </summary>
                        public RspDetailsLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ResponseDocNumber, ResponseDate)
                        /// </para>
                        /// </summary>
                        public string ResponseDocNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ResponseDocNumber", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("ResponseDocNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ResponseDocNumber, ResponseDate)
                        /// </para>
                        /// </summary>
                        public System.DateTime ResponseDate
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ResponseDate", ""));
                                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("ResponseDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("RspDetails", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<RspDetailsLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("ResponseDocNumber", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("ResponseDate", ""), typeof(System.DateTime));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (CustomerOrderNumber, OrderDate, ConfirmationCode)
                    /// </para>
                    /// </summary>
                    public partial class OrderDetailsLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator OrderDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OrderDetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static OrderDetailsLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("CustomerOrderNumber", "")), new NamedContentModelEntity(XName.Get("OrderDate", "")), new NamedContentModelEntity(XName.Get("ConfirmationCode", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (CustomerOrderNumber, OrderDate, ConfirmationCode)
                        /// </para>
                        /// </summary>
                        public OrderDetailsLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (CustomerOrderNumber, OrderDate, ConfirmationCode)
                        /// </para>
                        /// </summary>
                        public string CustomerOrderNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("CustomerOrderNumber", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("CustomerOrderNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (CustomerOrderNumber, OrderDate, ConfirmationCode)
                        /// </para>
                        /// </summary>
                        public System.DateTime OrderDate
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("OrderDate", ""));
                                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("OrderDate", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (CustomerOrderNumber, OrderDate, ConfirmationCode)
                        /// </para>
                        /// </summary>
                        public string ConfirmationCode
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ConfirmationCode", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("ConfirmationCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("OrderDetails", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<OrderDetailsLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("CustomerOrderNumber", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("OrderDate", ""), typeof(System.DateTime));
                            localElementDictionary.Add(XName.Get("ConfirmationCode", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (LineDetail*)
                    /// </para>
                    /// </summary>
                    public partial class OrderLineDetailsLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<LineDetailLocalType> LineDetailField;

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator OrderLineDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OrderLineDetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static OrderLineDetailsLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LineDetail", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (LineDetail*)
                        /// </para>
                        /// </summary>
                        public OrderLineDetailsLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (LineDetail*)
                        /// </para>
                        /// </summary>
                        public IList<Ordresp.OrdrspLocalType.HeaderLocalType.MessageHeaderLocalType.OrderLineDetailsLocalType.LineDetailLocalType> LineDetail
                        {
                            get
                            {
                                if ((this.LineDetailField == null))
                                {
                                    this.LineDetailField = new XTypedList<LineDetailLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("LineDetail", ""));
                                }
                                return this.LineDetailField;
                            }
                            set
                            {
                                if ((value == null))
                                {
                                    this.LineDetailField = null;
                                }
                                else
                                {
                                    if ((this.LineDetailField == null))
                                    {
                                        this.LineDetailField = XTypedList<LineDetailLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LineDetail", ""));
                                    }
                                    else
                                    {
                                        XTypedServices.SetList<LineDetailLocalType>(this.LineDetailField, value);
                                    }
                                }
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("OrderLineDetails", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<OrderLineDetailsLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("LineDetail", ""), typeof(LineDetailLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ProductDetails, SubProductDetails, OrdQuantityDetails)
                        /// </para>
                        /// </summary>
                        public partial class LineDetailLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator LineDetailLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LineDetailLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static LineDetailLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ProductDetails", "")), new NamedContentModelEntity(XName.Get("SubProductDetails", "")), new NamedContentModelEntity(XName.Get("OrdQuantityDetails", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ProductDetails, SubProductDetails, OrdQuantityDetails)
                            /// </para>
                            /// </summary>
                            public LineDetailLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ProductDetails, SubProductDetails, OrdQuantityDetails)
                            /// </para>
                            /// </summary>
                            public ProductDetailsLocalType ProductDetails
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ProductDetails", ""));
                                    return ((ProductDetailsLocalType)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ProductDetails", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ProductDetails, SubProductDetails, OrdQuantityDetails)
                            /// </para>
                            /// </summary>
                            public SubProductDetailsLocalType SubProductDetails
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("SubProductDetails", ""));
                                    return ((SubProductDetailsLocalType)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("SubProductDetails", ""), value);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ProductDetails, SubProductDetails, OrdQuantityDetails)
                            /// </para>
                            /// </summary>
                            public OrdQuantityDetailsLocalType OrdQuantityDetails
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("OrdQuantityDetails", ""));
                                    return ((OrdQuantityDetailsLocalType)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("OrdQuantityDetails", ""), value);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("LineDetail", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<LineDetailLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ProductDetails", ""), typeof(ProductDetailsLocalType));
                                localElementDictionary.Add(XName.Get("SubProductDetails", ""), typeof(SubProductDetailsLocalType));
                                localElementDictionary.Add(XName.Get("OrdQuantityDetails", ""), typeof(OrdQuantityDetailsLocalType));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ConsumerUnitEan, SupplierProductCode, SupplierProductDescription)
                            /// </para>
                            /// </summary>
                            public partial class ProductDetailsLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator ProductDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ProductDetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static ProductDetailsLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ConsumerUnitEan", "")), new NamedContentModelEntity(XName.Get("SupplierProductCode", "")), new NamedContentModelEntity(XName.Get("SupplierProductDescription", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (ConsumerUnitEan, SupplierProductCode, SupplierProductDescription)
                                /// </para>
                                /// </summary>
                                public ProductDetailsLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (ConsumerUnitEan, SupplierProductCode, SupplierProductDescription)
                                /// </para>
                                /// </summary>
                                public string ConsumerUnitEan
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("ConsumerUnitEan", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("ConsumerUnitEan", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (ConsumerUnitEan, SupplierProductCode, SupplierProductDescription)
                                /// </para>
                                /// </summary>
                                public string SupplierProductCode
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("SupplierProductCode", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("SupplierProductCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (ConsumerUnitEan, SupplierProductCode, SupplierProductDescription)
                                /// </para>
                                /// </summary>
                                public string SupplierProductDescription
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("SupplierProductDescription", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("SupplierProductDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("ProductDetails", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<ProductDetailsLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("ConsumerUnitEan", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("SupplierProductCode", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("SupplierProductDescription", ""), typeof(string));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (SConsumerEAN, SSupplierProductCode, SSupplierProductDescription)
                            /// </para>
                            /// </summary>
                            public partial class SubProductDetailsLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator SubProductDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SubProductDetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static SubProductDetailsLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SConsumerEAN", "")), new NamedContentModelEntity(XName.Get("SSupplierProductCode", "")), new NamedContentModelEntity(XName.Get("SSupplierProductDescription", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (SConsumerEAN, SSupplierProductCode, SSupplierProductDescription)
                                /// </para>
                                /// </summary>
                                public SubProductDetailsLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (SConsumerEAN, SSupplierProductCode, SSupplierProductDescription)
                                /// </para>
                                /// </summary>
                                public string SConsumerEAN
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("SConsumerEAN", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("SConsumerEAN", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (SConsumerEAN, SSupplierProductCode, SSupplierProductDescription)
                                /// </para>
                                /// </summary>
                                public string SSupplierProductCode
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("SSupplierProductCode", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("SSupplierProductCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (SConsumerEAN, SSupplierProductCode, SSupplierProductDescription)
                                /// </para>
                                /// </summary>
                                public string SSupplierProductDescription
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("SSupplierProductDescription", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("SSupplierProductDescription", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("SubProductDetails", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<SubProductDetailsLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("SConsumerEAN", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("SSupplierProductCode", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("SSupplierProductDescription", ""), typeof(string));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (NumberOfOrderUnits)
                            /// </para>
                            /// </summary>
                            public partial class OrdQuantityDetailsLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator OrdQuantityDetailsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OrdQuantityDetailsLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static OrdQuantityDetailsLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NumberOfOrderUnits", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (NumberOfOrderUnits)
                                /// </para>
                                /// </summary>
                                public OrdQuantityDetailsLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (NumberOfOrderUnits)
                                /// </para>
                                /// </summary>
                                public string NumberOfOrderUnits
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("NumberOfOrderUnits", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("NumberOfOrderUnits", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("OrdQuantityDetails", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<OrdQuantityDetailsLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("NumberOfOrderUnits", ""), typeof(string));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("Ordresp", ""), typeof(Ordresp));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("Ordresp", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public Ordresp Ordresp { get { return rootObject as Ordresp; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(Ordresp root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public Ordresp Ordresp { get { return rootObject as Ordresp; } }

        private XRoot()
        {
        }

        public XRoot(Ordresp root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }
}