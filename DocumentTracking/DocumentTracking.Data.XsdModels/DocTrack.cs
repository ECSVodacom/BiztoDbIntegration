//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;
namespace DocumentTracking.Data.XsdModels
{
}



/// <summary>
/// <para>
/// Regular expression: (Track)*
/// </para>
/// </summary>
public partial class DocTrack : XTypedElement, IXMetaData {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedList<TrackLocalType> TrackField;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
    
         public static explicit operator DocTrack(XElement xe) { return XTypedServices.ToXTypedElement<DocTrack>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
    
    static DocTrack() {
        BuildElementDictionary();
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Track)*
    /// </para>
    /// </summary>
    public DocTrack()
    {
    }
    
    /// <summary>
    /// <para>
    /// Occurrence: required, choice
    /// </para>
    /// <para>
    /// Regular expression: (Track)*
    /// </para>
    /// </summary>
    public IList<DocTrack.TrackLocalType> Track {
        get {
            if ((this.TrackField == null)) {
                this.TrackField = new XTypedList<TrackLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Track", ""));
            }
            return this.TrackField;
        }
        set {
            if ((value == null)) {
                this.TrackField = null;
            }
            else {
                if ((this.TrackField == null)) {
                    this.TrackField = XTypedList<TrackLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Track", ""));
                }
                else {
                    XTypedServices.SetList<TrackLocalType>(this.TrackField, value);
                }
            }
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
        get {
            return localElementDictionary;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    XName IXMetaData.SchemaName {
        get {
            return XName.Get("DocumentTracking", "");
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    SchemaOrigin IXMetaData.TypeOrigin {
        get {
            return SchemaOrigin.Element;
        }
    }
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    ILinqToXsdTypeManager IXMetaData.TypeManager {
        get {
            return LinqToXsdTypeManager.Instance;
        }
    }
    
    public void Save(string xmlFile) {
        XTypedServices.Save(xmlFile, Untyped);
    }
    
    public void Save(System.IO.TextWriter tw) {
        XTypedServices.Save(tw, Untyped);
    }
    
    public void Save(System.Xml.XmlWriter xmlWriter) {
        XTypedServices.Save(xmlWriter, Untyped);
    }
    
    public static DocTrack Load(string xmlFile) {
        return XTypedServices.Load<DocTrack>(xmlFile);
    }
    
    public static DocTrack Load(System.IO.TextReader xmlFile) {
        return XTypedServices.Load<DocTrack>(xmlFile);
    }
    
    public static DocTrack Parse(string xml) {
        return XTypedServices.Parse<DocTrack>(xml);
    }
    
    public override XTypedElement Clone() {
        return XTypedServices.CloneXTypedElement<DocTrack>(this);
    }
    
    private static void BuildElementDictionary() {
        localElementDictionary.Add(XName.Get("Track", ""), typeof(TrackLocalType));
    }
    
    ContentModelEntity IXMetaData.GetContentModel() {
        return ContentModelEntity.Default;
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (System*, Document*)
    /// </para>
    /// </summary>
    public partial class TrackLocalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SystemLocalType> SystemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentLocalType> DocumentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TrackLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TrackLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrackLocalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("System", "")), new NamedContentModelEntity(XName.Get("Document", "")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (System*, Document*)
        /// </para>
        /// </summary>
        public TrackLocalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (System*, Document*)
        /// </para>
        /// </summary>
        public IList<DocTrack.TrackLocalType.SystemLocalType> System {
            get {
                if ((this.SystemField == null)) {
                    this.SystemField = new XTypedList<SystemLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("System", ""));
                }
                return this.SystemField;
            }
            set {
                if ((value == null)) {
                    this.SystemField = null;
                }
                else {
                    if ((this.SystemField == null)) {
                        this.SystemField = XTypedList<SystemLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("System", ""));
                    }
                    else {
                        XTypedServices.SetList<SystemLocalType>(this.SystemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (System*, Document*)
        /// </para>
        /// </summary>
        public IList<DocTrack.TrackLocalType.DocumentLocalType> Document {
            get {
                if ((this.DocumentField == null)) {
                    this.DocumentField = new XTypedList<DocumentLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Document", ""));
                }
                return this.DocumentField;
            }
            set {
                if ((value == null)) {
                    this.DocumentField = null;
                }
                else {
                    if ((this.DocumentField == null)) {
                        this.DocumentField = XTypedList<DocumentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Document", ""));
                    }
                    else {
                        XTypedServices.SetList<DocumentLocalType>(this.DocumentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Track", "");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrackLocalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("System", ""), typeof(SystemLocalType));
            localElementDictionary.Add(XName.Get("Document", ""), typeof(DocumentLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SystemName?, GeneratedId?, Timestamp?, Status?, StatusMessage?, File*)
        /// </para>
        /// </summary>
        public partial class SystemLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<FileLocalType> FileField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator SystemLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SystemLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SystemLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SystemName", "")), new NamedContentModelEntity(XName.Get("GeneratedId", "")), new NamedContentModelEntity(XName.Get("Timestamp", "")), new NamedContentModelEntity(XName.Get("Status", "")), new NamedContentModelEntity(XName.Get("StatusMessage", "")), new NamedContentModelEntity(XName.Get("File", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (SystemName?, GeneratedId?, Timestamp?, Status?, StatusMessage?, File*)
            /// </para>
            /// </summary>
            public SystemLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SystemName?, GeneratedId?, Timestamp?, Status?, StatusMessage?, File*)
            /// </para>
            /// </summary>
            public string SystemName {
                get {
                    XElement x = this.GetElement(XName.Get("SystemName", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("SystemName", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SystemName?, GeneratedId?, Timestamp?, Status?, StatusMessage?, File*)
            /// </para>
            /// </summary>
            public string GeneratedId {
                get {
                    XElement x = this.GetElement(XName.Get("GeneratedId", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("GeneratedId", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SystemName?, GeneratedId?, Timestamp?, Status?, StatusMessage?, File*)
            /// </para>
            /// </summary>
            public string Timestamp {
                get {
                    XElement x = this.GetElement(XName.Get("Timestamp", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Timestamp", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SystemName?, GeneratedId?, Timestamp?, Status?, StatusMessage?, File*)
            /// </para>
            /// </summary>
            public string Status {
                get {
                    XElement x = this.GetElement(XName.Get("Status", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Status", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (SystemName?, GeneratedId?, Timestamp?, Status?, StatusMessage?, File*)
            /// </para>
            /// </summary>
            public string StatusMessage {
                get {
                    XElement x = this.GetElement(XName.Get("StatusMessage", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("StatusMessage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (SystemName?, GeneratedId?, Timestamp?, Status?, StatusMessage?, File*)
            /// </para>
            /// </summary>
            public IList<DocTrack.TrackLocalType.SystemLocalType.FileLocalType> File {
                get {
                    if ((this.FileField == null)) {
                        this.FileField = new XTypedList<FileLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("File", ""));
                    }
                    return this.FileField;
                }
                set {
                    if ((value == null)) {
                        this.FileField = null;
                    }
                    else {
                        if ((this.FileField == null)) {
                            this.FileField = XTypedList<FileLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("File", ""));
                        }
                        else {
                            XTypedServices.SetList<FileLocalType>(this.FileField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("System", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SystemLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("SystemName", ""), typeof(string));
                localElementDictionary.Add(XName.Get("GeneratedId", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Timestamp", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Status", ""), typeof(string));
                localElementDictionary.Add(XName.Get("StatusMessage", ""), typeof(string));
                localElementDictionary.Add(XName.Get("File", ""), typeof(FileLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (InputPath?, OutputPath?)
            /// </para>
            /// </summary>
            public partial class FileLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator FileLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FileLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static FileLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("InputPath", "")), new NamedContentModelEntity(XName.Get("OutputPath", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (InputPath?, OutputPath?)
                /// </para>
                /// </summary>
                public FileLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (InputPath?, OutputPath?)
                /// </para>
                /// </summary>
                public string InputPath {
                    get {
                        XElement x = this.GetElement(XName.Get("InputPath", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("InputPath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (InputPath?, OutputPath?)
                /// </para>
                /// </summary>
                public string OutputPath {
                    get {
                        XElement x = this.GetElement(XName.Get("OutputPath", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("OutputPath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("File", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<FileLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("InputPath", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("OutputPath", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
        /// </para>
        /// </summary>
        public partial class DocumentLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ReferencesLocalType> ReferencesField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<SourceLocalType> SourceField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DestinationLocalType> DestinationField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CustomDataLocalType> CustomDataField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
         public static explicit operator DocumentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DocumentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DocumentLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Type", "")), new NamedContentModelEntity(XName.Get("Format", "")), new NamedContentModelEntity(XName.Get("Number", "")), new NamedContentModelEntity(XName.Get("Date", "")), new NamedContentModelEntity(XName.Get("DeliveryPoint", "")), new NamedContentModelEntity(XName.Get("References", "")), new NamedContentModelEntity(XName.Get("Source", "")), new NamedContentModelEntity(XName.Get("Destination", "")), new NamedContentModelEntity(XName.Get("CustomData", "")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public DocumentLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public string Type {
                get {
                    XElement x = this.GetElement(XName.Get("Type", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public string Format {
                get {
                    XElement x = this.GetElement(XName.Get("Format", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Format", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public string Number {
                get {
                    XElement x = this.GetElement(XName.Get("Number", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Number", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public string Date {
                get {
                    XElement x = this.GetElement(XName.Get("Date", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public string DeliveryPoint {
                get {
                    XElement x = this.GetElement(XName.Get("DeliveryPoint", ""));
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(XName.Get("DeliveryPoint", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public IList<DocTrack.TrackLocalType.DocumentLocalType.ReferencesLocalType> References {
                get {
                    if ((this.ReferencesField == null)) {
                        this.ReferencesField = new XTypedList<ReferencesLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("References", ""));
                    }
                    return this.ReferencesField;
                }
                set {
                    if ((value == null)) {
                        this.ReferencesField = null;
                    }
                    else {
                        if ((this.ReferencesField == null)) {
                            this.ReferencesField = XTypedList<ReferencesLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("References", ""));
                        }
                        else {
                            XTypedServices.SetList<ReferencesLocalType>(this.ReferencesField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public IList<DocTrack.TrackLocalType.DocumentLocalType.SourceLocalType> Source {
                get {
                    if ((this.SourceField == null)) {
                        this.SourceField = new XTypedList<SourceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Source", ""));
                    }
                    return this.SourceField;
                }
                set {
                    if ((value == null)) {
                        this.SourceField = null;
                    }
                    else {
                        if ((this.SourceField == null)) {
                            this.SourceField = XTypedList<SourceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Source", ""));
                        }
                        else {
                            XTypedServices.SetList<SourceLocalType>(this.SourceField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public IList<DocTrack.TrackLocalType.DocumentLocalType.DestinationLocalType> Destination {
                get {
                    if ((this.DestinationField == null)) {
                        this.DestinationField = new XTypedList<DestinationLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Destination", ""));
                    }
                    return this.DestinationField;
                }
                set {
                    if ((value == null)) {
                        this.DestinationField = null;
                    }
                    else {
                        if ((this.DestinationField == null)) {
                            this.DestinationField = XTypedList<DestinationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Destination", ""));
                        }
                        else {
                            XTypedServices.SetList<DestinationLocalType>(this.DestinationField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Type?, Format?, Number?, Date?, DeliveryPoint?, References*, Source*, Destination*, CustomData*)
            /// </para>
            /// </summary>
            public IList<DocTrack.TrackLocalType.DocumentLocalType.CustomDataLocalType> CustomData {
                get {
                    if ((this.CustomDataField == null)) {
                        this.CustomDataField = new XTypedList<CustomDataLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("CustomData", ""));
                    }
                    return this.CustomDataField;
                }
                set {
                    if ((value == null)) {
                        this.CustomDataField = null;
                    }
                    else {
                        if ((this.CustomDataField == null)) {
                            this.CustomDataField = XTypedList<CustomDataLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("CustomData", ""));
                        }
                        else {
                            XTypedServices.SetList<CustomDataLocalType>(this.CustomDataField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName {
                get {
                    return XName.Get("Document", "");
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DocumentLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(XName.Get("Type", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Format", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Number", ""), typeof(string));
                localElementDictionary.Add(XName.Get("Date", ""), typeof(string));
                localElementDictionary.Add(XName.Get("DeliveryPoint", ""), typeof(string));
                localElementDictionary.Add(XName.Get("References", ""), typeof(ReferencesLocalType));
                localElementDictionary.Add(XName.Get("Source", ""), typeof(SourceLocalType));
                localElementDictionary.Add(XName.Get("Destination", ""), typeof(DestinationLocalType));
                localElementDictionary.Add(XName.Get("CustomData", ""), typeof(CustomDataLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Reference*)
            /// </para>
            /// </summary>
            public partial class ReferencesLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<ReferenceLocalType> ReferenceField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator ReferencesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ReferencesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ReferencesLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Reference", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Reference*)
                /// </para>
                /// </summary>
                public ReferencesLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Reference*)
                /// </para>
                /// </summary>
                public IList<DocTrack.TrackLocalType.DocumentLocalType.ReferencesLocalType.ReferenceLocalType> Reference {
                    get {
                        if ((this.ReferenceField == null)) {
                            this.ReferenceField = new XTypedList<ReferenceLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Reference", ""));
                        }
                        return this.ReferenceField;
                    }
                    set {
                        if ((value == null)) {
                            this.ReferenceField = null;
                        }
                        else {
                            if ((this.ReferenceField == null)) {
                                this.ReferenceField = XTypedList<ReferenceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Reference", ""));
                            }
                            else {
                                XTypedServices.SetList<ReferenceLocalType>(this.ReferenceField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("References", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ReferencesLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("Reference", ""), typeof(ReferenceLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (DocumentType?, DocumentNumber?, Date?)
                /// </para>
                /// </summary>
                public partial class ReferenceLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator ReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static ReferenceLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DocumentType", "")), new NamedContentModelEntity(XName.Get("DocumentNumber", "")), new NamedContentModelEntity(XName.Get("Date", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (DocumentType?, DocumentNumber?, Date?)
                    /// </para>
                    /// </summary>
                    public ReferenceLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (DocumentType?, DocumentNumber?, Date?)
                    /// </para>
                    /// </summary>
                    public string DocumentType {
                        get {
                            XElement x = this.GetElement(XName.Get("DocumentType", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("DocumentType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (DocumentType?, DocumentNumber?, Date?)
                    /// </para>
                    /// </summary>
                    public string DocumentNumber {
                        get {
                            XElement x = this.GetElement(XName.Get("DocumentNumber", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("DocumentNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (DocumentType?, DocumentNumber?, Date?)
                    /// </para>
                    /// </summary>
                    public string Date {
                        get {
                            XElement x = this.GetElement(XName.Get("Date", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("Reference", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<ReferenceLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("DocumentType", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("DocumentNumber", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("Date", ""), typeof(string));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (InterchangeNumber?, TradingPartnerEan?)
            /// </para>
            /// </summary>
            public partial class SourceLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator SourceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SourceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static SourceLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("InterchangeNumber", "")), new NamedContentModelEntity(XName.Get("TradingPartnerEan", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (InterchangeNumber?, TradingPartnerEan?)
                /// </para>
                /// </summary>
                public SourceLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeNumber?, TradingPartnerEan?)
                /// </para>
                /// </summary>
                public string InterchangeNumber {
                    get {
                        XElement x = this.GetElement(XName.Get("InterchangeNumber", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("InterchangeNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeNumber?, TradingPartnerEan?)
                /// </para>
                /// </summary>
                public string TradingPartnerEan {
                    get {
                        XElement x = this.GetElement(XName.Get("TradingPartnerEan", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("TradingPartnerEan", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Source", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<SourceLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("InterchangeNumber", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("TradingPartnerEan", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (InterchangeNumber?, TradingPartnerEan?)
            /// </para>
            /// </summary>
            public partial class DestinationLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator DestinationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DestinationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static DestinationLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("InterchangeNumber", "")), new NamedContentModelEntity(XName.Get("TradingPartnerEan", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (InterchangeNumber?, TradingPartnerEan?)
                /// </para>
                /// </summary>
                public DestinationLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeNumber?, TradingPartnerEan?)
                /// </para>
                /// </summary>
                public string InterchangeNumber {
                    get {
                        XElement x = this.GetElement(XName.Get("InterchangeNumber", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("InterchangeNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeNumber?, TradingPartnerEan?)
                /// </para>
                /// </summary>
                public string TradingPartnerEan {
                    get {
                        XElement x = this.GetElement(XName.Get("TradingPartnerEan", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(XName.Get("TradingPartnerEan", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("Destination", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DestinationLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("InterchangeNumber", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("TradingPartnerEan", ""), typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Custom*)
            /// </para>
            /// </summary>
            public partial class CustomDataLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<CustomLocalType> CustomField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
         public static explicit operator CustomDataLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CustomDataLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static CustomDataLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Custom", "")));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Custom*)
                /// </para>
                /// </summary>
                public CustomDataLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Custom*)
                /// </para>
                /// </summary>
                public IList<DocTrack.TrackLocalType.DocumentLocalType.CustomDataLocalType.CustomLocalType> Custom {
                    get {
                        if ((this.CustomField == null)) {
                            this.CustomField = new XTypedList<CustomLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("Custom", ""));
                        }
                        return this.CustomField;
                    }
                    set {
                        if ((value == null)) {
                            this.CustomField = null;
                        }
                        else {
                            if ((this.CustomField == null)) {
                                this.CustomField = XTypedList<CustomLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Custom", ""));
                            }
                            else {
                                XTypedServices.SetList<CustomLocalType>(this.CustomField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName {
                    get {
                        return XName.Get("CustomData", "");
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<CustomDataLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(XName.Get("Custom", ""), typeof(CustomLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Column?, Value?)
                /// </para>
                /// </summary>
                public partial class CustomLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
         public static explicit operator CustomLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CustomLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static CustomLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Column", "")), new NamedContentModelEntity(XName.Get("Value", "")));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Column?, Value?)
                    /// </para>
                    /// </summary>
                    public CustomLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (Column?, Value?)
                    /// </para>
                    /// </summary>
                    public string Column {
                        get {
                            XElement x = this.GetElement(XName.Get("Column", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("Column", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (Column?, Value?)
                    /// </para>
                    /// </summary>
                    public string Value {
                        get {
                            XElement x = this.GetElement(XName.Get("Value", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(XName.Get("Value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName {
                        get {
                            return XName.Get("Custom", "");
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<CustomLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(XName.Get("Column", ""), typeof(string));
                        localElementDictionary.Add(XName.Get("Value", ""), typeof(string));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
        }
    }
}

public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
    
    static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
    
    private static XmlSchemaSet schemaSet;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
    
    static LinqToXsdTypeManager() {
        BuildElementDictionary();
    }
    
    XmlSchemaSet ILinqToXsdTypeManager.Schemas {
        get {
            if ((schemaSet == null)) {
                XmlSchemaSet tempSet = new XmlSchemaSet();
                System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
            }
            return schemaSet;
        }
        set {
            schemaSet = value;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
        get {
            return XTypedServices.EmptyDictionary;
        }
    }
    
    Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
        get {
            return elementDictionary;
        }
    }
    
    Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
        get {
            return XTypedServices.EmptyTypeMappingDictionary;
        }
    }
    
    public static LinqToXsdTypeManager Instance {
        get {
            return typeManagerSingleton;
        }
    }
    
    private static void BuildElementDictionary() {
        elementDictionary.Add(XName.Get("DocumentTracking", ""), typeof(global::DocTrack));
    }
    
    protected internal static void AddSchemas(XmlSchemaSet schemas) {
        schemas.Add(schemaSet);
    }
    
    public static System.Type GetRootType() {
        return elementDictionary[XName.Get("DocumentTracking", "")];
    }
}

public partial class XRootNamespace {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public DocTrack DocumentTracking {  get {return rootObject as DocTrack; } }
    
    private XRootNamespace() {
    }
    
    public XRootNamespace(DocTrack root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRootNamespace Load(string xmlFile) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(string xmlFile, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Load(XmlReader xmlReader) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRootNamespace Parse(string text, LoadOptions options) {
        XRootNamespace root = new XRootNamespace();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

public partial class XRoot {
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XDocument doc;
    
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private XTypedElement rootObject;
    

    public DocTrack DocumentTracking {  get {return rootObject as DocTrack; } }
    
    private XRoot() {
    }
    
    public XRoot(DocTrack root) {
        this.doc = new XDocument(root.Untyped);
        this.rootObject = root;
    }
    
    public XDocument XDocument {
        get {
            return doc;
        }
    }
    
    public static XRoot Load(string xmlFile) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(string xmlFile, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlFile, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(TextReader textReader, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(textReader, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Load(XmlReader xmlReader) {
        XRoot root = new XRoot();
        root.doc = XDocument.Load(xmlReader);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public static XRoot Parse(string text, LoadOptions options) {
        XRoot root = new XRoot();
        root.doc = XDocument.Parse(text, options);
        XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
        if ((typedRoot == null)) {
            throw new LinqToXsdException("Invalid root element in xml document.");
        }
        root.rootObject = typedRoot;
        return root;
    }
    
    public virtual void Save(string fileName) {
        doc.Save(fileName);
    }
    
    public virtual void Save(TextWriter textWriter) {
        doc.Save(textWriter);
    }
    
    public virtual void Save(XmlWriter writer) {
        doc.Save(writer);
    }
    
    public virtual void Save(TextWriter textWriter, SaveOptions options) {
        doc.Save(textWriter, options);
    }
    
    public virtual void Save(string fileName, SaveOptions options) {
        doc.Save(fileName, options);
    }
}

namespace DocumentTracking.Data.XsdModels {
    
    
    public partial class DocumentTracking {
    }
}
