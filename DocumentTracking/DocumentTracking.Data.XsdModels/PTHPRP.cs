//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Schema;
using Xml.Schema.Linq;

namespace DocumentTracking.Data.XsdModels.PTHPRP
{


    /// <summary>
    /// <para>
    /// Regular expression: (PTHPRP)
    /// </para>
    /// </summary>
    public partial class REPORTS : XTypedElement, IXMetaData
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;

        public static explicit operator REPORTS(XElement xe) { return XTypedServices.ToXTypedElement<REPORTS>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

        static REPORTS()
        {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PTHPRP", "")));
        }

        /// <summary>
        /// <para>
        /// Regular expression: (PTHPRP)
        /// </para>
        /// </summary>
        public REPORTS()
        {
        }

        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PTHPRP)
        /// </para>
        /// </summary>
        public PTHPRPLocalType PTHPRP
        {
            get
            {
                XElement x = this.GetElement(XName.Get("PTHPRP", ""));
                return ((PTHPRPLocalType)(x));
            }
            set
            {
                this.SetElement(XName.Get("PTHPRP", ""), value);
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
        {
            get
            {
                return localElementDictionary;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName
        {
            get
            {
                return XName.Get("REPORTS", "");
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin
        {
            get
            {
                return SchemaOrigin.Element;
            }
        }

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager
        {
            get
            {
                return LinqToXsdTypeManager.Instance;
            }
        }

        public void Save(string xmlFile)
        {
            XTypedServices.Save(xmlFile, Untyped);
        }

        public void Save(System.IO.TextWriter tw)
        {
            XTypedServices.Save(tw, Untyped);
        }

        public void Save(System.Xml.XmlWriter xmlWriter)
        {
            XTypedServices.Save(xmlWriter, Untyped);
        }

        public static REPORTS Load(string xmlFile)
        {
            return XTypedServices.Load<REPORTS>(xmlFile);
        }

        public static REPORTS Load(System.IO.TextReader xmlFile)
        {
            return XTypedServices.Load<REPORTS>(xmlFile);
        }

        public static REPORTS Parse(string xml)
        {
            return XTypedServices.Parse<REPORTS>(xml);
        }

        public override XTypedElement Clone()
        {
            return XTypedServices.CloneXTypedElement<REPORTS>(this);
        }

        private static void BuildElementDictionary()
        {
            localElementDictionary.Add(XName.Get("PTHPRP", ""), typeof(PTHPRPLocalType));
        }

        ContentModelEntity IXMetaData.GetContentModel()
        {
            return contentModel;
        }

        /// <summary>
        /// <para>
        /// Regular expression: (UNB, UNZ)
        /// </para>
        /// </summary>
        public partial class PTHPRPLocalType : XTypedElement, IXMetaData
        {

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;

            public static explicit operator PTHPRPLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PTHPRPLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

            static PTHPRPLocalType()
            {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("UNB", "")), new NamedContentModelEntity(XName.Get("UNZ", "")));
            }

            /// <summary>
            /// <para>
            /// Regular expression: (UNB, UNZ)
            /// </para>
            /// </summary>
            public PTHPRPLocalType()
            {
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (UNB, UNZ)
            /// </para>
            /// </summary>
            public UNBLocalType UNB
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("UNB", ""));
                    return ((UNBLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("UNB", ""), value);
                }
            }

            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (UNB, UNZ)
            /// </para>
            /// </summary>
            public UNZLocalType UNZ
            {
                get
                {
                    XElement x = this.GetElement(XName.Get("UNZ", ""));
                    return ((UNZLocalType)(x));
                }
                set
                {
                    this.SetElement(XName.Get("UNZ", ""), value);
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
            {
                get
                {
                    return localElementDictionary;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            XName IXMetaData.SchemaName
            {
                get
                {
                    return XName.Get("PTHPRP", "");
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin
            {
                get
                {
                    return SchemaOrigin.Fragment;
                }
            }

            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager
            {
                get
                {
                    return LinqToXsdTypeManager.Instance;
                }
            }

            public override XTypedElement Clone()
            {
                return XTypedServices.CloneXTypedElement<PTHPRPLocalType>(this);
            }

            private static void BuildElementDictionary()
            {
                localElementDictionary.Add(XName.Get("UNB", ""), typeof(UNBLocalType));
                localElementDictionary.Add(XName.Get("UNZ", ""), typeof(UNZLocalType));
            }

            ContentModelEntity IXMetaData.GetContentModel()
            {
                return contentModel;
            }

            /// <summary>
            /// <para>
            /// Regular expression: (InterchangeSender, InterchangeRecipient, TransmissionDateTime, InterchangeControlReference, ApplicationReference, UNH*)
            /// </para>
            /// </summary>
            public partial class UNBLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<UNHLocalType> UNHField;

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator UNBLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UNBLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static UNBLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("InterchangeSender", "")), new NamedContentModelEntity(XName.Get("InterchangeRecipient", "")), new NamedContentModelEntity(XName.Get("TransmissionDateTime", "")), new NamedContentModelEntity(XName.Get("InterchangeControlReference", "")), new NamedContentModelEntity(XName.Get("ApplicationReference", "")), new NamedContentModelEntity(XName.Get("UNH", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (InterchangeSender, InterchangeRecipient, TransmissionDateTime, InterchangeControlReference, ApplicationReference, UNH*)
                /// </para>
                /// </summary>
                public UNBLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeSender, InterchangeRecipient, TransmissionDateTime, InterchangeControlReference, ApplicationReference, UNH*)
                /// </para>
                /// </summary>
                public InterchangeSenderLocalType InterchangeSender
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("InterchangeSender", ""));
                        return ((InterchangeSenderLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("InterchangeSender", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeSender, InterchangeRecipient, TransmissionDateTime, InterchangeControlReference, ApplicationReference, UNH*)
                /// </para>
                /// </summary>
                public InterchangeRecipientLocalType InterchangeRecipient
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("InterchangeRecipient", ""));
                        return ((InterchangeRecipientLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("InterchangeRecipient", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeSender, InterchangeRecipient, TransmissionDateTime, InterchangeControlReference, ApplicationReference, UNH*)
                /// </para>
                /// </summary>
                public TransmissionDateTimeLocalType TransmissionDateTime
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("TransmissionDateTime", ""));
                        return ((TransmissionDateTimeLocalType)(x));
                    }
                    set
                    {
                        this.SetElement(XName.Get("TransmissionDateTime", ""), value);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeSender, InterchangeRecipient, TransmissionDateTime, InterchangeControlReference, ApplicationReference, UNH*)
                /// </para>
                /// </summary>
                public string InterchangeControlReference
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("InterchangeControlReference", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("InterchangeControlReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeSender, InterchangeRecipient, TransmissionDateTime, InterchangeControlReference, ApplicationReference, UNH*)
                /// </para>
                /// </summary>
                public string ApplicationReference
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("ApplicationReference", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("ApplicationReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeSender, InterchangeRecipient, TransmissionDateTime, InterchangeControlReference, ApplicationReference, UNH*)
                /// </para>
                /// </summary>
                public IList<REPORTS.PTHPRPLocalType.UNBLocalType.UNHLocalType> UNH
                {
                    get
                    {
                        if ((this.UNHField == null))
                        {
                            this.UNHField = new XTypedList<UNHLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("UNH", ""));
                        }
                        return this.UNHField;
                    }
                    set
                    {
                        if ((value == null))
                        {
                            this.UNHField = null;
                        }
                        else
                        {
                            if ((this.UNHField == null))
                            {
                                this.UNHField = XTypedList<UNHLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("UNH", ""));
                            }
                            else
                            {
                                XTypedServices.SetList<UNHLocalType>(this.UNHField, value);
                            }
                        }
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("UNB", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<UNBLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("InterchangeSender", ""), typeof(InterchangeSenderLocalType));
                    localElementDictionary.Add(XName.Get("InterchangeRecipient", ""), typeof(InterchangeRecipientLocalType));
                    localElementDictionary.Add(XName.Get("TransmissionDateTime", ""), typeof(TransmissionDateTimeLocalType));
                    localElementDictionary.Add(XName.Get("InterchangeControlReference", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("ApplicationReference", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("UNH", ""), typeof(UNHLocalType));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }

                /// <summary>
                /// <para>
                /// Regular expression: (SendersIdentification)
                /// </para>
                /// </summary>
                public partial class InterchangeSenderLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator InterchangeSenderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InterchangeSenderLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static InterchangeSenderLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("SendersIdentification", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (SendersIdentification)
                    /// </para>
                    /// </summary>
                    public InterchangeSenderLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (SendersIdentification)
                    /// </para>
                    /// </summary>
                    public string SendersIdentification
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("SendersIdentification", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("SendersIdentification", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("InterchangeSender", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<InterchangeSenderLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("SendersIdentification", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (ReceiversIdentification)
                /// </para>
                /// </summary>
                public partial class InterchangeRecipientLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator InterchangeRecipientLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InterchangeRecipientLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static InterchangeRecipientLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReceiversIdentification", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (ReceiversIdentification)
                    /// </para>
                    /// </summary>
                    public InterchangeRecipientLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (ReceiversIdentification)
                    /// </para>
                    /// </summary>
                    public string ReceiversIdentification
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("ReceiversIdentification", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("ReceiversIdentification", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("InterchangeRecipient", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<InterchangeRecipientLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("ReceiversIdentification", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (Date, Time)
                /// </para>
                /// </summary>
                public partial class TransmissionDateTimeLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator TransmissionDateTimeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TransmissionDateTimeLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static TransmissionDateTimeLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Date", "")), new NamedContentModelEntity(XName.Get("Time", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Date, Time)
                    /// </para>
                    /// </summary>
                    public TransmissionDateTimeLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Date, Time)
                    /// </para>
                    /// </summary>
                    public System.DateTime Date
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Date", ""));
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Date", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Date, Time)
                    /// </para>
                    /// </summary>
                    public string Time
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("Time", ""));
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("Time", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("TransmissionDateTime", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<TransmissionDateTimeLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("Date", ""), typeof(System.DateTime));
                        localElementDictionary.Add(XName.Get("Time", ""), typeof(string));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }
                }

                /// <summary>
                /// <para>
                /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                /// </para>
                /// </summary>
                public partial class UNHLocalType : XTypedElement, IXMetaData
                {

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<NADLocalType> NADField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<DTMLocalType> DTMField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<LINLocalType> LINField;

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;

                    public static explicit operator UNHLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UNHLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                    static UNHLocalType()
                    {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("LabPracticeNumber", "")), new NamedContentModelEntity(XName.Get("MessageIdentifier", "")), new NamedContentModelEntity(XName.Get("BGM", "")), new NamedContentModelEntity(XName.Get("RFF", "")), new NamedContentModelEntity(XName.Get("NAD", "")), new NamedContentModelEntity(XName.Get("DTM", "")), new NamedContentModelEntity(XName.Get("FTX", "")), new NamedContentModelEntity(XName.Get("LIN", "")), new NamedContentModelEntity(XName.Get("CNT", "")), new NamedContentModelEntity(XName.Get("UNT", "")));
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public UNHLocalType()
                    {
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public long LabPracticeNumber
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("LabPracticeNumber", ""));
                            return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                        }
                        set
                        {
                            this.SetElement(XName.Get("LabPracticeNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public MessageIdentifierLocalType MessageIdentifier
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("MessageIdentifier", ""));
                            return ((MessageIdentifierLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("MessageIdentifier", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public BGMLocalType BGM
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("BGM", ""));
                            return ((BGMLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("BGM", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public RFFLocalType RFF
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("RFF", ""));
                            return ((RFFLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("RFF", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public IList<REPORTS.PTHPRPLocalType.UNBLocalType.UNHLocalType.NADLocalType> NAD
                    {
                        get
                        {
                            if ((this.NADField == null))
                            {
                                this.NADField = new XTypedList<NADLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("NAD", ""));
                            }
                            return this.NADField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.NADField = null;
                            }
                            else
                            {
                                if ((this.NADField == null))
                                {
                                    this.NADField = XTypedList<NADLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("NAD", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<NADLocalType>(this.NADField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public IList<REPORTS.PTHPRPLocalType.UNBLocalType.UNHLocalType.DTMLocalType> DTM
                    {
                        get
                        {
                            if ((this.DTMField == null))
                            {
                                this.DTMField = new XTypedList<DTMLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("DTM", ""));
                            }
                            return this.DTMField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.DTMField = null;
                            }
                            else
                            {
                                if ((this.DTMField == null))
                                {
                                    this.DTMField = XTypedList<DTMLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("DTM", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<DTMLocalType>(this.DTMField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public FTXLocalType FTX
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("FTX", ""));
                            return ((FTXLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("FTX", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public IList<REPORTS.PTHPRPLocalType.UNBLocalType.UNHLocalType.LINLocalType> LIN
                    {
                        get
                        {
                            if ((this.LINField == null))
                            {
                                this.LINField = new XTypedList<LINLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("LIN", ""));
                            }
                            return this.LINField;
                        }
                        set
                        {
                            if ((value == null))
                            {
                                this.LINField = null;
                            }
                            else
                            {
                                if ((this.LINField == null))
                                {
                                    this.LINField = XTypedList<LINLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("LIN", ""));
                                }
                                else
                                {
                                    XTypedServices.SetList<LINLocalType>(this.LINField, value);
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public CNTLocalType CNT
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("CNT", ""));
                            return ((CNTLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("CNT", ""), value);
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (LabPracticeNumber, MessageIdentifier, BGM, RFF, NAD*, DTM*, FTX, LIN*, CNT, UNT)
                    /// </para>
                    /// </summary>
                    public UNTLocalType UNT
                    {
                        get
                        {
                            XElement x = this.GetElement(XName.Get("UNT", ""));
                            return ((UNTLocalType)(x));
                        }
                        set
                        {
                            this.SetElement(XName.Get("UNT", ""), value);
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                    {
                        get
                        {
                            return localElementDictionary;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    XName IXMetaData.SchemaName
                    {
                        get
                        {
                            return XName.Get("UNH", "");
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin
                    {
                        get
                        {
                            return SchemaOrigin.Fragment;
                        }
                    }

                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager
                    {
                        get
                        {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }

                    public override XTypedElement Clone()
                    {
                        return XTypedServices.CloneXTypedElement<UNHLocalType>(this);
                    }

                    private static void BuildElementDictionary()
                    {
                        localElementDictionary.Add(XName.Get("LabPracticeNumber", ""), typeof(long));
                        localElementDictionary.Add(XName.Get("MessageIdentifier", ""), typeof(MessageIdentifierLocalType));
                        localElementDictionary.Add(XName.Get("BGM", ""), typeof(BGMLocalType));
                        localElementDictionary.Add(XName.Get("RFF", ""), typeof(RFFLocalType));
                        localElementDictionary.Add(XName.Get("NAD", ""), typeof(NADLocalType));
                        localElementDictionary.Add(XName.Get("DTM", ""), typeof(DTMLocalType));
                        localElementDictionary.Add(XName.Get("FTX", ""), typeof(FTXLocalType));
                        localElementDictionary.Add(XName.Get("LIN", ""), typeof(LINLocalType));
                        localElementDictionary.Add(XName.Get("CNT", ""), typeof(CNTLocalType));
                        localElementDictionary.Add(XName.Get("UNT", ""), typeof(UNTLocalType));
                    }

                    ContentModelEntity IXMetaData.GetContentModel()
                    {
                        return contentModel;
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (MessageTypeIdentifier, MessageVersionNumber, MessageReleaseNumber, ControllingAgency, AssociationAssignedCode)
                    /// </para>
                    /// </summary>
                    public partial class MessageIdentifierLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator MessageIdentifierLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MessageIdentifierLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static MessageIdentifierLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("MessageTypeIdentifier", "")), new NamedContentModelEntity(XName.Get("MessageVersionNumber", "")), new NamedContentModelEntity(XName.Get("MessageReleaseNumber", "")), new NamedContentModelEntity(XName.Get("ControllingAgency", "")), new NamedContentModelEntity(XName.Get("AssociationAssignedCode", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (MessageTypeIdentifier, MessageVersionNumber, MessageReleaseNumber, ControllingAgency, AssociationAssignedCode)
                        /// </para>
                        /// </summary>
                        public MessageIdentifierLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (MessageTypeIdentifier, MessageVersionNumber, MessageReleaseNumber, ControllingAgency, AssociationAssignedCode)
                        /// </para>
                        /// </summary>
                        public string MessageTypeIdentifier
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("MessageTypeIdentifier", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("MessageTypeIdentifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (MessageTypeIdentifier, MessageVersionNumber, MessageReleaseNumber, ControllingAgency, AssociationAssignedCode)
                        /// </para>
                        /// </summary>
                        public string MessageVersionNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("MessageVersionNumber", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("MessageVersionNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (MessageTypeIdentifier, MessageVersionNumber, MessageReleaseNumber, ControllingAgency, AssociationAssignedCode)
                        /// </para>
                        /// </summary>
                        public string MessageReleaseNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("MessageReleaseNumber", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("MessageReleaseNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (MessageTypeIdentifier, MessageVersionNumber, MessageReleaseNumber, ControllingAgency, AssociationAssignedCode)
                        /// </para>
                        /// </summary>
                        public string ControllingAgency
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ControllingAgency", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("ControllingAgency", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (MessageTypeIdentifier, MessageVersionNumber, MessageReleaseNumber, ControllingAgency, AssociationAssignedCode)
                        /// </para>
                        /// </summary>
                        public string AssociationAssignedCode
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("AssociationAssignedCode", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("AssociationAssignedCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("MessageIdentifier", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<MessageIdentifierLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("MessageTypeIdentifier", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("MessageVersionNumber", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("MessageReleaseNumber", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("ControllingAgency", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("AssociationAssignedCode", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Reference, DateTimePeriod)
                    /// </para>
                    /// </summary>
                    public partial class BGMLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator BGMLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BGMLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static BGMLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Reference", "")), new NamedContentModelEntity(XName.Get("DateTimePeriod", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Reference, DateTimePeriod)
                        /// </para>
                        /// </summary>
                        public BGMLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (Reference, DateTimePeriod)
                        /// </para>
                        /// </summary>
                        public ReferenceLocalType Reference
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("Reference", ""));
                                return ((ReferenceLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("Reference", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (Reference, DateTimePeriod)
                        /// </para>
                        /// </summary>
                        public DateTimePeriodLocalType DateTimePeriod
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("DateTimePeriod", ""));
                                return ((DateTimePeriodLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("DateTimePeriod", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("BGM", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<BGMLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("Reference", ""), typeof(ReferenceLocalType));
                            localElementDictionary.Add(XName.Get("DateTimePeriod", ""), typeof(DateTimePeriodLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ReferenceQualifier, ReferenceNumber)
                        /// </para>
                        /// </summary>
                        public partial class ReferenceLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator ReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static ReferenceLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReferenceQualifier", "")), new NamedContentModelEntity(XName.Get("ReferenceNumber", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ReferenceQualifier, ReferenceNumber)
                            /// </para>
                            /// </summary>
                            public ReferenceLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ReferenceQualifier, ReferenceNumber)
                            /// </para>
                            /// </summary>
                            public string ReferenceQualifier
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ReferenceQualifier", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ReferenceQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ReferenceQualifier, ReferenceNumber)
                            /// </para>
                            /// </summary>
                            public string ReferenceNumber
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ReferenceNumber", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ReferenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("Reference", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<ReferenceLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ReferenceQualifier", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("ReferenceNumber", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                        /// </para>
                        /// </summary>
                        public partial class DateTimePeriodLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator DateTimePeriodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DateTimePeriodLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static DateTimePeriodLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DateTimePeriodQualifier", "")), new NamedContentModelEntity(XName.Get("DTPeriod", "")), new NamedContentModelEntity(XName.Get("DateTimePeriodFormatQualifier", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public DateTimePeriodLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public string DateTimePeriodQualifier
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DateTimePeriodQualifier", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DateTimePeriodQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public string DTPeriod
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DTPeriod", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DTPeriod", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public string DateTimePeriodFormatQualifier
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DateTimePeriodFormatQualifier", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DateTimePeriodFormatQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("DateTimePeriod", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<DateTimePeriodLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("DateTimePeriodQualifier", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("DTPeriod", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("DateTimePeriodFormatQualifier", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Reference, DateTimePeriod)
                    /// </para>
                    /// </summary>
                    public partial class RFFLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator RFFLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RFFLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static RFFLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Reference", "")), new NamedContentModelEntity(XName.Get("DateTimePeriod", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Reference, DateTimePeriod)
                        /// </para>
                        /// </summary>
                        public RFFLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (Reference, DateTimePeriod)
                        /// </para>
                        /// </summary>
                        public ReferenceLocalType Reference
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("Reference", ""));
                                return ((ReferenceLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("Reference", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (Reference, DateTimePeriod)
                        /// </para>
                        /// </summary>
                        public DateTimePeriodLocalType DateTimePeriod
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("DateTimePeriod", ""));
                                return ((DateTimePeriodLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("DateTimePeriod", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("RFF", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<RFFLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("Reference", ""), typeof(ReferenceLocalType));
                            localElementDictionary.Add(XName.Get("DateTimePeriod", ""), typeof(DateTimePeriodLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ReferenceQualifier, ReferenceNumber)
                        /// </para>
                        /// </summary>
                        public partial class ReferenceLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator ReferenceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ReferenceLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static ReferenceLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ReferenceQualifier", "")), new NamedContentModelEntity(XName.Get("ReferenceNumber", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ReferenceQualifier, ReferenceNumber)
                            /// </para>
                            /// </summary>
                            public ReferenceLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ReferenceQualifier, ReferenceNumber)
                            /// </para>
                            /// </summary>
                            public string ReferenceQualifier
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ReferenceQualifier", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ReferenceQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ReferenceQualifier, ReferenceNumber)
                            /// </para>
                            /// </summary>
                            public string ReferenceNumber
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ReferenceNumber", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ReferenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("Reference", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<ReferenceLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ReferenceQualifier", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("ReferenceNumber", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                        /// </para>
                        /// </summary>
                        public partial class DateTimePeriodLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator DateTimePeriodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DateTimePeriodLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static DateTimePeriodLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DateTimePeriodQualifier", "")), new NamedContentModelEntity(XName.Get("DTPeriod", "")), new NamedContentModelEntity(XName.Get("DateTimePeriodFormatQualifier", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public DateTimePeriodLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public string DateTimePeriodQualifier
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DateTimePeriodQualifier", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DateTimePeriodQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public string DTPeriod
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DTPeriod", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DTPeriod", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public string DateTimePeriodFormatQualifier
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DateTimePeriodFormatQualifier", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DateTimePeriodFormatQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("DateTimePeriod", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<DateTimePeriodLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("DateTimePeriodQualifier", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("DTPeriod", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("DateTimePeriodFormatQualifier", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (PartyQualifier, NameAndAddress?, PartyName?, PartyIdentification?)
                    /// </para>
                    /// </summary>
                    public partial class NADLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator NADLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NADLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static NADLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PartyQualifier", "")), new NamedContentModelEntity(XName.Get("NameAndAddress", "")), new NamedContentModelEntity(XName.Get("PartyName", "")), new NamedContentModelEntity(XName.Get("PartyIdentification", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (PartyQualifier, NameAndAddress?, PartyName?, PartyIdentification?)
                        /// </para>
                        /// </summary>
                        public NADLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (PartyQualifier, NameAndAddress?, PartyName?, PartyIdentification?)
                        /// </para>
                        /// </summary>
                        public string PartyQualifier
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("PartyQualifier", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("PartyQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (PartyQualifier, NameAndAddress?, PartyName?, PartyIdentification?)
                        /// </para>
                        /// </summary>
                        public NameAndAddressLocalType NameAndAddress
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("NameAndAddress", ""));
                                return ((NameAndAddressLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("NameAndAddress", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (PartyQualifier, NameAndAddress?, PartyName?, PartyIdentification?)
                        /// </para>
                        /// </summary>
                        public PartyNameLocalType PartyName
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("PartyName", ""));
                                return ((PartyNameLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("PartyName", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (PartyQualifier, NameAndAddress?, PartyName?, PartyIdentification?)
                        /// </para>
                        /// </summary>
                        public PartyIdentificationLocalType PartyIdentification
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("PartyIdentification", ""));
                                return ((PartyIdentificationLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("PartyIdentification", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("NAD", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<NADLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("PartyQualifier", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("NameAndAddress", ""), typeof(NameAndAddressLocalType));
                            localElementDictionary.Add(XName.Get("PartyName", ""), typeof(PartyNameLocalType));
                            localElementDictionary.Add(XName.Get("PartyIdentification", ""), typeof(PartyIdentificationLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (NameAndAddressLine1, NameAndAddressLine2?)
                        /// </para>
                        /// </summary>
                        public partial class NameAndAddressLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator NameAndAddressLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NameAndAddressLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static NameAndAddressLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NameAndAddressLine1", "")), new NamedContentModelEntity(XName.Get("NameAndAddressLine2", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (NameAndAddressLine1, NameAndAddressLine2?)
                            /// </para>
                            /// </summary>
                            public NameAndAddressLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (NameAndAddressLine1, NameAndAddressLine2?)
                            /// </para>
                            /// </summary>
                            public string NameAndAddressLine1
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("NameAndAddressLine1", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("NameAndAddressLine1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (NameAndAddressLine1, NameAndAddressLine2?)
                            /// </para>
                            /// </summary>
                            public string NameAndAddressLine2
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("NameAndAddressLine2", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("NameAndAddressLine2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("NameAndAddress", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<NameAndAddressLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("NameAndAddressLine1", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("NameAndAddressLine2", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (PartyName1, PartyName2?)
                        /// </para>
                        /// </summary>
                        public partial class PartyNameLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator PartyNameLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PartyNameLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static PartyNameLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PartyName1", "")), new NamedContentModelEntity(XName.Get("PartyName2", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (PartyName1, PartyName2?)
                            /// </para>
                            /// </summary>
                            public PartyNameLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (PartyName1, PartyName2?)
                            /// </para>
                            /// </summary>
                            public string PartyName1
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("PartyName1", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("PartyName1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (PartyName1, PartyName2?)
                            /// </para>
                            /// </summary>
                            public string PartyName2
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("PartyName2", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("PartyName2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("PartyName", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<PartyNameLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("PartyName1", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("PartyName2", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (PartyIdentificationCoded)
                        /// </para>
                        /// </summary>
                        public partial class PartyIdentificationLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator PartyIdentificationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PartyIdentificationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static PartyIdentificationLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("PartyIdentificationCoded", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (PartyIdentificationCoded)
                            /// </para>
                            /// </summary>
                            public PartyIdentificationLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (PartyIdentificationCoded)
                            /// </para>
                            /// </summary>
                            public string PartyIdentificationCoded
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("PartyIdentificationCoded", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("PartyIdentificationCoded", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("PartyIdentification", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<PartyIdentificationLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("PartyIdentificationCoded", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (DateTimePeriod)
                    /// </para>
                    /// </summary>
                    public partial class DTMLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator DTMLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DTMLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static DTMLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DateTimePeriod", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (DateTimePeriod)
                        /// </para>
                        /// </summary>
                        public DTMLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (DateTimePeriod)
                        /// </para>
                        /// </summary>
                        public DateTimePeriodLocalType DateTimePeriod
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("DateTimePeriod", ""));
                                return ((DateTimePeriodLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("DateTimePeriod", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("DTM", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<DTMLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("DateTimePeriod", ""), typeof(DateTimePeriodLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                        /// </para>
                        /// </summary>
                        public partial class DateTimePeriodLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator DateTimePeriodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DateTimePeriodLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static DateTimePeriodLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("DateTimePeriodQualifier", "")), new NamedContentModelEntity(XName.Get("DTPeriod", "")), new NamedContentModelEntity(XName.Get("DateTimePeriodFormatQualifier", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public DateTimePeriodLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public string DateTimePeriodQualifier
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DateTimePeriodQualifier", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DateTimePeriodQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public string DTPeriod
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DTPeriod", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DTPeriod", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DateTimePeriodQualifier, DTPeriod, DateTimePeriodFormatQualifier)
                            /// </para>
                            /// </summary>
                            public string DateTimePeriodFormatQualifier
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("DateTimePeriodFormatQualifier", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("DateTimePeriodFormatQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("DateTimePeriod", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<DateTimePeriodLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("DateTimePeriodQualifier", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("DTPeriod", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("DateTimePeriodFormatQualifier", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (TextSubjectCode, TextLiteral)
                    /// </para>
                    /// </summary>
                    public partial class FTXLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator FTXLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FTXLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static FTXLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextSubjectCode", "")), new NamedContentModelEntity(XName.Get("TextLiteral", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (TextSubjectCode, TextLiteral)
                        /// </para>
                        /// </summary>
                        public FTXLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (TextSubjectCode, TextLiteral)
                        /// </para>
                        /// </summary>
                        public string TextSubjectCode
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("TextSubjectCode", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("TextSubjectCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (TextSubjectCode, TextLiteral)
                        /// </para>
                        /// </summary>
                        public TextLiteralLocalType TextLiteral
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("TextLiteral", ""));
                                return ((TextLiteralLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("TextLiteral", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("FTX", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<FTXLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("TextSubjectCode", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("TextLiteral", ""), typeof(TextLiteralLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (FreeText1, FreeText2, FreeText3)
                        /// </para>
                        /// </summary>
                        public partial class TextLiteralLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator TextLiteralLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TextLiteralLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static TextLiteralLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FreeText1", "")), new NamedContentModelEntity(XName.Get("FreeText2", "")), new NamedContentModelEntity(XName.Get("FreeText3", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (FreeText1, FreeText2, FreeText3)
                            /// </para>
                            /// </summary>
                            public TextLiteralLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (FreeText1, FreeText2, FreeText3)
                            /// </para>
                            /// </summary>
                            public string FreeText1
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("FreeText1", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("FreeText1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (FreeText1, FreeText2, FreeText3)
                            /// </para>
                            /// </summary>
                            public string FreeText2
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("FreeText2", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("FreeText2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (FreeText1, FreeText2, FreeText3)
                            /// </para>
                            /// </summary>
                            public string FreeText3
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("FreeText3", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("FreeText3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("TextLiteral", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<TextLiteralLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("FreeText1", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("FreeText2", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("FreeText3", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (RelationalQualifier, ItemIdentification, AFTX*)
                    /// </para>
                    /// </summary>
                    public partial class LINLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<AFTXLocalType> AFTXField;

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator LINLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LINLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static LINLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("RelationalQualifier", "")), new NamedContentModelEntity(XName.Get("ItemIdentification", "")), new NamedContentModelEntity(XName.Get("AFTX", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (RelationalQualifier, ItemIdentification, AFTX*)
                        /// </para>
                        /// </summary>
                        public LINLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (RelationalQualifier, ItemIdentification, AFTX*)
                        /// </para>
                        /// </summary>
                        public string RelationalQualifier
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("RelationalQualifier", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("RelationalQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (RelationalQualifier, ItemIdentification, AFTX*)
                        /// </para>
                        /// </summary>
                        public ItemIdentificationLocalType ItemIdentification
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("ItemIdentification", ""));
                                return ((ItemIdentificationLocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("ItemIdentification", ""), value);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (RelationalQualifier, ItemIdentification, AFTX*)
                        /// </para>
                        /// </summary>
                        public IList<REPORTS.PTHPRPLocalType.UNBLocalType.UNHLocalType.LINLocalType.AFTXLocalType> AFTX
                        {
                            get
                            {
                                if ((this.AFTXField == null))
                                {
                                    this.AFTXField = new XTypedList<AFTXLocalType>(this, LinqToXsdTypeManager.Instance, XName.Get("AFTX", ""));
                                }
                                return this.AFTXField;
                            }
                            set
                            {
                                if ((value == null))
                                {
                                    this.AFTXField = null;
                                }
                                else
                                {
                                    if ((this.AFTXField == null))
                                    {
                                        this.AFTXField = XTypedList<AFTXLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("AFTX", ""));
                                    }
                                    else
                                    {
                                        XTypedServices.SetList<AFTXLocalType>(this.AFTXField, value);
                                    }
                                }
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("LIN", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<LINLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("RelationalQualifier", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("ItemIdentification", ""), typeof(ItemIdentificationLocalType));
                            localElementDictionary.Add(XName.Get("AFTX", ""), typeof(AFTXLocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ItemQualifier, ItemNumber)
                        /// </para>
                        /// </summary>
                        public partial class ItemIdentificationLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator ItemIdentificationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ItemIdentificationLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static ItemIdentificationLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ItemQualifier", "")), new NamedContentModelEntity(XName.Get("ItemNumber", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ItemQualifier, ItemNumber)
                            /// </para>
                            /// </summary>
                            public ItemIdentificationLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ItemQualifier, ItemNumber)
                            /// </para>
                            /// </summary>
                            public string ItemQualifier
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ItemQualifier", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ItemQualifier", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ItemQualifier, ItemNumber)
                            /// </para>
                            /// </summary>
                            public string ItemNumber
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ItemNumber", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ItemNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("ItemIdentification", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<ItemIdentificationLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ItemQualifier", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("ItemNumber", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (TextSubjectCode, TextLiteral)
                        /// </para>
                        /// </summary>
                        public partial class AFTXLocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator AFTXLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AFTXLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static AFTXLocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("TextSubjectCode", "")), new NamedContentModelEntity(XName.Get("TextLiteral", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (TextSubjectCode, TextLiteral)
                            /// </para>
                            /// </summary>
                            public AFTXLocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (TextSubjectCode, TextLiteral)
                            /// </para>
                            /// </summary>
                            public string TextSubjectCode
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("TextSubjectCode", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("TextSubjectCode", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (TextSubjectCode, TextLiteral)
                            /// </para>
                            /// </summary>
                            public TextLiteralLocalType TextLiteral
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("TextLiteral", ""));
                                    return ((TextLiteralLocalType)(x));
                                }
                                set
                                {
                                    this.SetElement(XName.Get("TextLiteral", ""), value);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("AFTX", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<AFTXLocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("TextSubjectCode", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("TextLiteral", ""), typeof(TextLiteralLocalType));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (FreeText1, FreeText2?, FreeText3?, FreeText4?, FreeText5?)
                            /// </para>
                            /// </summary>
                            public partial class TextLiteralLocalType : XTypedElement, IXMetaData
                            {

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;

                                public static explicit operator TextLiteralLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TextLiteralLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                                static TextLiteralLocalType()
                                {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("FreeText1", "")), new NamedContentModelEntity(XName.Get("FreeText2", "")), new NamedContentModelEntity(XName.Get("FreeText3", "")), new NamedContentModelEntity(XName.Get("FreeText4", "")), new NamedContentModelEntity(XName.Get("FreeText5", "")));
                                }

                                /// <summary>
                                /// <para>
                                /// Regular expression: (FreeText1, FreeText2?, FreeText3?, FreeText4?, FreeText5?)
                                /// </para>
                                /// </summary>
                                public TextLiteralLocalType()
                                {
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: required
                                /// </para>
                                /// <para>
                                /// Regular expression: (FreeText1, FreeText2?, FreeText3?, FreeText4?, FreeText5?)
                                /// </para>
                                /// </summary>
                                public string FreeText1
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("FreeText1", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("FreeText1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (FreeText1, FreeText2?, FreeText3?, FreeText4?, FreeText5?)
                                /// </para>
                                /// </summary>
                                public string FreeText2
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("FreeText2", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("FreeText2", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (FreeText1, FreeText2?, FreeText3?, FreeText4?, FreeText5?)
                                /// </para>
                                /// </summary>
                                public string FreeText3
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("FreeText3", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("FreeText3", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (FreeText1, FreeText2?, FreeText3?, FreeText4?, FreeText5?)
                                /// </para>
                                /// </summary>
                                public string FreeText4
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("FreeText4", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("FreeText4", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                /// <summary>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (FreeText1, FreeText2?, FreeText3?, FreeText4?, FreeText5?)
                                /// </para>
                                /// </summary>
                                public string FreeText5
                                {
                                    get
                                    {
                                        XElement x = this.GetElement(XName.Get("FreeText5", ""));
                                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                    set
                                    {
                                        this.SetElement(XName.Get("FreeText5", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                                {
                                    get
                                    {
                                        return localElementDictionary;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                XName IXMetaData.SchemaName
                                {
                                    get
                                    {
                                        return XName.Get("TextLiteral", "");
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin
                                {
                                    get
                                    {
                                        return SchemaOrigin.Fragment;
                                    }
                                }

                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager
                                {
                                    get
                                    {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }

                                public override XTypedElement Clone()
                                {
                                    return XTypedServices.CloneXTypedElement<TextLiteralLocalType>(this);
                                }

                                private static void BuildElementDictionary()
                                {
                                    localElementDictionary.Add(XName.Get("FreeText1", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("FreeText2", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("FreeText3", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("FreeText4", ""), typeof(string));
                                    localElementDictionary.Add(XName.Get("FreeText5", ""), typeof(string));
                                }

                                ContentModelEntity IXMetaData.GetContentModel()
                                {
                                    return contentModel;
                                }
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (Control1)
                    /// </para>
                    /// </summary>
                    public partial class CNTLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator CNTLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CNTLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static CNTLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Control1", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (Control1)
                        /// </para>
                        /// </summary>
                        public CNTLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (Control1)
                        /// </para>
                        /// </summary>
                        public Control1LocalType Control1
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("Control1", ""));
                                return ((Control1LocalType)(x));
                            }
                            set
                            {
                                this.SetElement(XName.Get("Control1", ""), value);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("CNT", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<CNTLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("Control1", ""), typeof(Control1LocalType));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (ControlQualifier1, ControlValue1)
                        /// </para>
                        /// </summary>
                        public partial class Control1LocalType : XTypedElement, IXMetaData
                        {

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;

                            public static explicit operator Control1LocalType(XElement xe) { return XTypedServices.ToXTypedElement<Control1LocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                            static Control1LocalType()
                            {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("ControlQualifier1", "")), new NamedContentModelEntity(XName.Get("ControlValue1", "")));
                            }

                            /// <summary>
                            /// <para>
                            /// Regular expression: (ControlQualifier1, ControlValue1)
                            /// </para>
                            /// </summary>
                            public Control1LocalType()
                            {
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ControlQualifier1, ControlValue1)
                            /// </para>
                            /// </summary>
                            public string ControlQualifier1
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ControlQualifier1", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ControlQualifier1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            /// <summary>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (ControlQualifier1, ControlValue1)
                            /// </para>
                            /// </summary>
                            public string ControlValue1
                            {
                                get
                                {
                                    XElement x = this.GetElement(XName.Get("ControlValue1", ""));
                                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                set
                                {
                                    this.SetElement(XName.Get("ControlValue1", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                            {
                                get
                                {
                                    return localElementDictionary;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            XName IXMetaData.SchemaName
                            {
                                get
                                {
                                    return XName.Get("Control1", "");
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin
                            {
                                get
                                {
                                    return SchemaOrigin.Fragment;
                                }
                            }

                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager
                            {
                                get
                                {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }

                            public override XTypedElement Clone()
                            {
                                return XTypedServices.CloneXTypedElement<Control1LocalType>(this);
                            }

                            private static void BuildElementDictionary()
                            {
                                localElementDictionary.Add(XName.Get("ControlQualifier1", ""), typeof(string));
                                localElementDictionary.Add(XName.Get("ControlValue1", ""), typeof(string));
                            }

                            ContentModelEntity IXMetaData.GetContentModel()
                            {
                                return contentModel;
                            }
                        }
                    }

                    /// <summary>
                    /// <para>
                    /// Regular expression: (NumberOfSegmentsInAMessage, MessageReferenceNumber)
                    /// </para>
                    /// </summary>
                    public partial class UNTLocalType : XTypedElement, IXMetaData
                    {

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;

                        public static explicit operator UNTLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UNTLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                        static UNTLocalType()
                        {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("NumberOfSegmentsInAMessage", "")), new NamedContentModelEntity(XName.Get("MessageReferenceNumber", "")));
                        }

                        /// <summary>
                        /// <para>
                        /// Regular expression: (NumberOfSegmentsInAMessage, MessageReferenceNumber)
                        /// </para>
                        /// </summary>
                        public UNTLocalType()
                        {
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (NumberOfSegmentsInAMessage, MessageReferenceNumber)
                        /// </para>
                        /// </summary>
                        public string NumberOfSegmentsInAMessage
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("NumberOfSegmentsInAMessage", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("NumberOfSegmentsInAMessage", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        /// <summary>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (NumberOfSegmentsInAMessage, MessageReferenceNumber)
                        /// </para>
                        /// </summary>
                        public string MessageReferenceNumber
                        {
                            get
                            {
                                XElement x = this.GetElement(XName.Get("MessageReferenceNumber", ""));
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set
                            {
                                this.SetElement(XName.Get("MessageReferenceNumber", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                        {
                            get
                            {
                                return localElementDictionary;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        XName IXMetaData.SchemaName
                        {
                            get
                            {
                                return XName.Get("UNT", "");
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin
                        {
                            get
                            {
                                return SchemaOrigin.Fragment;
                            }
                        }

                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager
                        {
                            get
                            {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }

                        public override XTypedElement Clone()
                        {
                            return XTypedServices.CloneXTypedElement<UNTLocalType>(this);
                        }

                        private static void BuildElementDictionary()
                        {
                            localElementDictionary.Add(XName.Get("NumberOfSegmentsInAMessage", ""), typeof(string));
                            localElementDictionary.Add(XName.Get("MessageReferenceNumber", ""), typeof(string));
                        }

                        ContentModelEntity IXMetaData.GetContentModel()
                        {
                            return contentModel;
                        }
                    }
                }
            }

            /// <summary>
            /// <para>
            /// Regular expression: (InterchangeControlCount, InterchangeControlReference)
            /// </para>
            /// </summary>
            public partial class UNZLocalType : XTypedElement, IXMetaData
            {

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;

                public static explicit operator UNZLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UNZLocalType>(xe, LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }

                static UNZLocalType()
                {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("InterchangeControlCount", "")), new NamedContentModelEntity(XName.Get("InterchangeControlReference", "")));
                }

                /// <summary>
                /// <para>
                /// Regular expression: (InterchangeControlCount, InterchangeControlReference)
                /// </para>
                /// </summary>
                public UNZLocalType()
                {
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeControlCount, InterchangeControlReference)
                /// </para>
                /// </summary>
                public string InterchangeControlCount
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("InterchangeControlCount", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("InterchangeControlCount", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (InterchangeControlCount, InterchangeControlReference)
                /// </para>
                /// </summary>
                public string InterchangeControlReference
                {
                    get
                    {
                        XElement x = this.GetElement(XName.Get("InterchangeControlReference", ""));
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set
                    {
                        this.SetElement(XName.Get("InterchangeControlReference", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary
                {
                    get
                    {
                        return localElementDictionary;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                XName IXMetaData.SchemaName
                {
                    get
                    {
                        return XName.Get("UNZ", "");
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin
                {
                    get
                    {
                        return SchemaOrigin.Fragment;
                    }
                }

                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager
                {
                    get
                    {
                        return LinqToXsdTypeManager.Instance;
                    }
                }

                public override XTypedElement Clone()
                {
                    return XTypedServices.CloneXTypedElement<UNZLocalType>(this);
                }

                private static void BuildElementDictionary()
                {
                    localElementDictionary.Add(XName.Get("InterchangeControlCount", ""), typeof(string));
                    localElementDictionary.Add(XName.Get("InterchangeControlReference", ""), typeof(string));
                }

                ContentModelEntity IXMetaData.GetContentModel()
                {
                    return contentModel;
                }
            }
        }
    }

    public class LinqToXsdTypeManager : ILinqToXsdTypeManager
    {

        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();

        private static XmlSchemaSet schemaSet;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();

        static LinqToXsdTypeManager()
        {
            BuildElementDictionary();
        }

        XmlSchemaSet ILinqToXsdTypeManager.Schemas
        {
            get
            {
                if ((schemaSet == null))
                {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set
            {
                schemaSet = value;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary
        {
            get
            {
                return XTypedServices.EmptyDictionary;
            }
        }

        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary
        {
            get
            {
                return elementDictionary;
            }
        }

        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping
        {
            get
            {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }

        public static LinqToXsdTypeManager Instance
        {
            get
            {
                return typeManagerSingleton;
            }
        }

        private static void BuildElementDictionary()
        {
            elementDictionary.Add(XName.Get("REPORTS", ""), typeof(REPORTS));
        }

        protected internal static void AddSchemas(XmlSchemaSet schemas)
        {
            schemas.Add(schemaSet);
        }

        public static System.Type GetRootType()
        {
            return elementDictionary[XName.Get("REPORTS", "")];
        }
    }

    public partial class XRootNamespace
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public REPORTS REPORTS { get { return rootObject as REPORTS; } }

        private XRootNamespace()
        {
        }

        public XRootNamespace(REPORTS root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRootNamespace Load(string xmlFile)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(string xmlFile, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(TextReader textReader, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Load(XmlReader xmlReader)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRootNamespace Parse(string text, LoadOptions options)
        {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

    public partial class XRoot
    {

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;


        public REPORTS REPORTS { get { return rootObject as REPORTS; } }

        private XRoot()
        {
        }

        public XRoot(REPORTS root)
        {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }

        public XDocument XDocument
        {
            get
            {
                return doc;
            }
        }

        public static XRoot Load(string xmlFile)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(string xmlFile, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(TextReader textReader, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Load(XmlReader xmlReader)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public static XRoot Parse(string text, LoadOptions options)
        {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null))
            {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }

        public virtual void Save(string fileName)
        {
            doc.Save(fileName);
        }

        public virtual void Save(TextWriter textWriter)
        {
            doc.Save(textWriter);
        }

        public virtual void Save(XmlWriter writer)
        {
            doc.Save(writer);
        }

        public virtual void Save(TextWriter textWriter, SaveOptions options)
        {
            doc.Save(textWriter, options);
        }

        public virtual void Save(string fileName, SaveOptions options)
        {
            doc.Save(fileName, options);
        }
    }

}