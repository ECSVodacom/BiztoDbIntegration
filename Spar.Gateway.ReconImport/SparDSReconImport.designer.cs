#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spar.Gateway.ReconImport
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SparDS")]
	public partial class SparDSReconImportDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertReconHeader(ReconHeader instance);
    partial void UpdateReconHeader(ReconHeader instance);
    partial void DeleteReconHeader(ReconHeader instance);
    partial void InsertReconReport(ReconReport instance);
    partial void UpdateReconReport(ReconReport instance);
    partial void DeleteReconReport(ReconReport instance);
    partial void InsertReconVariance(ReconVariance instance);
    partial void UpdateReconVariance(ReconVariance instance);
    partial void DeleteReconVariance(ReconVariance instance);
    partial void InsertReconLine(ReconLine instance);
    partial void UpdateReconLine(ReconLine instance);
    partial void DeleteReconLine(ReconLine instance);
    #endregion
		
		public SparDSReconImportDataContext() : 
				base(global::Spar.Gateway.ReconImport.Properties.Settings.Default.SparDSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SparDSReconImportDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SparDSReconImportDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SparDSReconImportDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SparDSReconImportDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ReconHeader> ReconHeaders
		{
			get
			{
				return this.GetTable<ReconHeader>();
			}
		}
		
		public System.Data.Linq.Table<ReconReport> ReconReports
		{
			get
			{
				return this.GetTable<ReconReport>();
			}
		}
		
		public System.Data.Linq.Table<ReconVariance> ReconVariances
		{
			get
			{
				return this.GetTable<ReconVariance>();
			}
		}
		
		public System.Data.Linq.Table<ReconLine> ReconLines
		{
			get
			{
				return this.GetTable<ReconLine>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReconHeader")]
	public partial class ReconHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RRID;
		
		private long _RHID;
		
		private string _RHcStoreName;
		
		private string _RHcAccountNumber;
		
		private string _RHcAutoRecon;
		
		private EntityRef<ReconReport> _ReconReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRRIDChanging(long value);
    partial void OnRRIDChanged();
    partial void OnRHIDChanging(long value);
    partial void OnRHIDChanged();
    partial void OnRHcStoreNameChanging(string value);
    partial void OnRHcStoreNameChanged();
    partial void OnRHcAccountNumberChanging(string value);
    partial void OnRHcAccountNumberChanged();
    partial void OnRHcAutoReconChanging(string value);
    partial void OnRHcAutoReconChanged();
    #endregion
		
		public ReconHeader()
		{
			this._ReconReport = default(EntityRef<ReconReport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRID", DbType="BigInt NOT NULL")]
		public long RRID
		{
			get
			{
				return this._RRID;
			}
			set
			{
				if ((this._RRID != value))
				{
					if (this._ReconReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRRIDChanging(value);
					this.SendPropertyChanging();
					this._RRID = value;
					this.SendPropertyChanged("RRID");
					this.OnRRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RHID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RHID
		{
			get
			{
				return this._RHID;
			}
			set
			{
				if ((this._RHID != value))
				{
					this.OnRHIDChanging(value);
					this.SendPropertyChanging();
					this._RHID = value;
					this.SendPropertyChanged("RHID");
					this.OnRHIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RHcStoreName", DbType="VarChar(250)")]
		public string RHcStoreName
		{
			get
			{
				return this._RHcStoreName;
			}
			set
			{
				if ((this._RHcStoreName != value))
				{
					this.OnRHcStoreNameChanging(value);
					this.SendPropertyChanging();
					this._RHcStoreName = value;
					this.SendPropertyChanged("RHcStoreName");
					this.OnRHcStoreNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RHcAccountNumber", DbType="VarChar(50)")]
		public string RHcAccountNumber
		{
			get
			{
				return this._RHcAccountNumber;
			}
			set
			{
				if ((this._RHcAccountNumber != value))
				{
					this.OnRHcAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._RHcAccountNumber = value;
					this.SendPropertyChanged("RHcAccountNumber");
					this.OnRHcAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RHcAutoRecon", DbType="VarChar(10)")]
		public string RHcAutoRecon
		{
			get
			{
				return this._RHcAutoRecon;
			}
			set
			{
				if ((this._RHcAutoRecon != value))
				{
					this.OnRHcAutoReconChanging(value);
					this.SendPropertyChanging();
					this._RHcAutoRecon = value;
					this.SendPropertyChanged("RHcAutoRecon");
					this.OnRHcAutoReconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReconReport_ReconHeader", Storage="_ReconReport", ThisKey="RRID", OtherKey="RRID", IsForeignKey=true)]
		public ReconReport ReconReport
		{
			get
			{
				return this._ReconReport.Entity;
			}
			set
			{
				ReconReport previousValue = this._ReconReport.Entity;
				if (((previousValue != value) 
							|| (this._ReconReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReconReport.Entity = null;
						previousValue.ReconHeaders.Remove(this);
					}
					this._ReconReport.Entity = value;
					if ((value != null))
					{
						value.ReconHeaders.Add(this);
						this._RRID = value.RRID;
					}
					else
					{
						this._RRID = default(long);
					}
					this.SendPropertyChanged("ReconReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReconReport")]
	public partial class ReconReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RRID;
		
		private string _RRcEANNumber;
		
		private string _RRcFileName;
		
		private System.Nullable<System.DateTime> _RRdDateReceived;
		
		private System.Nullable<System.DateTime> _RRdDateMailSent;
		
		private System.Nullable<System.DateTime> _RRdDateViewed;
		
		private System.Nullable<System.DateTime> _RRdDateDownloaded;
		
		private string _RRcFilePath;
		
		private string _RRcVendorCode;
		
		private string _RRcEDIDispatch;
		
		private System.Nullable<System.DateTime> _RRdReportDate;
		
		private string _RRcDCEANCode;
		
		private EntitySet<ReconHeader> _ReconHeaders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRRIDChanging(long value);
    partial void OnRRIDChanged();
    partial void OnRRcEANNumberChanging(string value);
    partial void OnRRcEANNumberChanged();
    partial void OnRRcFileNameChanging(string value);
    partial void OnRRcFileNameChanged();
    partial void OnRRdDateReceivedChanging(System.Nullable<System.DateTime> value);
    partial void OnRRdDateReceivedChanged();
    partial void OnRRdDateMailSentChanging(System.Nullable<System.DateTime> value);
    partial void OnRRdDateMailSentChanged();
    partial void OnRRdDateViewedChanging(System.Nullable<System.DateTime> value);
    partial void OnRRdDateViewedChanged();
    partial void OnRRdDateDownloadedChanging(System.Nullable<System.DateTime> value);
    partial void OnRRdDateDownloadedChanged();
    partial void OnRRcFilePathChanging(string value);
    partial void OnRRcFilePathChanged();
    partial void OnRRcVendorCodeChanging(string value);
    partial void OnRRcVendorCodeChanged();
    partial void OnRRcEDIDispatchChanging(string value);
    partial void OnRRcEDIDispatchChanged();
    partial void OnRRdReportDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRRdReportDateChanged();
    partial void OnRRcDCEANCodeChanging(string value);
    partial void OnRRcDCEANCodeChanged();
    #endregion
		
		public ReconReport()
		{
			this._ReconHeaders = new EntitySet<ReconHeader>(new Action<ReconHeader>(this.attach_ReconHeaders), new Action<ReconHeader>(this.detach_ReconHeaders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RRID
		{
			get
			{
				return this._RRID;
			}
			set
			{
				if ((this._RRID != value))
				{
					this.OnRRIDChanging(value);
					this.SendPropertyChanging();
					this._RRID = value;
					this.SendPropertyChanged("RRID");
					this.OnRRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRcEANNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RRcEANNumber
		{
			get
			{
				return this._RRcEANNumber;
			}
			set
			{
				if ((this._RRcEANNumber != value))
				{
					this.OnRRcEANNumberChanging(value);
					this.SendPropertyChanging();
					this._RRcEANNumber = value;
					this.SendPropertyChanged("RRcEANNumber");
					this.OnRRcEANNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRcFileName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RRcFileName
		{
			get
			{
				return this._RRcFileName;
			}
			set
			{
				if ((this._RRcFileName != value))
				{
					this.OnRRcFileNameChanging(value);
					this.SendPropertyChanging();
					this._RRcFileName = value;
					this.SendPropertyChanged("RRcFileName");
					this.OnRRcFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRdDateReceived", DbType="DateTime")]
		public System.Nullable<System.DateTime> RRdDateReceived
		{
			get
			{
				return this._RRdDateReceived;
			}
			set
			{
				if ((this._RRdDateReceived != value))
				{
					this.OnRRdDateReceivedChanging(value);
					this.SendPropertyChanging();
					this._RRdDateReceived = value;
					this.SendPropertyChanged("RRdDateReceived");
					this.OnRRdDateReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRdDateMailSent", DbType="DateTime")]
		public System.Nullable<System.DateTime> RRdDateMailSent
		{
			get
			{
				return this._RRdDateMailSent;
			}
			set
			{
				if ((this._RRdDateMailSent != value))
				{
					this.OnRRdDateMailSentChanging(value);
					this.SendPropertyChanging();
					this._RRdDateMailSent = value;
					this.SendPropertyChanged("RRdDateMailSent");
					this.OnRRdDateMailSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRdDateViewed", DbType="DateTime")]
		public System.Nullable<System.DateTime> RRdDateViewed
		{
			get
			{
				return this._RRdDateViewed;
			}
			set
			{
				if ((this._RRdDateViewed != value))
				{
					this.OnRRdDateViewedChanging(value);
					this.SendPropertyChanging();
					this._RRdDateViewed = value;
					this.SendPropertyChanged("RRdDateViewed");
					this.OnRRdDateViewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRdDateDownloaded", DbType="DateTime")]
		public System.Nullable<System.DateTime> RRdDateDownloaded
		{
			get
			{
				return this._RRdDateDownloaded;
			}
			set
			{
				if ((this._RRdDateDownloaded != value))
				{
					this.OnRRdDateDownloadedChanging(value);
					this.SendPropertyChanging();
					this._RRdDateDownloaded = value;
					this.SendPropertyChanged("RRdDateDownloaded");
					this.OnRRdDateDownloadedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRcFilePath", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string RRcFilePath
		{
			get
			{
				return this._RRcFilePath;
			}
			set
			{
				if ((this._RRcFilePath != value))
				{
					this.OnRRcFilePathChanging(value);
					this.SendPropertyChanging();
					this._RRcFilePath = value;
					this.SendPropertyChanged("RRcFilePath");
					this.OnRRcFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRcVendorCode", DbType="VarChar(50)")]
		public string RRcVendorCode
		{
			get
			{
				return this._RRcVendorCode;
			}
			set
			{
				if ((this._RRcVendorCode != value))
				{
					this.OnRRcVendorCodeChanging(value);
					this.SendPropertyChanging();
					this._RRcVendorCode = value;
					this.SendPropertyChanged("RRcVendorCode");
					this.OnRRcVendorCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRcEDIDispatch", DbType="VarChar(50)")]
		public string RRcEDIDispatch
		{
			get
			{
				return this._RRcEDIDispatch;
			}
			set
			{
				if ((this._RRcEDIDispatch != value))
				{
					this.OnRRcEDIDispatchChanging(value);
					this.SendPropertyChanging();
					this._RRcEDIDispatch = value;
					this.SendPropertyChanged("RRcEDIDispatch");
					this.OnRRcEDIDispatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRdReportDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RRdReportDate
		{
			get
			{
				return this._RRdReportDate;
			}
			set
			{
				if ((this._RRdReportDate != value))
				{
					this.OnRRdReportDateChanging(value);
					this.SendPropertyChanging();
					this._RRdReportDate = value;
					this.SendPropertyChanged("RRdReportDate");
					this.OnRRdReportDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRcDCEANCode", DbType="VarChar(50)")]
		public string RRcDCEANCode
		{
			get
			{
				return this._RRcDCEANCode;
			}
			set
			{
				if ((this._RRcDCEANCode != value))
				{
					this.OnRRcDCEANCodeChanging(value);
					this.SendPropertyChanging();
					this._RRcDCEANCode = value;
					this.SendPropertyChanged("RRcDCEANCode");
					this.OnRRcDCEANCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReconReport_ReconHeader", Storage="_ReconHeaders", ThisKey="RRID", OtherKey="RRID")]
		public EntitySet<ReconHeader> ReconHeaders
		{
			get
			{
				return this._ReconHeaders;
			}
			set
			{
				this._ReconHeaders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReconHeaders(ReconHeader entity)
		{
			this.SendPropertyChanging();
			entity.ReconReport = this;
		}
		
		private void detach_ReconHeaders(ReconHeader entity)
		{
			this.SendPropertyChanging();
			entity.ReconReport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReconVariance")]
	public partial class ReconVariance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RRID;
		
		private string _Descriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRRIDChanging(int value);
    partial void OnRRIDChanged();
    partial void OnDescriptionsChanging(string value);
    partial void OnDescriptionsChanged();
    #endregion
		
		public ReconVariance()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RRID
		{
			get
			{
				return this._RRID;
			}
			set
			{
				if ((this._RRID != value))
				{
					this.OnRRIDChanging(value);
					this.SendPropertyChanging();
					this._RRID = value;
					this.SendPropertyChanged("RRID");
					this.OnRRIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descriptions", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Descriptions
		{
			get
			{
				return this._Descriptions;
			}
			set
			{
				if ((this._Descriptions != value))
				{
					this.OnDescriptionsChanging(value);
					this.SendPropertyChanging();
					this._Descriptions = value;
					this.SendPropertyChanged("Descriptions");
					this.OnDescriptionsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReconLines")]
	public partial class ReconLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _RHID;
		
		private string _RRcEANNumber;
		
		private string _RLcLineType;
		
		private string _RLcDocType;
		
		private string _RLcInvNumber;
		
		private string _RLcCrnNumber;
		
		private string _RLcGrvNumber;
		
		private string _RLcClmNumber;
		
		private string _RLcRefDoc;
		
		private System.Nullable<System.DateTime> _RLdDocDate;
		
		private System.Nullable<System.DateTime> _RLdPayDueDate;
		
		private System.Nullable<System.DateTime> _RLdRefDocDate;
		
		private string _RLcVarianceKey;
		
		private System.Nullable<decimal> _RLmAmountIncluded;
		
		private System.Nullable<decimal> _RLmClaimAmount;
		
		private System.Nullable<decimal> _RLmNetAmount;
		
		private System.Nullable<decimal> _RLmCreditAmount;
		
		private long _RLID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRHIDChanging(long value);
    partial void OnRHIDChanged();
    partial void OnRRcEANNumberChanging(string value);
    partial void OnRRcEANNumberChanged();
    partial void OnRLcLineTypeChanging(string value);
    partial void OnRLcLineTypeChanged();
    partial void OnRLcDocTypeChanging(string value);
    partial void OnRLcDocTypeChanged();
    partial void OnRLcInvNumberChanging(string value);
    partial void OnRLcInvNumberChanged();
    partial void OnRLcCrnNumberChanging(string value);
    partial void OnRLcCrnNumberChanged();
    partial void OnRLcGrvNumberChanging(string value);
    partial void OnRLcGrvNumberChanged();
    partial void OnRLcClmNumberChanging(string value);
    partial void OnRLcClmNumberChanged();
    partial void OnRLcRefDocChanging(string value);
    partial void OnRLcRefDocChanged();
    partial void OnRLdDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRLdDocDateChanged();
    partial void OnRLdPayDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRLdPayDueDateChanged();
    partial void OnRLdRefDocDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRLdRefDocDateChanged();
    partial void OnRLcVarianceKeyChanging(string value);
    partial void OnRLcVarianceKeyChanged();
    partial void OnRLmAmountIncludedChanging(System.Nullable<decimal> value);
    partial void OnRLmAmountIncludedChanged();
    partial void OnRLmClaimAmountChanging(System.Nullable<decimal> value);
    partial void OnRLmClaimAmountChanged();
    partial void OnRLmNetAmountChanging(System.Nullable<decimal> value);
    partial void OnRLmNetAmountChanged();
    partial void OnRLmCreditAmountChanging(System.Nullable<decimal> value);
    partial void OnRLmCreditAmountChanged();
    partial void OnRLIDChanging(long value);
    partial void OnRLIDChanged();
    #endregion
		
		public ReconLine()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RHID", DbType="BigInt NOT NULL")]
		public long RHID
		{
			get
			{
				return this._RHID;
			}
			set
			{
				if ((this._RHID != value))
				{
					this.OnRHIDChanging(value);
					this.SendPropertyChanging();
					this._RHID = value;
					this.SendPropertyChanged("RHID");
					this.OnRHIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RRcEANNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RRcEANNumber
		{
			get
			{
				return this._RRcEANNumber;
			}
			set
			{
				if ((this._RRcEANNumber != value))
				{
					this.OnRRcEANNumberChanging(value);
					this.SendPropertyChanging();
					this._RRcEANNumber = value;
					this.SendPropertyChanged("RRcEANNumber");
					this.OnRRcEANNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLcLineType", DbType="VarChar(50)")]
		public string RLcLineType
		{
			get
			{
				return this._RLcLineType;
			}
			set
			{
				if ((this._RLcLineType != value))
				{
					this.OnRLcLineTypeChanging(value);
					this.SendPropertyChanging();
					this._RLcLineType = value;
					this.SendPropertyChanged("RLcLineType");
					this.OnRLcLineTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLcDocType", DbType="VarChar(50)")]
		public string RLcDocType
		{
			get
			{
				return this._RLcDocType;
			}
			set
			{
				if ((this._RLcDocType != value))
				{
					this.OnRLcDocTypeChanging(value);
					this.SendPropertyChanging();
					this._RLcDocType = value;
					this.SendPropertyChanged("RLcDocType");
					this.OnRLcDocTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLcInvNumber", DbType="VarChar(15)")]
		public string RLcInvNumber
		{
			get
			{
				return this._RLcInvNumber;
			}
			set
			{
				if ((this._RLcInvNumber != value))
				{
					this.OnRLcInvNumberChanging(value);
					this.SendPropertyChanging();
					this._RLcInvNumber = value;
					this.SendPropertyChanged("RLcInvNumber");
					this.OnRLcInvNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLcCrnNumber", DbType="VarChar(15)")]
		public string RLcCrnNumber
		{
			get
			{
				return this._RLcCrnNumber;
			}
			set
			{
				if ((this._RLcCrnNumber != value))
				{
					this.OnRLcCrnNumberChanging(value);
					this.SendPropertyChanging();
					this._RLcCrnNumber = value;
					this.SendPropertyChanged("RLcCrnNumber");
					this.OnRLcCrnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLcGrvNumber", DbType="VarChar(15)")]
		public string RLcGrvNumber
		{
			get
			{
				return this._RLcGrvNumber;
			}
			set
			{
				if ((this._RLcGrvNumber != value))
				{
					this.OnRLcGrvNumberChanging(value);
					this.SendPropertyChanging();
					this._RLcGrvNumber = value;
					this.SendPropertyChanged("RLcGrvNumber");
					this.OnRLcGrvNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLcClmNumber", DbType="VarChar(15)")]
		public string RLcClmNumber
		{
			get
			{
				return this._RLcClmNumber;
			}
			set
			{
				if ((this._RLcClmNumber != value))
				{
					this.OnRLcClmNumberChanging(value);
					this.SendPropertyChanging();
					this._RLcClmNumber = value;
					this.SendPropertyChanged("RLcClmNumber");
					this.OnRLcClmNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLcRefDoc", DbType="VarChar(15)")]
		public string RLcRefDoc
		{
			get
			{
				return this._RLcRefDoc;
			}
			set
			{
				if ((this._RLcRefDoc != value))
				{
					this.OnRLcRefDocChanging(value);
					this.SendPropertyChanging();
					this._RLcRefDoc = value;
					this.SendPropertyChanged("RLcRefDoc");
					this.OnRLcRefDocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLdDocDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RLdDocDate
		{
			get
			{
				return this._RLdDocDate;
			}
			set
			{
				if ((this._RLdDocDate != value))
				{
					this.OnRLdDocDateChanging(value);
					this.SendPropertyChanging();
					this._RLdDocDate = value;
					this.SendPropertyChanged("RLdDocDate");
					this.OnRLdDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLdPayDueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RLdPayDueDate
		{
			get
			{
				return this._RLdPayDueDate;
			}
			set
			{
				if ((this._RLdPayDueDate != value))
				{
					this.OnRLdPayDueDateChanging(value);
					this.SendPropertyChanging();
					this._RLdPayDueDate = value;
					this.SendPropertyChanged("RLdPayDueDate");
					this.OnRLdPayDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLdRefDocDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RLdRefDocDate
		{
			get
			{
				return this._RLdRefDocDate;
			}
			set
			{
				if ((this._RLdRefDocDate != value))
				{
					this.OnRLdRefDocDateChanging(value);
					this.SendPropertyChanging();
					this._RLdRefDocDate = value;
					this.SendPropertyChanged("RLdRefDocDate");
					this.OnRLdRefDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLcVarianceKey", DbType="VarChar(100)")]
		public string RLcVarianceKey
		{
			get
			{
				return this._RLcVarianceKey;
			}
			set
			{
				if ((this._RLcVarianceKey != value))
				{
					this.OnRLcVarianceKeyChanging(value);
					this.SendPropertyChanging();
					this._RLcVarianceKey = value;
					this.SendPropertyChanged("RLcVarianceKey");
					this.OnRLcVarianceKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLmAmountIncluded", DbType="Money")]
		public System.Nullable<decimal> RLmAmountIncluded
		{
			get
			{
				return this._RLmAmountIncluded;
			}
			set
			{
				if ((this._RLmAmountIncluded != value))
				{
					this.OnRLmAmountIncludedChanging(value);
					this.SendPropertyChanging();
					this._RLmAmountIncluded = value;
					this.SendPropertyChanged("RLmAmountIncluded");
					this.OnRLmAmountIncludedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLmClaimAmount", DbType="Money")]
		public System.Nullable<decimal> RLmClaimAmount
		{
			get
			{
				return this._RLmClaimAmount;
			}
			set
			{
				if ((this._RLmClaimAmount != value))
				{
					this.OnRLmClaimAmountChanging(value);
					this.SendPropertyChanging();
					this._RLmClaimAmount = value;
					this.SendPropertyChanged("RLmClaimAmount");
					this.OnRLmClaimAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLmNetAmount", DbType="Money")]
		public System.Nullable<decimal> RLmNetAmount
		{
			get
			{
				return this._RLmNetAmount;
			}
			set
			{
				if ((this._RLmNetAmount != value))
				{
					this.OnRLmNetAmountChanging(value);
					this.SendPropertyChanging();
					this._RLmNetAmount = value;
					this.SendPropertyChanged("RLmNetAmount");
					this.OnRLmNetAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLmCreditAmount", DbType="Money")]
		public System.Nullable<decimal> RLmCreditAmount
		{
			get
			{
				return this._RLmCreditAmount;
			}
			set
			{
				if ((this._RLmCreditAmount != value))
				{
					this.OnRLmCreditAmountChanging(value);
					this.SendPropertyChanging();
					this._RLmCreditAmount = value;
					this.SendPropertyChanged("RLmCreditAmount");
					this.OnRLmCreditAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RLID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long RLID
		{
			get
			{
				return this._RLID;
			}
			set
			{
				if ((this._RLID != value))
				{
					this.OnRLIDChanging(value);
					this.SendPropertyChanging();
					this._RLID = value;
					this.SendPropertyChanged("RLID");
					this.OnRLIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
